{-# OPTIONS_GHC -w #-}
{-# OPTIONS -fglasgow-exts -cpp #-}
{-# LANGUAGE BangPatterns #-} -- required for versions of Happy before 1.18.6
{-# OPTIONS -Wwarn -w #-}
-- The above warning supression flag is a temporary kludge.
-- While working on this module you are encouraged to remove it and fix
-- any warnings in the module. See
--     http://ghc.haskell.org/trac/ghc/wiki/Commentary/CodingStyle#Warnings
-- for details

-- | This module provides the generated Happy parser for Haskell. It exports
-- a number of parsers which may be used in any library that uses the GHC API.
-- A common usage pattern is to initialize the parser state with a given string
-- and then parse that string:
--
-- @
--     runParser :: DynFlags -> String -> P a -> ParseResult a
--     runParser flags str parser = unP parser parseState
--     where
--       filename = "\<interactive\>"
--       location = mkRealSrcLoc (mkFastString filename) 1 1
--       buffer = stringToStringBuffer str
--       parseState = mkPState flags buffer location in
-- @

module Language.Haskell.GHC.HappyParser (
  fullModule,
  fullTypeSignature,
  fullStatement,
  fullExpression,
  fullImport,
  fullDeclaration,
  partialModule,
  partialTypeSignature,
  partialStatement,
  partialExpression,
  partialImport,
  partialDeclaration
  ) where

-- base
import Control.Monad    ( unless, liftM )
import GHC.Exts
import Data.Char
import Control.Monad    ( mplus )

-- compiler/hsSyn
import HsSyn

-- compiler/main
import HscTypes         ( IsBootInterface, WarningTxt(..) )
import DynFlags

-- compiler/utils
import OrdList
import BooleanFormula   ( BooleanFormula, mkAnd, mkOr, mkTrue, mkVar )
import FastString
import Maybes           ( orElse )
import Outputable

-- compiler/basicTypes
import RdrName
import OccName          ( varName, dataName, tcClsName, tvName, startsWithUnderscore )
import DataCon          ( DataCon, dataConName )
import SrcLoc
import Module
import BasicTypes

-- compiler/types
import Type             ( funTyCon )
import Kind             ( Kind, liftedTypeKind, unliftedTypeKind, mkArrowKind )
import Class            ( FunDep )

-- compiler/parser
import RdrHsSyn
import Lexer
import HaddockUtils
import ApiAnnotation

-- compiler/typecheck
import TcEvidence       ( emptyTcEvBinds )

-- compiler/prelude
import ForeignCall
import TysPrim          ( liftedTypeKindTyConName, eqPrimTyCon )
import TysWiredIn       ( unitTyCon, unitDataCon, tupleTyCon, tupleCon, nilDataCon,
                          unboxedUnitTyCon, unboxedUnitDataCon,
                          listTyCon_RDR, parrTyCon_RDR, consDataCon_RDR, eqTyCon_RDR )
import qualified Data.Array as Happy_Data_Array
import qualified GHC.Exts as Happy_GHC_Exts
import Control.Applicative(Applicative(..))
import Control.Monad (ap)

-- parser produced by Happy Version 1.19.5

newtype HappyAbsSyn  = HappyAbsSyn HappyAny
#if __GLASGOW_HASKELL__ >= 607
type HappyAny = Happy_GHC_Exts.Any
#else
type HappyAny = forall a . a
#endif
happyIn15 :: (LHsDecl RdrName) -> (HappyAbsSyn )
happyIn15 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn15 #-}
happyOut15 :: (HappyAbsSyn ) -> (LHsDecl RdrName)
happyOut15 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut15 #-}
happyIn16 :: (Located (HsModule RdrName)) -> (HappyAbsSyn )
happyIn16 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn16 #-}
happyOut16 :: (HappyAbsSyn ) -> (Located (HsModule RdrName))
happyOut16 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut16 #-}
happyIn17 :: (Located RdrName) -> (HappyAbsSyn )
happyIn17 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn17 #-}
happyOut17 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut17 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut17 #-}
happyIn18 :: (Located (HsModule RdrName)) -> (HappyAbsSyn )
happyIn18 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn18 #-}
happyOut18 :: (HappyAbsSyn ) -> (Located (HsModule RdrName))
happyOut18 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut18 #-}
happyIn19 :: (Maybe LHsDocString) -> (HappyAbsSyn )
happyIn19 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn19 #-}
happyOut19 :: (HappyAbsSyn ) -> (Maybe LHsDocString)
happyOut19 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut19 #-}
happyIn20 :: (()) -> (HappyAbsSyn )
happyIn20 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn20 #-}
happyOut20 :: (HappyAbsSyn ) -> (())
happyOut20 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut20 #-}
happyIn21 :: (Maybe (Located WarningTxt)) -> (HappyAbsSyn )
happyIn21 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn21 #-}
happyOut21 :: (HappyAbsSyn ) -> (Maybe (Located WarningTxt))
happyOut21 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut21 #-}
happyIn22 :: (([AddAnn]
             ,([LImportDecl RdrName], [LHsDecl RdrName]))) -> (HappyAbsSyn )
happyIn22 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn22 #-}
happyOut22 :: (HappyAbsSyn ) -> (([AddAnn]
             ,([LImportDecl RdrName], [LHsDecl RdrName])))
happyOut22 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut22 #-}
happyIn23 :: (([AddAnn]
             ,([LImportDecl RdrName], [LHsDecl RdrName]))) -> (HappyAbsSyn )
happyIn23 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn23 #-}
happyOut23 :: (HappyAbsSyn ) -> (([AddAnn]
             ,([LImportDecl RdrName], [LHsDecl RdrName])))
happyOut23 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut23 #-}
happyIn24 :: (([AddAnn]
             ,([LImportDecl RdrName], [LHsDecl RdrName]))) -> (HappyAbsSyn )
happyIn24 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn24 #-}
happyOut24 :: (HappyAbsSyn ) -> (([AddAnn]
             ,([LImportDecl RdrName], [LHsDecl RdrName])))
happyOut24 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut24 #-}
happyIn25 :: ([LHsDecl RdrName]) -> (HappyAbsSyn )
happyIn25 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn25 #-}
happyOut25 :: (HappyAbsSyn ) -> ([LHsDecl RdrName])
happyOut25 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut25 #-}
happyIn26 :: (Located (HsModule RdrName)) -> (HappyAbsSyn )
happyIn26 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn26 #-}
happyOut26 :: (HappyAbsSyn ) -> (Located (HsModule RdrName))
happyOut26 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut26 #-}
happyIn27 :: ([LImportDecl RdrName]) -> (HappyAbsSyn )
happyIn27 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn27 #-}
happyOut27 :: (HappyAbsSyn ) -> ([LImportDecl RdrName])
happyOut27 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut27 #-}
happyIn28 :: ([LImportDecl RdrName]) -> (HappyAbsSyn )
happyIn28 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn28 #-}
happyOut28 :: (HappyAbsSyn ) -> ([LImportDecl RdrName])
happyOut28 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut28 #-}
happyIn29 :: ((Maybe (Located [LIE RdrName]))) -> (HappyAbsSyn )
happyIn29 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn29 #-}
happyOut29 :: (HappyAbsSyn ) -> ((Maybe (Located [LIE RdrName])))
happyOut29 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut29 #-}
happyIn30 :: (OrdList (LIE RdrName)) -> (HappyAbsSyn )
happyIn30 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn30 #-}
happyOut30 :: (HappyAbsSyn ) -> (OrdList (LIE RdrName))
happyOut30 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut30 #-}
happyIn31 :: (OrdList (LIE RdrName)) -> (HappyAbsSyn )
happyIn31 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn31 #-}
happyOut31 :: (HappyAbsSyn ) -> (OrdList (LIE RdrName))
happyOut31 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut31 #-}
happyIn32 :: (OrdList (LIE RdrName)) -> (HappyAbsSyn )
happyIn32 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn32 #-}
happyOut32 :: (HappyAbsSyn ) -> (OrdList (LIE RdrName))
happyOut32 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut32 #-}
happyIn33 :: (OrdList (LIE RdrName)) -> (HappyAbsSyn )
happyIn33 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn33 #-}
happyOut33 :: (HappyAbsSyn ) -> (OrdList (LIE RdrName))
happyOut33 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut33 #-}
happyIn34 :: (OrdList (LIE RdrName)) -> (HappyAbsSyn )
happyIn34 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn34 #-}
happyOut34 :: (HappyAbsSyn ) -> (OrdList (LIE RdrName))
happyOut34 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut34 #-}
happyIn35 :: (Located ([AddAnn],ImpExpSubSpec)) -> (HappyAbsSyn )
happyIn35 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn35 #-}
happyOut35 :: (HappyAbsSyn ) -> (Located ([AddAnn],ImpExpSubSpec))
happyOut35 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut35 #-}
happyIn36 :: ([Located RdrName]) -> (HappyAbsSyn )
happyIn36 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn36 #-}
happyOut36 :: (HappyAbsSyn ) -> ([Located RdrName])
happyOut36 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut36 #-}
happyIn37 :: (Located RdrName) -> (HappyAbsSyn )
happyIn37 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn37 #-}
happyOut37 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut37 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut37 #-}
happyIn38 :: (Located RdrName) -> (HappyAbsSyn )
happyIn38 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn38 #-}
happyOut38 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut38 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut38 #-}
happyIn39 :: ([LImportDecl RdrName]) -> (HappyAbsSyn )
happyIn39 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn39 #-}
happyOut39 :: (HappyAbsSyn ) -> ([LImportDecl RdrName])
happyOut39 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut39 #-}
happyIn40 :: (LImportDecl RdrName) -> (HappyAbsSyn )
happyIn40 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn40 #-}
happyOut40 :: (HappyAbsSyn ) -> (LImportDecl RdrName)
happyOut40 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut40 #-}
happyIn41 :: (([AddAnn],IsBootInterface)) -> (HappyAbsSyn )
happyIn41 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn41 #-}
happyOut41 :: (HappyAbsSyn ) -> (([AddAnn],IsBootInterface))
happyOut41 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut41 #-}
happyIn42 :: (([AddAnn],Bool)) -> (HappyAbsSyn )
happyIn42 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn42 #-}
happyOut42 :: (HappyAbsSyn ) -> (([AddAnn],Bool))
happyOut42 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut42 #-}
happyIn43 :: (([AddAnn],Maybe FastString)) -> (HappyAbsSyn )
happyIn43 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn43 #-}
happyOut43 :: (HappyAbsSyn ) -> (([AddAnn],Maybe FastString))
happyOut43 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut43 #-}
happyIn44 :: (([AddAnn],Bool)) -> (HappyAbsSyn )
happyIn44 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn44 #-}
happyOut44 :: (HappyAbsSyn ) -> (([AddAnn],Bool))
happyOut44 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut44 #-}
happyIn45 :: (([AddAnn],Located (Maybe ModuleName))) -> (HappyAbsSyn )
happyIn45 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn45 #-}
happyOut45 :: (HappyAbsSyn ) -> (([AddAnn],Located (Maybe ModuleName)))
happyOut45 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut45 #-}
happyIn46 :: (Located (Maybe (Bool, Located [LIE RdrName]))) -> (HappyAbsSyn )
happyIn46 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn46 #-}
happyOut46 :: (HappyAbsSyn ) -> (Located (Maybe (Bool, Located [LIE RdrName])))
happyOut46 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut46 #-}
happyIn47 :: (Located (Bool, Located [LIE RdrName])) -> (HappyAbsSyn )
happyIn47 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn47 #-}
happyOut47 :: (HappyAbsSyn ) -> (Located (Bool, Located [LIE RdrName]))
happyOut47 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut47 #-}
happyIn48 :: (Located Int) -> (HappyAbsSyn )
happyIn48 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn48 #-}
happyOut48 :: (HappyAbsSyn ) -> (Located Int)
happyOut48 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut48 #-}
happyIn49 :: (Located FixityDirection) -> (HappyAbsSyn )
happyIn49 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn49 #-}
happyOut49 :: (HappyAbsSyn ) -> (Located FixityDirection)
happyOut49 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut49 #-}
happyIn50 :: (Located (OrdList (Located RdrName))) -> (HappyAbsSyn )
happyIn50 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn50 #-}
happyOut50 :: (HappyAbsSyn ) -> (Located (OrdList (Located RdrName)))
happyOut50 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut50 #-}
happyIn51 :: (OrdList (LHsDecl RdrName)) -> (HappyAbsSyn )
happyIn51 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn51 #-}
happyOut51 :: (HappyAbsSyn ) -> (OrdList (LHsDecl RdrName))
happyOut51 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut51 #-}
happyIn52 :: (OrdList (LHsDecl RdrName)) -> (HappyAbsSyn )
happyIn52 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn52 #-}
happyOut52 :: (HappyAbsSyn ) -> (OrdList (LHsDecl RdrName))
happyOut52 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut52 #-}
happyIn53 :: (LTyClDecl RdrName) -> (HappyAbsSyn )
happyIn53 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn53 #-}
happyOut53 :: (HappyAbsSyn ) -> (LTyClDecl RdrName)
happyOut53 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut53 #-}
happyIn54 :: (LTyClDecl RdrName) -> (HappyAbsSyn )
happyIn54 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn54 #-}
happyOut54 :: (HappyAbsSyn ) -> (LTyClDecl RdrName)
happyOut54 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut54 #-}
happyIn55 :: (LInstDecl RdrName) -> (HappyAbsSyn )
happyIn55 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn55 #-}
happyOut55 :: (HappyAbsSyn ) -> (LInstDecl RdrName)
happyOut55 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut55 #-}
happyIn56 :: (Maybe (Located OverlapMode)) -> (HappyAbsSyn )
happyIn56 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn56 #-}
happyOut56 :: (HappyAbsSyn ) -> (Maybe (Located OverlapMode))
happyOut56 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut56 #-}
happyIn57 :: (Located ([AddAnn],FamilyInfo RdrName)) -> (HappyAbsSyn )
happyIn57 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn57 #-}
happyOut57 :: (HappyAbsSyn ) -> (Located ([AddAnn],FamilyInfo RdrName))
happyOut57 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut57 #-}
happyIn58 :: (Located ([AddAnn],[LTyFamInstEqn RdrName])) -> (HappyAbsSyn )
happyIn58 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn58 #-}
happyOut58 :: (HappyAbsSyn ) -> (Located ([AddAnn],[LTyFamInstEqn RdrName]))
happyOut58 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut58 #-}
happyIn59 :: (Located [LTyFamInstEqn RdrName]) -> (HappyAbsSyn )
happyIn59 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn59 #-}
happyOut59 :: (HappyAbsSyn ) -> (Located [LTyFamInstEqn RdrName])
happyOut59 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut59 #-}
happyIn60 :: (LTyFamInstEqn RdrName) -> (HappyAbsSyn )
happyIn60 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn60 #-}
happyOut60 :: (HappyAbsSyn ) -> (LTyFamInstEqn RdrName)
happyOut60 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut60 #-}
happyIn61 :: (LHsDecl RdrName) -> (HappyAbsSyn )
happyIn61 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn61 #-}
happyOut61 :: (HappyAbsSyn ) -> (LHsDecl RdrName)
happyOut61 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut61 #-}
happyIn62 :: ([AddAnn]) -> (HappyAbsSyn )
happyIn62 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn62 #-}
happyOut62 :: (HappyAbsSyn ) -> ([AddAnn])
happyOut62 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut62 #-}
happyIn63 :: (LInstDecl RdrName) -> (HappyAbsSyn )
happyIn63 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn63 #-}
happyOut63 :: (HappyAbsSyn ) -> (LInstDecl RdrName)
happyOut63 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut63 #-}
happyIn64 :: (Located (AddAnn,NewOrData)) -> (HappyAbsSyn )
happyIn64 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn64 #-}
happyOut64 :: (HappyAbsSyn ) -> (Located (AddAnn,NewOrData))
happyOut64 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut64 #-}
happyIn65 :: (Located (Maybe (LHsKind RdrName))) -> (HappyAbsSyn )
happyIn65 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn65 #-}
happyOut65 :: (HappyAbsSyn ) -> (Located (Maybe (LHsKind RdrName)))
happyOut65 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut65 #-}
happyIn66 :: (Located (Maybe (LHsContext RdrName), LHsType RdrName)) -> (HappyAbsSyn )
happyIn66 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn66 #-}
happyOut66 :: (HappyAbsSyn ) -> (Located (Maybe (LHsContext RdrName), LHsType RdrName))
happyOut66 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut66 #-}
happyIn67 :: (Maybe (Located CType)) -> (HappyAbsSyn )
happyIn67 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn67 #-}
happyOut67 :: (HappyAbsSyn ) -> (Maybe (Located CType))
happyOut67 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut67 #-}
happyIn68 :: (LDerivDecl RdrName) -> (HappyAbsSyn )
happyIn68 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn68 #-}
happyOut68 :: (HappyAbsSyn ) -> (LDerivDecl RdrName)
happyOut68 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut68 #-}
happyIn69 :: (LRoleAnnotDecl RdrName) -> (HappyAbsSyn )
happyIn69 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn69 #-}
happyOut69 :: (HappyAbsSyn ) -> (LRoleAnnotDecl RdrName)
happyOut69 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut69 #-}
happyIn70 :: (Located [Located (Maybe FastString)]) -> (HappyAbsSyn )
happyIn70 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn70 #-}
happyOut70 :: (HappyAbsSyn ) -> (Located [Located (Maybe FastString)])
happyOut70 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut70 #-}
happyIn71 :: (Located [Located (Maybe FastString)]) -> (HappyAbsSyn )
happyIn71 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn71 #-}
happyOut71 :: (HappyAbsSyn ) -> (Located [Located (Maybe FastString)])
happyOut71 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut71 #-}
happyIn72 :: (Located (Maybe FastString)) -> (HappyAbsSyn )
happyIn72 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn72 #-}
happyOut72 :: (HappyAbsSyn ) -> (Located (Maybe FastString))
happyOut72 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut72 #-}
happyIn73 :: (LHsDecl RdrName) -> (HappyAbsSyn )
happyIn73 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn73 #-}
happyOut73 :: (HappyAbsSyn ) -> (LHsDecl RdrName)
happyOut73 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut73 #-}
happyIn74 :: ((Located RdrName, HsPatSynDetails (Located RdrName))) -> (HappyAbsSyn )
happyIn74 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn74 #-}
happyOut74 :: (HappyAbsSyn ) -> ((Located RdrName, HsPatSynDetails (Located RdrName)))
happyOut74 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut74 #-}
happyIn75 :: ([Located RdrName]) -> (HappyAbsSyn )
happyIn75 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn75 #-}
happyOut75 :: (HappyAbsSyn ) -> ([Located RdrName])
happyOut75 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut75 #-}
happyIn76 :: (Located ([AddAnn]
                         , Located (OrdList (LHsDecl RdrName)))) -> (HappyAbsSyn )
happyIn76 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn76 #-}
happyOut76 :: (HappyAbsSyn ) -> (Located ([AddAnn]
                         , Located (OrdList (LHsDecl RdrName))))
happyOut76 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut76 #-}
happyIn77 :: (LSig RdrName) -> (HappyAbsSyn )
happyIn77 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn77 #-}
happyOut77 :: (HappyAbsSyn ) -> (LSig RdrName)
happyOut77 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut77 #-}
happyIn78 :: (Located ([AddAnn]
                  ,( HsExplicitFlag, [LHsTyVarBndr RdrName], LHsContext RdrName
                   , LHsContext RdrName, LHsType RdrName))) -> (HappyAbsSyn )
happyIn78 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn78 #-}
happyOut78 :: (HappyAbsSyn ) -> (Located ([AddAnn]
                  ,( HsExplicitFlag, [LHsTyVarBndr RdrName], LHsContext RdrName
                   , LHsContext RdrName, LHsType RdrName)))
happyOut78 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut78 #-}
happyIn79 :: (Located (OrdList (LHsDecl RdrName))) -> (HappyAbsSyn )
happyIn79 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn79 #-}
happyOut79 :: (HappyAbsSyn ) -> (Located (OrdList (LHsDecl RdrName)))
happyOut79 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut79 #-}
happyIn80 :: (Located (OrdList (LHsDecl RdrName))) -> (HappyAbsSyn )
happyIn80 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn80 #-}
happyOut80 :: (HappyAbsSyn ) -> (Located (OrdList (LHsDecl RdrName)))
happyOut80 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut80 #-}
happyIn81 :: (Located ([AddAnn]
                     , OrdList (LHsDecl RdrName))) -> (HappyAbsSyn )
happyIn81 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn81 #-}
happyOut81 :: (HappyAbsSyn ) -> (Located ([AddAnn]
                     , OrdList (LHsDecl RdrName)))
happyOut81 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut81 #-}
happyIn82 :: (Located ([AddAnn]
                       ,(OrdList (LHsDecl RdrName)))) -> (HappyAbsSyn )
happyIn82 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn82 #-}
happyOut82 :: (HappyAbsSyn ) -> (Located ([AddAnn]
                       ,(OrdList (LHsDecl RdrName))))
happyOut82 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut82 #-}
happyIn83 :: (Located (OrdList (LHsDecl RdrName))) -> (HappyAbsSyn )
happyIn83 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn83 #-}
happyOut83 :: (HappyAbsSyn ) -> (Located (OrdList (LHsDecl RdrName)))
happyOut83 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut83 #-}
happyIn84 :: (Located (OrdList (LHsDecl RdrName))) -> (HappyAbsSyn )
happyIn84 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn84 #-}
happyOut84 :: (HappyAbsSyn ) -> (Located (OrdList (LHsDecl RdrName)))
happyOut84 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut84 #-}
happyIn85 :: (Located ([AddAnn]
                     , OrdList (LHsDecl RdrName))) -> (HappyAbsSyn )
happyIn85 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn85 #-}
happyOut85 :: (HappyAbsSyn ) -> (Located ([AddAnn]
                     , OrdList (LHsDecl RdrName)))
happyOut85 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut85 #-}
happyIn86 :: (Located ([AddAnn]
                        , OrdList (LHsDecl RdrName))) -> (HappyAbsSyn )
happyIn86 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn86 #-}
happyOut86 :: (HappyAbsSyn ) -> (Located ([AddAnn]
                        , OrdList (LHsDecl RdrName)))
happyOut86 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut86 #-}
happyIn87 :: (Located (OrdList (LHsDecl RdrName))) -> (HappyAbsSyn )
happyIn87 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn87 #-}
happyOut87 :: (HappyAbsSyn ) -> (Located (OrdList (LHsDecl RdrName)))
happyOut87 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut87 #-}
happyIn88 :: (Located ([AddAnn],OrdList (LHsDecl RdrName))) -> (HappyAbsSyn )
happyIn88 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn88 #-}
happyOut88 :: (HappyAbsSyn ) -> (Located ([AddAnn],OrdList (LHsDecl RdrName)))
happyOut88 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut88 #-}
happyIn89 :: (Located ([AddAnn],HsLocalBinds RdrName)) -> (HappyAbsSyn )
happyIn89 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn89 #-}
happyOut89 :: (HappyAbsSyn ) -> (Located ([AddAnn],HsLocalBinds RdrName))
happyOut89 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut89 #-}
happyIn90 :: (Located ([AddAnn],HsLocalBinds RdrName)) -> (HappyAbsSyn )
happyIn90 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn90 #-}
happyOut90 :: (HappyAbsSyn ) -> (Located ([AddAnn],HsLocalBinds RdrName))
happyOut90 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut90 #-}
happyIn91 :: (OrdList (LHsDecl RdrName)) -> (HappyAbsSyn )
happyIn91 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn91 #-}
happyOut91 :: (HappyAbsSyn ) -> (OrdList (LHsDecl RdrName))
happyOut91 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut91 #-}
happyIn92 :: (LHsDecl RdrName) -> (HappyAbsSyn )
happyIn92 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn92 #-}
happyOut92 :: (HappyAbsSyn ) -> (LHsDecl RdrName)
happyOut92 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut92 #-}
happyIn93 :: (([AddAnn],Maybe Activation)) -> (HappyAbsSyn )
happyIn93 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn93 #-}
happyOut93 :: (HappyAbsSyn ) -> (([AddAnn],Maybe Activation))
happyOut93 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut93 #-}
happyIn94 :: (([AddAnn]
                              ,Activation)) -> (HappyAbsSyn )
happyIn94 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn94 #-}
happyOut94 :: (HappyAbsSyn ) -> (([AddAnn]
                              ,Activation))
happyOut94 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut94 #-}
happyIn95 :: (([AddAnn],[LRuleBndr RdrName])) -> (HappyAbsSyn )
happyIn95 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn95 #-}
happyOut95 :: (HappyAbsSyn ) -> (([AddAnn],[LRuleBndr RdrName]))
happyOut95 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut95 #-}
happyIn96 :: ([LRuleBndr RdrName]) -> (HappyAbsSyn )
happyIn96 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn96 #-}
happyOut96 :: (HappyAbsSyn ) -> ([LRuleBndr RdrName])
happyOut96 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut96 #-}
happyIn97 :: (LRuleBndr RdrName) -> (HappyAbsSyn )
happyIn97 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn97 #-}
happyOut97 :: (HappyAbsSyn ) -> (LRuleBndr RdrName)
happyOut97 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut97 #-}
happyIn98 :: (OrdList (LHsDecl RdrName)) -> (HappyAbsSyn )
happyIn98 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn98 #-}
happyOut98 :: (HappyAbsSyn ) -> (OrdList (LHsDecl RdrName))
happyOut98 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut98 #-}
happyIn99 :: (OrdList (LHsDecl RdrName)) -> (HappyAbsSyn )
happyIn99 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn99 #-}
happyOut99 :: (HappyAbsSyn ) -> (OrdList (LHsDecl RdrName))
happyOut99 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut99 #-}
happyIn100 :: (OrdList (LHsDecl RdrName)) -> (HappyAbsSyn )
happyIn100 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn100 #-}
happyOut100 :: (HappyAbsSyn ) -> (OrdList (LHsDecl RdrName))
happyOut100 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut100 #-}
happyIn101 :: (OrdList (LHsDecl RdrName)) -> (HappyAbsSyn )
happyIn101 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn101 #-}
happyOut101 :: (HappyAbsSyn ) -> (OrdList (LHsDecl RdrName))
happyOut101 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut101 #-}
happyIn102 :: (Located ([AddAnn],[Located FastString])) -> (HappyAbsSyn )
happyIn102 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn102 #-}
happyOut102 :: (HappyAbsSyn ) -> (Located ([AddAnn],[Located FastString]))
happyOut102 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut102 #-}
happyIn103 :: (Located (OrdList (Located FastString))) -> (HappyAbsSyn )
happyIn103 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn103 #-}
happyOut103 :: (HappyAbsSyn ) -> (Located (OrdList (Located FastString)))
happyOut103 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut103 #-}
happyIn104 :: (LHsDecl RdrName) -> (HappyAbsSyn )
happyIn104 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn104 #-}
happyOut104 :: (HappyAbsSyn ) -> (LHsDecl RdrName)
happyOut104 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut104 #-}
happyIn105 :: (LHsDecl RdrName) -> (HappyAbsSyn )
happyIn105 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn105 #-}
happyOut105 :: (HappyAbsSyn ) -> (LHsDecl RdrName)
happyOut105 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut105 #-}
happyIn106 :: (Located CCallConv) -> (HappyAbsSyn )
happyIn106 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn106 #-}
happyOut106 :: (HappyAbsSyn ) -> (Located CCallConv)
happyOut106 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut106 #-}
happyIn107 :: (Located Safety) -> (HappyAbsSyn )
happyIn107 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn107 #-}
happyOut107 :: (HappyAbsSyn ) -> (Located Safety)
happyOut107 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut107 #-}
happyIn108 :: (Located ([AddAnn]
                    ,(Located FastString, Located RdrName, LHsType RdrName))) -> (HappyAbsSyn )
happyIn108 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn108 #-}
happyOut108 :: (HappyAbsSyn ) -> (Located ([AddAnn]
                    ,(Located FastString, Located RdrName, LHsType RdrName)))
happyOut108 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut108 #-}
happyIn109 :: (([AddAnn],Maybe (LHsType RdrName))) -> (HappyAbsSyn )
happyIn109 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn109 #-}
happyOut109 :: (HappyAbsSyn ) -> (([AddAnn],Maybe (LHsType RdrName)))
happyOut109 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut109 #-}
happyIn110 :: (([AddAnn],Maybe (LHsType RdrName))) -> (HappyAbsSyn )
happyIn110 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn110 #-}
happyOut110 :: (HappyAbsSyn ) -> (([AddAnn],Maybe (LHsType RdrName)))
happyOut110 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut110 #-}
happyIn111 :: (LHsType RdrName) -> (HappyAbsSyn )
happyIn111 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn111 #-}
happyOut111 :: (HappyAbsSyn ) -> (LHsType RdrName)
happyOut111 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut111 #-}
happyIn112 :: (LHsType RdrName) -> (HappyAbsSyn )
happyIn112 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn112 #-}
happyOut112 :: (HappyAbsSyn ) -> (LHsType RdrName)
happyOut112 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut112 #-}
happyIn113 :: (Located [Located RdrName]) -> (HappyAbsSyn )
happyIn113 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn113 #-}
happyOut113 :: (HappyAbsSyn ) -> (Located [Located RdrName])
happyOut113 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut113 #-}
happyIn114 :: ((OrdList (LHsType RdrName))) -> (HappyAbsSyn )
happyIn114 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn114 #-}
happyOut114 :: (HappyAbsSyn ) -> ((OrdList (LHsType RdrName)))
happyOut114 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut114 #-}
happyIn115 :: (Located ([AddAnn],HsBang)) -> (HappyAbsSyn )
happyIn115 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn115 #-}
happyOut115 :: (HappyAbsSyn ) -> (Located ([AddAnn],HsBang))
happyOut115 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut115 #-}
happyIn116 :: (LHsType RdrName) -> (HappyAbsSyn )
happyIn116 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn116 #-}
happyOut116 :: (HappyAbsSyn ) -> (LHsType RdrName)
happyOut116 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut116 #-}
happyIn117 :: (LHsType RdrName) -> (HappyAbsSyn )
happyIn117 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn117 #-}
happyOut117 :: (HappyAbsSyn ) -> (LHsType RdrName)
happyOut117 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut117 #-}
happyIn118 :: (LHsContext RdrName) -> (HappyAbsSyn )
happyIn118 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn118 #-}
happyOut118 :: (HappyAbsSyn ) -> (LHsContext RdrName)
happyOut118 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut118 #-}
happyIn119 :: (LHsType RdrName) -> (HappyAbsSyn )
happyIn119 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn119 #-}
happyOut119 :: (HappyAbsSyn ) -> (LHsType RdrName)
happyOut119 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut119 #-}
happyIn120 :: (LHsType RdrName) -> (HappyAbsSyn )
happyIn120 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn120 #-}
happyOut120 :: (HappyAbsSyn ) -> (LHsType RdrName)
happyOut120 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut120 #-}
happyIn121 :: (LHsType RdrName) -> (HappyAbsSyn )
happyIn121 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn121 #-}
happyOut121 :: (HappyAbsSyn ) -> (LHsType RdrName)
happyOut121 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut121 #-}
happyIn122 :: (LHsType RdrName) -> (HappyAbsSyn )
happyIn122 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn122 #-}
happyOut122 :: (HappyAbsSyn ) -> (LHsType RdrName)
happyOut122 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut122 #-}
happyIn123 :: (LHsType RdrName) -> (HappyAbsSyn )
happyIn123 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn123 #-}
happyOut123 :: (HappyAbsSyn ) -> (LHsType RdrName)
happyOut123 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut123 #-}
happyIn124 :: ([LHsType RdrName]) -> (HappyAbsSyn )
happyIn124 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn124 #-}
happyOut124 :: (HappyAbsSyn ) -> ([LHsType RdrName])
happyOut124 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut124 #-}
happyIn125 :: ([LHsType RdrName]) -> (HappyAbsSyn )
happyIn125 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn125 #-}
happyOut125 :: (HappyAbsSyn ) -> ([LHsType RdrName])
happyOut125 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut125 #-}
happyIn126 :: ([LHsType RdrName]) -> (HappyAbsSyn )
happyIn126 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn126 #-}
happyOut126 :: (HappyAbsSyn ) -> ([LHsType RdrName])
happyOut126 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut126 #-}
happyIn127 :: ([LHsTyVarBndr RdrName]) -> (HappyAbsSyn )
happyIn127 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn127 #-}
happyOut127 :: (HappyAbsSyn ) -> ([LHsTyVarBndr RdrName])
happyOut127 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut127 #-}
happyIn128 :: (LHsTyVarBndr RdrName) -> (HappyAbsSyn )
happyIn128 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn128 #-}
happyOut128 :: (HappyAbsSyn ) -> (LHsTyVarBndr RdrName)
happyOut128 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut128 #-}
happyIn129 :: (Located [Located (FunDep RdrName)]) -> (HappyAbsSyn )
happyIn129 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn129 #-}
happyOut129 :: (HappyAbsSyn ) -> (Located [Located (FunDep RdrName)])
happyOut129 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut129 #-}
happyIn130 :: (Located [Located (FunDep RdrName)]) -> (HappyAbsSyn )
happyIn130 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn130 #-}
happyOut130 :: (HappyAbsSyn ) -> (Located [Located (FunDep RdrName)])
happyOut130 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut130 #-}
happyIn131 :: (Located (FunDep RdrName)) -> (HappyAbsSyn )
happyIn131 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn131 #-}
happyOut131 :: (HappyAbsSyn ) -> (Located (FunDep RdrName))
happyOut131 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut131 #-}
happyIn132 :: (Located [RdrName]) -> (HappyAbsSyn )
happyIn132 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn132 #-}
happyOut132 :: (HappyAbsSyn ) -> (Located [RdrName])
happyOut132 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut132 #-}
happyIn133 :: (LHsKind RdrName) -> (HappyAbsSyn )
happyIn133 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn133 #-}
happyOut133 :: (HappyAbsSyn ) -> (LHsKind RdrName)
happyOut133 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut133 #-}
happyIn134 :: (LHsKind RdrName) -> (HappyAbsSyn )
happyIn134 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn134 #-}
happyOut134 :: (HappyAbsSyn ) -> (LHsKind RdrName)
happyOut134 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut134 #-}
happyIn135 :: (LHsKind RdrName) -> (HappyAbsSyn )
happyIn135 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn135 #-}
happyOut135 :: (HappyAbsSyn ) -> (LHsKind RdrName)
happyOut135 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut135 #-}
happyIn136 :: (LHsKind RdrName) -> (HappyAbsSyn )
happyIn136 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn136 #-}
happyOut136 :: (HappyAbsSyn ) -> (LHsKind RdrName)
happyOut136 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut136 #-}
happyIn137 :: ([LHsKind RdrName]) -> (HappyAbsSyn )
happyIn137 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn137 #-}
happyOut137 :: (HappyAbsSyn ) -> ([LHsKind RdrName])
happyOut137 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut137 #-}
happyIn138 :: (Located ([AddAnn]
                          ,[LConDecl RdrName])) -> (HappyAbsSyn )
happyIn138 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn138 #-}
happyOut138 :: (HappyAbsSyn ) -> (Located ([AddAnn]
                          ,[LConDecl RdrName]))
happyOut138 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut138 #-}
happyIn139 :: (Located [LConDecl RdrName]) -> (HappyAbsSyn )
happyIn139 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn139 #-}
happyOut139 :: (HappyAbsSyn ) -> (Located [LConDecl RdrName])
happyOut139 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut139 #-}
happyIn140 :: (LConDecl RdrName) -> (HappyAbsSyn )
happyIn140 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn140 #-}
happyOut140 :: (HappyAbsSyn ) -> (LConDecl RdrName)
happyOut140 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut140 #-}
happyIn141 :: (Located ([AddAnn],[LConDecl RdrName])) -> (HappyAbsSyn )
happyIn141 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn141 #-}
happyOut141 :: (HappyAbsSyn ) -> (Located ([AddAnn],[LConDecl RdrName]))
happyOut141 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut141 #-}
happyIn142 :: (Located [LConDecl RdrName]) -> (HappyAbsSyn )
happyIn142 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn142 #-}
happyOut142 :: (HappyAbsSyn ) -> (Located [LConDecl RdrName])
happyOut142 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut142 #-}
happyIn143 :: (LConDecl RdrName) -> (HappyAbsSyn )
happyIn143 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn143 #-}
happyOut143 :: (HappyAbsSyn ) -> (LConDecl RdrName)
happyOut143 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut143 #-}
happyIn144 :: (Located ([AddAnn],[LHsTyVarBndr RdrName])) -> (HappyAbsSyn )
happyIn144 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn144 #-}
happyOut144 :: (HappyAbsSyn ) -> (Located ([AddAnn],[LHsTyVarBndr RdrName]))
happyOut144 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut144 #-}
happyIn145 :: (Located (Located RdrName, HsConDeclDetails RdrName)) -> (HappyAbsSyn )
happyIn145 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn145 #-}
happyOut145 :: (HappyAbsSyn ) -> (Located (Located RdrName, HsConDeclDetails RdrName))
happyOut145 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut145 #-}
happyIn146 :: ([LConDeclField RdrName]) -> (HappyAbsSyn )
happyIn146 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn146 #-}
happyOut146 :: (HappyAbsSyn ) -> ([LConDeclField RdrName])
happyOut146 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut146 #-}
happyIn147 :: ([LConDeclField RdrName]) -> (HappyAbsSyn )
happyIn147 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn147 #-}
happyOut147 :: (HappyAbsSyn ) -> ([LConDeclField RdrName])
happyOut147 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut147 #-}
happyIn148 :: (LConDeclField RdrName) -> (HappyAbsSyn )
happyIn148 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn148 #-}
happyOut148 :: (HappyAbsSyn ) -> (LConDeclField RdrName)
happyOut148 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut148 #-}
happyIn149 :: (Located (Maybe (Located [LHsType RdrName]))) -> (HappyAbsSyn )
happyIn149 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn149 #-}
happyOut149 :: (HappyAbsSyn ) -> (Located (Maybe (Located [LHsType RdrName])))
happyOut149 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut149 #-}
happyIn150 :: (LHsDecl RdrName) -> (HappyAbsSyn )
happyIn150 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn150 #-}
happyOut150 :: (HappyAbsSyn ) -> (LHsDecl RdrName)
happyOut150 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut150 #-}
happyIn151 :: (LDocDecl) -> (HappyAbsSyn )
happyIn151 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn151 #-}
happyOut151 :: (HappyAbsSyn ) -> (LDocDecl)
happyOut151 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut151 #-}
happyIn152 :: (Located (OrdList (LHsDecl RdrName))) -> (HappyAbsSyn )
happyIn152 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn152 #-}
happyOut152 :: (HappyAbsSyn ) -> (Located (OrdList (LHsDecl RdrName)))
happyOut152 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut152 #-}
happyIn153 :: (Located (OrdList (LHsDecl RdrName))) -> (HappyAbsSyn )
happyIn153 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn153 #-}
happyOut153 :: (HappyAbsSyn ) -> (Located (OrdList (LHsDecl RdrName)))
happyOut153 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut153 #-}
happyIn154 :: (Located ([AddAnn],GRHSs RdrName (LHsExpr RdrName))) -> (HappyAbsSyn )
happyIn154 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn154 #-}
happyOut154 :: (HappyAbsSyn ) -> (Located ([AddAnn],GRHSs RdrName (LHsExpr RdrName)))
happyOut154 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut154 #-}
happyIn155 :: (Located [LGRHS RdrName (LHsExpr RdrName)]) -> (HappyAbsSyn )
happyIn155 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn155 #-}
happyOut155 :: (HappyAbsSyn ) -> (Located [LGRHS RdrName (LHsExpr RdrName)])
happyOut155 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut155 #-}
happyIn156 :: (LGRHS RdrName (LHsExpr RdrName)) -> (HappyAbsSyn )
happyIn156 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn156 #-}
happyOut156 :: (HappyAbsSyn ) -> (LGRHS RdrName (LHsExpr RdrName))
happyOut156 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut156 #-}
happyIn157 :: (Located (OrdList (LHsDecl RdrName))) -> (HappyAbsSyn )
happyIn157 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn157 #-}
happyOut157 :: (HappyAbsSyn ) -> (Located (OrdList (LHsDecl RdrName)))
happyOut157 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut157 #-}
happyIn158 :: (([AddAnn],Maybe Activation)) -> (HappyAbsSyn )
happyIn158 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn158 #-}
happyOut158 :: (HappyAbsSyn ) -> (([AddAnn],Maybe Activation))
happyOut158 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut158 #-}
happyIn159 :: (([AddAnn],Activation)) -> (HappyAbsSyn )
happyIn159 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn159 #-}
happyOut159 :: (HappyAbsSyn ) -> (([AddAnn],Activation))
happyOut159 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut159 #-}
happyIn160 :: (Located (HsQuasiQuote RdrName)) -> (HappyAbsSyn )
happyIn160 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn160 #-}
happyOut160 :: (HappyAbsSyn ) -> (Located (HsQuasiQuote RdrName))
happyOut160 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut160 #-}
happyIn161 :: (LHsExpr RdrName) -> (HappyAbsSyn )
happyIn161 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn161 #-}
happyOut161 :: (HappyAbsSyn ) -> (LHsExpr RdrName)
happyOut161 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut161 #-}
happyIn162 :: (LHsExpr RdrName) -> (HappyAbsSyn )
happyIn162 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn162 #-}
happyOut162 :: (HappyAbsSyn ) -> (LHsExpr RdrName)
happyOut162 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut162 #-}
happyIn163 :: (LHsExpr RdrName) -> (HappyAbsSyn )
happyIn163 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn163 #-}
happyOut163 :: (HappyAbsSyn ) -> (LHsExpr RdrName)
happyOut163 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut163 #-}
happyIn164 :: (([Located a],Bool)) -> (HappyAbsSyn )
happyIn164 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn164 #-}
happyOut164 :: (HappyAbsSyn ) -> (([Located a],Bool))
happyOut164 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut164 #-}
happyIn165 :: (Located ([AddAnn],FastString)) -> (HappyAbsSyn )
happyIn165 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn165 #-}
happyOut165 :: (HappyAbsSyn ) -> (Located ([AddAnn],FastString))
happyOut165 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut165 #-}
happyIn166 :: (Located ([AddAnn],(FastString,(Int,Int),(Int,Int)))) -> (HappyAbsSyn )
happyIn166 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn166 #-}
happyOut166 :: (HappyAbsSyn ) -> (Located ([AddAnn],(FastString,(Int,Int),(Int,Int))))
happyOut166 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut166 #-}
happyIn167 :: (LHsExpr RdrName) -> (HappyAbsSyn )
happyIn167 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn167 #-}
happyOut167 :: (HappyAbsSyn ) -> (LHsExpr RdrName)
happyOut167 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut167 #-}
happyIn168 :: (LHsExpr RdrName) -> (HappyAbsSyn )
happyIn168 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn168 #-}
happyOut168 :: (HappyAbsSyn ) -> (LHsExpr RdrName)
happyOut168 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut168 #-}
happyIn169 :: (LHsExpr RdrName) -> (HappyAbsSyn )
happyIn169 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn169 #-}
happyOut169 :: (HappyAbsSyn ) -> (LHsExpr RdrName)
happyOut169 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut169 #-}
happyIn170 :: (LHsExpr RdrName) -> (HappyAbsSyn )
happyIn170 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn170 #-}
happyOut170 :: (HappyAbsSyn ) -> (LHsExpr RdrName)
happyOut170 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut170 #-}
happyIn171 :: (LHsExpr RdrName) -> (HappyAbsSyn )
happyIn171 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn171 #-}
happyOut171 :: (HappyAbsSyn ) -> (LHsExpr RdrName)
happyOut171 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut171 #-}
happyIn172 :: ([LHsCmdTop RdrName]) -> (HappyAbsSyn )
happyIn172 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn172 #-}
happyOut172 :: (HappyAbsSyn ) -> ([LHsCmdTop RdrName])
happyOut172 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut172 #-}
happyIn173 :: (LHsCmdTop RdrName) -> (HappyAbsSyn )
happyIn173 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn173 #-}
happyOut173 :: (HappyAbsSyn ) -> (LHsCmdTop RdrName)
happyOut173 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut173 #-}
happyIn174 :: (([AddAnn],[LHsDecl RdrName])) -> (HappyAbsSyn )
happyIn174 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn174 #-}
happyOut174 :: (HappyAbsSyn ) -> (([AddAnn],[LHsDecl RdrName]))
happyOut174 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut174 #-}
happyIn175 :: ([LHsDecl RdrName]) -> (HappyAbsSyn )
happyIn175 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn175 #-}
happyOut175 :: (HappyAbsSyn ) -> ([LHsDecl RdrName])
happyOut175 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut175 #-}
happyIn176 :: (LHsExpr RdrName) -> (HappyAbsSyn )
happyIn176 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn176 #-}
happyOut176 :: (HappyAbsSyn ) -> (LHsExpr RdrName)
happyOut176 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut176 #-}
happyIn177 :: ([LHsTupArg RdrName]) -> (HappyAbsSyn )
happyIn177 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn177 #-}
happyOut177 :: (HappyAbsSyn ) -> ([LHsTupArg RdrName])
happyOut177 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut177 #-}
happyIn178 :: ((SrcSpan,[LHsTupArg RdrName])) -> (HappyAbsSyn )
happyIn178 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn178 #-}
happyOut178 :: (HappyAbsSyn ) -> ((SrcSpan,[LHsTupArg RdrName]))
happyOut178 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut178 #-}
happyIn179 :: ([LHsTupArg RdrName]) -> (HappyAbsSyn )
happyIn179 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn179 #-}
happyOut179 :: (HappyAbsSyn ) -> ([LHsTupArg RdrName])
happyOut179 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut179 #-}
happyIn180 :: (([AddAnn],HsExpr RdrName)) -> (HappyAbsSyn )
happyIn180 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn180 #-}
happyOut180 :: (HappyAbsSyn ) -> (([AddAnn],HsExpr RdrName))
happyOut180 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut180 #-}
happyIn181 :: (Located [LHsExpr RdrName]) -> (HappyAbsSyn )
happyIn181 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn181 #-}
happyOut181 :: (HappyAbsSyn ) -> (Located [LHsExpr RdrName])
happyOut181 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut181 #-}
happyIn182 :: (Located [LStmt RdrName (LHsExpr RdrName)]) -> (HappyAbsSyn )
happyIn182 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn182 #-}
happyOut182 :: (HappyAbsSyn ) -> (Located [LStmt RdrName (LHsExpr RdrName)])
happyOut182 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut182 #-}
happyIn183 :: (Located [[LStmt RdrName (LHsExpr RdrName)]]) -> (HappyAbsSyn )
happyIn183 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn183 #-}
happyOut183 :: (HappyAbsSyn ) -> (Located [[LStmt RdrName (LHsExpr RdrName)]])
happyOut183 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut183 #-}
happyIn184 :: (Located [LStmt RdrName (LHsExpr RdrName)]) -> (HappyAbsSyn )
happyIn184 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn184 #-}
happyOut184 :: (HappyAbsSyn ) -> (Located [LStmt RdrName (LHsExpr RdrName)])
happyOut184 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut184 #-}
happyIn185 :: (Located ([LStmt RdrName (LHsExpr RdrName)] -> Stmt RdrName (LHsExpr RdrName))) -> (HappyAbsSyn )
happyIn185 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn185 #-}
happyOut185 :: (HappyAbsSyn ) -> (Located ([LStmt RdrName (LHsExpr RdrName)] -> Stmt RdrName (LHsExpr RdrName)))
happyOut185 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut185 #-}
happyIn186 :: (([AddAnn],HsExpr RdrName)) -> (HappyAbsSyn )
happyIn186 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn186 #-}
happyOut186 :: (HappyAbsSyn ) -> (([AddAnn],HsExpr RdrName))
happyOut186 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut186 #-}
happyIn187 :: (Located [LStmt RdrName (LHsExpr RdrName)]) -> (HappyAbsSyn )
happyIn187 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn187 #-}
happyOut187 :: (HappyAbsSyn ) -> (Located [LStmt RdrName (LHsExpr RdrName)])
happyOut187 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut187 #-}
happyIn188 :: (Located [LStmt RdrName (LHsExpr RdrName)]) -> (HappyAbsSyn )
happyIn188 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn188 #-}
happyOut188 :: (HappyAbsSyn ) -> (Located [LStmt RdrName (LHsExpr RdrName)])
happyOut188 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut188 #-}
happyIn189 :: (Located ([AddAnn],[LMatch RdrName (LHsExpr RdrName)])) -> (HappyAbsSyn )
happyIn189 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn189 #-}
happyOut189 :: (HappyAbsSyn ) -> (Located ([AddAnn],[LMatch RdrName (LHsExpr RdrName)]))
happyOut189 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut189 #-}
happyIn190 :: (Located [LMatch RdrName (LHsExpr RdrName)]) -> (HappyAbsSyn )
happyIn190 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn190 #-}
happyOut190 :: (HappyAbsSyn ) -> (Located [LMatch RdrName (LHsExpr RdrName)])
happyOut190 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut190 #-}
happyIn191 :: (Located [LMatch RdrName (LHsExpr RdrName)]) -> (HappyAbsSyn )
happyIn191 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn191 #-}
happyOut191 :: (HappyAbsSyn ) -> (Located [LMatch RdrName (LHsExpr RdrName)])
happyOut191 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut191 #-}
happyIn192 :: (LMatch RdrName (LHsExpr RdrName)) -> (HappyAbsSyn )
happyIn192 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn192 #-}
happyOut192 :: (HappyAbsSyn ) -> (LMatch RdrName (LHsExpr RdrName))
happyOut192 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut192 #-}
happyIn193 :: (Located (GRHSs RdrName (LHsExpr RdrName))) -> (HappyAbsSyn )
happyIn193 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn193 #-}
happyOut193 :: (HappyAbsSyn ) -> (Located (GRHSs RdrName (LHsExpr RdrName)))
happyOut193 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut193 #-}
happyIn194 :: (Located [LGRHS RdrName (LHsExpr RdrName)]) -> (HappyAbsSyn )
happyIn194 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn194 #-}
happyOut194 :: (HappyAbsSyn ) -> (Located [LGRHS RdrName (LHsExpr RdrName)])
happyOut194 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut194 #-}
happyIn195 :: (Located [LGRHS RdrName (LHsExpr RdrName)]) -> (HappyAbsSyn )
happyIn195 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn195 #-}
happyOut195 :: (HappyAbsSyn ) -> (Located [LGRHS RdrName (LHsExpr RdrName)])
happyOut195 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut195 #-}
happyIn196 :: (Located [LGRHS RdrName (LHsExpr RdrName)]) -> (HappyAbsSyn )
happyIn196 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn196 #-}
happyOut196 :: (HappyAbsSyn ) -> (Located [LGRHS RdrName (LHsExpr RdrName)])
happyOut196 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut196 #-}
happyIn197 :: (Located ([AddAnn],[LGRHS RdrName (LHsExpr RdrName)])) -> (HappyAbsSyn )
happyIn197 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn197 #-}
happyOut197 :: (HappyAbsSyn ) -> (Located ([AddAnn],[LGRHS RdrName (LHsExpr RdrName)]))
happyOut197 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut197 #-}
happyIn198 :: (LGRHS RdrName (LHsExpr RdrName)) -> (HappyAbsSyn )
happyIn198 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn198 #-}
happyOut198 :: (HappyAbsSyn ) -> (LGRHS RdrName (LHsExpr RdrName))
happyOut198 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut198 #-}
happyIn199 :: (LPat RdrName) -> (HappyAbsSyn )
happyIn199 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn199 #-}
happyOut199 :: (HappyAbsSyn ) -> (LPat RdrName)
happyOut199 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut199 #-}
happyIn200 :: (LPat RdrName) -> (HappyAbsSyn )
happyIn200 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn200 #-}
happyOut200 :: (HappyAbsSyn ) -> (LPat RdrName)
happyOut200 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut200 #-}
happyIn201 :: (LPat RdrName) -> (HappyAbsSyn )
happyIn201 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn201 #-}
happyOut201 :: (HappyAbsSyn ) -> (LPat RdrName)
happyOut201 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut201 #-}
happyIn202 :: ([LPat RdrName]) -> (HappyAbsSyn )
happyIn202 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn202 #-}
happyOut202 :: (HappyAbsSyn ) -> ([LPat RdrName])
happyOut202 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut202 #-}
happyIn203 :: (Located ([AddAnn],[LStmt RdrName (LHsExpr RdrName)])) -> (HappyAbsSyn )
happyIn203 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn203 #-}
happyOut203 :: (HappyAbsSyn ) -> (Located ([AddAnn],[LStmt RdrName (LHsExpr RdrName)]))
happyOut203 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut203 #-}
happyIn204 :: (Located ([AddAnn],[LStmt RdrName (LHsExpr RdrName)])) -> (HappyAbsSyn )
happyIn204 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn204 #-}
happyOut204 :: (HappyAbsSyn ) -> (Located ([AddAnn],[LStmt RdrName (LHsExpr RdrName)]))
happyOut204 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut204 #-}
happyIn205 :: (Located ([AddAnn],[LStmt RdrName (LHsExpr RdrName)])) -> (HappyAbsSyn )
happyIn205 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn205 #-}
happyOut205 :: (HappyAbsSyn ) -> (Located ([AddAnn],[LStmt RdrName (LHsExpr RdrName)]))
happyOut205 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut205 #-}
happyIn206 :: (Maybe (LStmt RdrName (LHsExpr RdrName))) -> (HappyAbsSyn )
happyIn206 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn206 #-}
happyOut206 :: (HappyAbsSyn ) -> (Maybe (LStmt RdrName (LHsExpr RdrName)))
happyOut206 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut206 #-}
happyIn207 :: (LStmt RdrName (LHsExpr RdrName)) -> (HappyAbsSyn )
happyIn207 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn207 #-}
happyOut207 :: (HappyAbsSyn ) -> (LStmt RdrName (LHsExpr RdrName))
happyOut207 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut207 #-}
happyIn208 :: (LStmt RdrName (LHsExpr RdrName)) -> (HappyAbsSyn )
happyIn208 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn208 #-}
happyOut208 :: (HappyAbsSyn ) -> (LStmt RdrName (LHsExpr RdrName))
happyOut208 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut208 #-}
happyIn209 :: (([AddAnn],([LHsRecField RdrName (LHsExpr RdrName)], Bool))) -> (HappyAbsSyn )
happyIn209 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn209 #-}
happyOut209 :: (HappyAbsSyn ) -> (([AddAnn],([LHsRecField RdrName (LHsExpr RdrName)], Bool)))
happyOut209 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut209 #-}
happyIn210 :: (([AddAnn],([LHsRecField RdrName (LHsExpr RdrName)], Bool))) -> (HappyAbsSyn )
happyIn210 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn210 #-}
happyOut210 :: (HappyAbsSyn ) -> (([AddAnn],([LHsRecField RdrName (LHsExpr RdrName)], Bool)))
happyOut210 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut210 #-}
happyIn211 :: (LHsRecField RdrName (LHsExpr RdrName)) -> (HappyAbsSyn )
happyIn211 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn211 #-}
happyOut211 :: (HappyAbsSyn ) -> (LHsRecField RdrName (LHsExpr RdrName))
happyOut211 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut211 #-}
happyIn212 :: (Located [LIPBind RdrName]) -> (HappyAbsSyn )
happyIn212 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn212 #-}
happyOut212 :: (HappyAbsSyn ) -> (Located [LIPBind RdrName])
happyOut212 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut212 #-}
happyIn213 :: (LIPBind RdrName) -> (HappyAbsSyn )
happyIn213 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn213 #-}
happyOut213 :: (HappyAbsSyn ) -> (LIPBind RdrName)
happyOut213 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut213 #-}
happyIn214 :: (Located HsIPName) -> (HappyAbsSyn )
happyIn214 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn214 #-}
happyOut214 :: (HappyAbsSyn ) -> (Located HsIPName)
happyOut214 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut214 #-}
happyIn215 :: (([AddAnn],BooleanFormula (Located RdrName))) -> (HappyAbsSyn )
happyIn215 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn215 #-}
happyOut215 :: (HappyAbsSyn ) -> (([AddAnn],BooleanFormula (Located RdrName)))
happyOut215 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut215 #-}
happyIn216 :: (([AddAnn],BooleanFormula (Located RdrName))) -> (HappyAbsSyn )
happyIn216 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn216 #-}
happyOut216 :: (HappyAbsSyn ) -> (([AddAnn],BooleanFormula (Located RdrName)))
happyOut216 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut216 #-}
happyIn217 :: (([AddAnn],BooleanFormula (Located RdrName))) -> (HappyAbsSyn )
happyIn217 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn217 #-}
happyOut217 :: (HappyAbsSyn ) -> (([AddAnn],BooleanFormula (Located RdrName)))
happyOut217 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut217 #-}
happyIn218 :: (([AddAnn],BooleanFormula (Located RdrName))) -> (HappyAbsSyn )
happyIn218 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn218 #-}
happyOut218 :: (HappyAbsSyn ) -> (([AddAnn],BooleanFormula (Located RdrName)))
happyOut218 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut218 #-}
happyIn219 :: (Located [RdrName]) -> (HappyAbsSyn )
happyIn219 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn219 #-}
happyOut219 :: (HappyAbsSyn ) -> (Located [RdrName])
happyOut219 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut219 #-}
happyIn220 :: (Located RdrName) -> (HappyAbsSyn )
happyIn220 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn220 #-}
happyOut220 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut220 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut220 #-}
happyIn221 :: (Located RdrName) -> (HappyAbsSyn )
happyIn221 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn221 #-}
happyOut221 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut221 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut221 #-}
happyIn222 :: (Located RdrName) -> (HappyAbsSyn )
happyIn222 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn222 #-}
happyOut222 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut222 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut222 #-}
happyIn223 :: (Located [Located RdrName]) -> (HappyAbsSyn )
happyIn223 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn223 #-}
happyOut223 :: (HappyAbsSyn ) -> (Located [Located RdrName])
happyOut223 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut223 #-}
happyIn224 :: (Located DataCon) -> (HappyAbsSyn )
happyIn224 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn224 #-}
happyOut224 :: (HappyAbsSyn ) -> (Located DataCon)
happyOut224 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut224 #-}
happyIn225 :: (Located RdrName) -> (HappyAbsSyn )
happyIn225 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn225 #-}
happyOut225 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut225 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut225 #-}
happyIn226 :: (Located RdrName) -> (HappyAbsSyn )
happyIn226 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn226 #-}
happyOut226 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut226 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut226 #-}
happyIn227 :: (Located RdrName) -> (HappyAbsSyn )
happyIn227 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn227 #-}
happyOut227 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut227 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut227 #-}
happyIn228 :: (Located RdrName) -> (HappyAbsSyn )
happyIn228 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn228 #-}
happyOut228 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut228 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut228 #-}
happyIn229 :: (Located RdrName) -> (HappyAbsSyn )
happyIn229 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn229 #-}
happyOut229 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut229 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut229 #-}
happyIn230 :: (Located RdrName) -> (HappyAbsSyn )
happyIn230 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn230 #-}
happyOut230 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut230 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut230 #-}
happyIn231 :: (Located RdrName) -> (HappyAbsSyn )
happyIn231 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn231 #-}
happyOut231 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut231 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut231 #-}
happyIn232 :: (Located RdrName) -> (HappyAbsSyn )
happyIn232 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn232 #-}
happyOut232 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut232 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut232 #-}
happyIn233 :: (Located RdrName) -> (HappyAbsSyn )
happyIn233 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn233 #-}
happyOut233 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut233 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut233 #-}
happyIn234 :: (Located RdrName) -> (HappyAbsSyn )
happyIn234 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn234 #-}
happyOut234 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut234 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut234 #-}
happyIn235 :: (Located RdrName) -> (HappyAbsSyn )
happyIn235 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn235 #-}
happyOut235 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut235 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut235 #-}
happyIn236 :: (Located RdrName) -> (HappyAbsSyn )
happyIn236 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn236 #-}
happyOut236 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut236 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut236 #-}
happyIn237 :: (LHsExpr RdrName) -> (HappyAbsSyn )
happyIn237 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn237 #-}
happyOut237 :: (HappyAbsSyn ) -> (LHsExpr RdrName)
happyOut237 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut237 #-}
happyIn238 :: (LHsExpr RdrName) -> (HappyAbsSyn )
happyIn238 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn238 #-}
happyOut238 :: (HappyAbsSyn ) -> (LHsExpr RdrName)
happyOut238 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut238 #-}
happyIn239 :: (Located RdrName) -> (HappyAbsSyn )
happyIn239 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn239 #-}
happyOut239 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut239 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut239 #-}
happyIn240 :: (Located RdrName) -> (HappyAbsSyn )
happyIn240 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn240 #-}
happyOut240 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut240 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut240 #-}
happyIn241 :: (Located RdrName) -> (HappyAbsSyn )
happyIn241 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn241 #-}
happyOut241 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut241 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut241 #-}
happyIn242 :: (Located RdrName) -> (HappyAbsSyn )
happyIn242 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn242 #-}
happyOut242 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut242 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut242 #-}
happyIn243 :: (Located RdrName) -> (HappyAbsSyn )
happyIn243 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn243 #-}
happyOut243 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut243 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut243 #-}
happyIn244 :: (Located RdrName) -> (HappyAbsSyn )
happyIn244 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn244 #-}
happyOut244 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut244 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut244 #-}
happyIn245 :: (Located RdrName) -> (HappyAbsSyn )
happyIn245 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn245 #-}
happyOut245 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut245 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut245 #-}
happyIn246 :: (Located RdrName) -> (HappyAbsSyn )
happyIn246 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn246 #-}
happyOut246 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut246 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut246 #-}
happyIn247 :: (Located RdrName) -> (HappyAbsSyn )
happyIn247 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn247 #-}
happyOut247 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut247 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut247 #-}
happyIn248 :: (Located RdrName) -> (HappyAbsSyn )
happyIn248 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn248 #-}
happyOut248 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut248 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut248 #-}
happyIn249 :: (Located RdrName) -> (HappyAbsSyn )
happyIn249 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn249 #-}
happyOut249 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut249 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut249 #-}
happyIn250 :: (Located RdrName) -> (HappyAbsSyn )
happyIn250 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn250 #-}
happyOut250 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut250 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut250 #-}
happyIn251 :: (Located RdrName) -> (HappyAbsSyn )
happyIn251 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn251 #-}
happyOut251 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut251 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut251 #-}
happyIn252 :: (Located RdrName) -> (HappyAbsSyn )
happyIn252 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn252 #-}
happyOut252 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut252 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut252 #-}
happyIn253 :: (Located FastString) -> (HappyAbsSyn )
happyIn253 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn253 #-}
happyOut253 :: (HappyAbsSyn ) -> (Located FastString)
happyOut253 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut253 #-}
happyIn254 :: (Located FastString) -> (HappyAbsSyn )
happyIn254 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn254 #-}
happyOut254 :: (HappyAbsSyn ) -> (Located FastString)
happyOut254 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut254 #-}
happyIn255 :: (Located RdrName) -> (HappyAbsSyn )
happyIn255 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn255 #-}
happyOut255 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut255 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut255 #-}
happyIn256 :: (Located RdrName) -> (HappyAbsSyn )
happyIn256 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn256 #-}
happyOut256 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut256 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut256 #-}
happyIn257 :: (Located RdrName) -> (HappyAbsSyn )
happyIn257 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn257 #-}
happyOut257 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut257 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut257 #-}
happyIn258 :: (Located RdrName) -> (HappyAbsSyn )
happyIn258 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn258 #-}
happyOut258 :: (HappyAbsSyn ) -> (Located RdrName)
happyOut258 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut258 #-}
happyIn259 :: (Located HsLit) -> (HappyAbsSyn )
happyIn259 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn259 #-}
happyOut259 :: (HappyAbsSyn ) -> (Located HsLit)
happyOut259 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut259 #-}
happyIn260 :: (()) -> (HappyAbsSyn )
happyIn260 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn260 #-}
happyOut260 :: (HappyAbsSyn ) -> (())
happyOut260 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut260 #-}
happyIn261 :: (Located ModuleName) -> (HappyAbsSyn )
happyIn261 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn261 #-}
happyOut261 :: (HappyAbsSyn ) -> (Located ModuleName)
happyOut261 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut261 #-}
happyIn262 :: (([SrcSpan],Int)) -> (HappyAbsSyn )
happyIn262 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn262 #-}
happyOut262 :: (HappyAbsSyn ) -> (([SrcSpan],Int))
happyOut262 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut262 #-}
happyIn263 :: (LHsDocString) -> (HappyAbsSyn )
happyIn263 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn263 #-}
happyOut263 :: (HappyAbsSyn ) -> (LHsDocString)
happyOut263 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut263 #-}
happyIn264 :: (LHsDocString) -> (HappyAbsSyn )
happyIn264 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn264 #-}
happyOut264 :: (HappyAbsSyn ) -> (LHsDocString)
happyOut264 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut264 #-}
happyIn265 :: (Located (String, HsDocString)) -> (HappyAbsSyn )
happyIn265 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn265 #-}
happyOut265 :: (HappyAbsSyn ) -> (Located (String, HsDocString))
happyOut265 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut265 #-}
happyIn266 :: (Located (Int, HsDocString)) -> (HappyAbsSyn )
happyIn266 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn266 #-}
happyOut266 :: (HappyAbsSyn ) -> (Located (Int, HsDocString))
happyOut266 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut266 #-}
happyIn267 :: (Maybe LHsDocString) -> (HappyAbsSyn )
happyIn267 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn267 #-}
happyOut267 :: (HappyAbsSyn ) -> (Maybe LHsDocString)
happyOut267 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut267 #-}
happyIn268 :: (Maybe LHsDocString) -> (HappyAbsSyn )
happyIn268 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn268 #-}
happyOut268 :: (HappyAbsSyn ) -> (Maybe LHsDocString)
happyOut268 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut268 #-}
happyIn269 :: (Maybe LHsDocString) -> (HappyAbsSyn )
happyIn269 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyIn269 #-}
happyOut269 :: (HappyAbsSyn ) -> (Maybe LHsDocString)
happyOut269 x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOut269 #-}
happyInTok :: ((Located Token)) -> (HappyAbsSyn )
happyInTok x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyInTok #-}
happyOutTok :: (HappyAbsSyn ) -> ((Located Token))
happyOutTok x = Happy_GHC_Exts.unsafeCoerce# x
{-# INLINE happyOutTok #-}


happyActOffsets :: HappyAddr
happyActOffsets = HappyA# "\x2f\x2e\x24\x08\x72\x21\x98\x29\xaf\x07\x42\x32\x2f\x2e\x23\x08\x72\x21\x42\x32\x98\x29\xa1\x07\x98\x29\x00\x00\xb2\x07\x00\x00\x00\x00\x00\x00\x17\x1f\x00\x00\x42\x32\x42\x32\xd6\x34\x00\x00\xc3\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb3\x07\xcc\x07\x00\x00\xb0\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc4\x1f\x06\x05\x00\x00\xd6\x1c\x00\x00\x00\x00\x00\x00\xef\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd6\x34\x00\x00\x7c\x02\xd6\x34\xba\x07\x08\x00\xba\x07\x9b\x07\xaa\x00\x9a\x07\xfc\x4e\x48\x20\xd6\x34\x4a\x33\x6e\x28\x03\x29\x44\x27\xaf\x26\x5a\x35\x53\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x42\x32\x42\x32\xda\x45\xed\x04\x42\x32\x00\x00\x42\x32\x00\x00\x42\x32\x40\x4c\x00\x00\x00\x00\x7e\x07\xff\x07\x00\x00\x00\x00\x7d\x07\x7d\x07\x84\x1b\x00\x00\x1a\x26\x7d\x07\x00\x00\x00\x00\x00\x00\x24\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2e\x20\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x48\xe7\x07\xa2\x07\xf1\x07\x93\x04\x00\x00\xa6\x3c\x60\x00\xdc\x4e\x8a\x07\x84\x4e\x84\x4e\xec\x4d\x08\x4d\xe9\x07\x64\x4d\xd6\x34\x00\x00\x00\x00\x00\x00\x00\x00\x6a\x07\xc5\x07\xac\x07\xab\x07\x62\x07\x00\x00\xef\x00\xea\x04\xd6\x34\xf6\x07\xf6\x07\xf6\x07\xf6\x07\xf6\x07\xf6\x07\x00\x00\x00\x00\x57\x2b\x57\x2b\x00\x00\x0d\x00\x00\x00\x5b\x24\x5b\x24\x42\x32\xd8\x07\xaa\x07\xcc\x02\xa9\x07\xa8\x03\xb5\x08\xa4\x07\xb5\x08\xb5\x08\xd6\x34\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd6\x34\x7c\x07\x87\x07\x32\x0a\xad\x04\x0b\x01\x00\x00\x8b\x01\x7b\x07\xf0\x00\x00\x00\x8b\x01\xce\x00\x00\x00\x84\x07\x5e\x04\x15\x50\xb8\x00\xad\x02\x00\x00\xd6\x04\xd6\x04\xc2\x48\x99\x07\x4a\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x48\x00\x00\x00\x00\x00\x00\xc2\x48\x76\x02\x9c\x07\x97\x07\x00\x00\x43\x00\x2a\x3c\xae\x3b\x5a\x36\x42\x39\x80\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x42\x32\xda\x45\x96\x07\x95\x07\x94\x07\x93\x07\x93\x04\xda\x45\xc2\x48\x89\x07\x82\x07\x00\x00\xce\x37\xcc\x02\x00\x00\x42\x32\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5e\x45\x00\x00\x00\x00\x00\x00\x00\x00\xb3\x4b\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x48\x92\x07\x56\x07\x80\x07\x84\x1b\x8f\x03\x69\x07\x00\x00\x42\x32\x00\x00\x00\x00\x67\x07\x66\x07\x63\x07\x5e\x07\x85\x25\x4a\x33\x00\x00\x00\x00\xb3\x4b\xe2\x44\x42\x32\x42\x32\x42\x32\x42\x32\x02\x04\x00\x00\x00\x00\x00\x00\x55\x07\x5a\x07\xf9\x12\x3f\x04\x59\x07\x53\x07\x37\x07\x2f\x07\x72\x21\x72\x21\x29\x07\x60\x07\x00\x00\x61\x07\x6c\x50\xd5\x1a\x1d\x07\x00\x00\x00\x00\x74\x1a\x00\x00\x00\x00\x1c\x04\x3d\x07\x00\x00\x00\x00\xf0\x24\x00\x00\x3e\x07\xf9\xff\x3c\x07\x42\x07\xf5\xff\x41\x07\x36\x07\x00\x00\xd6\x34\x00\x00\x00\x00\xc6\x32\x00\x00\xc9\x04\xd6\x34\x58\x07\x00\x00\x4e\x07\x2e\x07\x00\x00\x8c\x4d\x1f\x07\x52\x07\x51\x07\x48\x07\x64\x4d\x00\x00\xf8\xff\x64\x4d\xe2\x44\x64\x4d\x00\x00\x40\x07\x39\x07\x00\x00\x94\x02\x1c\x07\x15\x00\x00\x00\x1c\x07\x00\x00\x83\x30\x38\x07\x00\x00\x5d\x01\x00\x00\xd6\x34\xe8\x4f\x30\x4d\x00\x00\x00\x00\x00\x00\x66\x44\x51\x06\x00\x00\x14\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x4f\x00\x00\x00\x00\x31\x07\x00\x00\xd6\x36\x35\x07\x6c\x50\x20\x07\x00\x00\x11\x07\x30\x07\x00\x00\x20\x00\x00\x00\xb6\x01\x00\x00\x00\x00\xe3\x00\x71\x00\x2c\x07\x09\x07\x00\x00\x00\x00\x00\x00\x0b\x07\x00\x00\x00\x00\x00\x00\x4b\x00\x00\x00\x2e\x1f\x42\x32\x46\x48\x2d\x07\x00\x00\x00\x00\x2b\x07\x27\x07\xf2\x06\x0a\x07\x21\x07\x42\x32\x00\x00\x00\x00\x18\x07\x04\x07\x02\x07\xfd\x06\x7b\x03\x64\x4e\x64\x4e\x00\x00\x00\x00\x00\x00\xc2\x2a\x40\x1c\xc6\x32\x16\x07\x03\x29\x00\x00\x42\x32\x9a\x2d\x03\x29\x00\x00\x42\x32\x9a\x2d\x03\x29\xf6\x06\xef\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd9\x27\x00\x00\x52\x34\xf4\x06\xf0\x06\x00\x00\x00\x00\xfb\x06\x6c\x50\x00\x00\x43\x3c\xc2\x48\xea\x43\x00\x00\x00\x00\xe4\x06\x00\x00\x0e\x00\xf5\x06\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x04\x00\x00\xeb\x06\x00\x00\x5f\x03\xe8\x06\xe2\x06\xe1\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x82\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd4\x06\xd2\x06\x00\x00\x00\x00\x00\x00\x00\x00\xec\x10\x00\x00\x00\x00\x42\x32\x03\x29\xf7\xff\xc2\x48\x03\x00\xd1\x06\x00\x00\xe9\x06\xde\x35\xf1\x06\x6c\x50\x00\x00\x00\x00\x22\x00\x00\x00\x42\x32\x83\x30\x00\x00\xc2\x48\x00\x00\xc2\x48\xea\x43\xc2\x48\x00\x00\x97\x0b\x0b\x4a\xc2\x48\x1e\x07\x00\x00\xec\x06\xb3\x06\xcb\x06\x00\x00\xea\x43\x00\x00\x00\x00\x00\x00\x00\x00\x05\x07\xca\x06\x00\x00\x00\x00\x32\x3b\x52\x37\xb5\x06\x00\x00\x15\x01\x00\x00\xc3\x06\x8b\x02\xb6\x06\x00\x00\x25\x00\x00\x00\xe8\x4f\xb9\x06\xb8\x06\x10\x00\x82\x01\xc2\x06\x00\x00\xc0\x06\xc2\x48\x6e\x43\x00\x00\xd8\x49\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xab\x49\x44\x50\x00\x00\x44\x50\xee\x2f\xee\x2f\xdc\x06\x00\x00\xdd\xff\x00\x00\x8f\x06\x00\x00\x88\x06\x00\x00\x00\x00\x0c\x4e\x0c\x4e\x00\x00\x00\x00\x0c\x4e\xca\x03\xce\x33\xbb\x06\xba\x06\xe8\x03\xb2\x06\x42\x32\xab\x03\x00\x00\x00\x00\x00\x00\xde\x06\x00\x00\x00\x00\xcf\x01\x00\x00\x00\x00\x81\x1e\x05\x2d\x36\x01\x00\x00\xa8\x06\x11\x02\x0d\x02\x0e\x00\x86\x06\x2d\x2a\x92\x06\x00\x00\x00\x00\x00\x00\x2d\x2a\x00\x00\x00\x00\x71\x06\x00\x00\x5b\x24\x42\x32\x00\x00\x00\x00\x74\x06\x00\x00\x00\x00\xb5\x08\xa2\x06\x00\x00\x00\x00\xb5\x08\x00\x00\x00\x00\xa1\x06\x00\x00\x00\x00\x00\x00\x5f\x02\x00\x00\x00\x00\xe5\x00\x85\x06\x42\x32\xc8\x4f\x00\x00\xcd\x06\xce\x33\x00\x00\x00\x00\x00\x00\x8b\x49\x00\x00\x9b\x06\x96\x06\x94\x06\x8e\x06\x94\x4f\x00\x00\x00\x00\xc2\x48\xf2\x42\xbd\x06\xa4\x4c\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x73\x06\x00\x00\x00\x00\xf2\x42\x00\x00\xa4\x4c\x00\x00\xf2\x42\x00\x00\x69\x06\x75\x06\x70\x06\x00\x00\x00\x00\xc6\x04\x00\x00\x00\x00\xf2\x42\x00\x00\x68\x06\x00\x00\x62\x38\x00\x00\x54\x04\x00\x00\xc2\x48\xc2\x48\xcd\x4c\x66\x06\x60\x06\xca\x47\x00\x00\x00\x00\x00\x00\x81\x06\xb1\x06\x00\x00\x00\x00\xb3\x03\x6f\x06\xc2\x48\xc2\x48\xc2\x48\x79\x06\x76\x42\xc2\x48\x0b\x4a\x76\x42\x00\x00\xaf\x06\xbe\x06\x7b\x06\x03\x00\x00\x00\x7a\x06\x00\x00\x00\x00\x00\x00\x5f\x06\x72\x01\x72\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x72\x21\x00\x00\x00\x00\x76\x06\x00\x00\xfa\x41\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x81\x02\x00\x00\x00\x00\x00\x00\x0e\x01\x00\x00\x00\x00\xad\x31\x00\x00\xaa\x01\x00\x00\x00\x00\x00\x00\x6c\x06\xc2\x48\x00\x00\x0e\x00\x54\x06\x00\x00\x6a\x06\x00\x00\x81\x2c\x5d\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x37\x06\x00\x00\xfa\x41\x00\x00\x56\x06\xfa\x41\x00\x00\x00\x00\x00\x00\x5e\x06\x00\x00\x60\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x98\x1e\x00\x00\x59\x2f\x18\x31\x00\x00\x00\x00\x00\x00\x7e\x41\x94\x4f\x03\x29\x30\x4d\x00\x00\x52\x06\xc2\x48\xc2\x48\xc2\x48\x7e\x41\xc2\x48\x0b\x4a\x7e\x41\x44\x06\x38\x06\x51\x06\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x48\xc2\x48\xca\x47\x00\x00\x25\x06\x25\x06\x00\x00\x7e\x41\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x39\x06\x00\x00\x3f\x06\xc2\x48\x26\x06\x4d\x06\x00\x00\x4c\x06\x3c\x06\x00\x00\x00\x00\x1c\x02\x02\x41\xc4\x2e\x00\x00\x00\x00\x02\x1e\x18\x31\x5c\x06\x8c\x05\xec\x2b\xec\x2b\x18\x31\x00\x00\x70\x4c\x00\x00\x49\x06\x41\x06\x6e\x06\x64\x03\x00\x00\x65\x06\x72\x06\xf1\x05\x00\x00\xd3\x01\x67\x06\xa9\x03\xc2\x48\xc2\x48\xb6\x3a\x86\x40\xa8\x00\x05\x00\xbe\x02\x0a\x40\x00\x00\x00\x00\x18\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc6\x23\xc6\x23\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x23\x31\x23\x00\x00\x8e\x3f\x09\x06\x07\x06\x13\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x4c\xe0\x4b\x0a\x06\xe6\x05\x8e\x3f\x00\x00\x00\x00\x00\x00\x5b\x02\x00\x00\x20\x06\x12\x3f\x00\x00\x00\x00\x00\x00\xb7\x01\x08\x06\x74\x4f\x00\x00\x44\x50\xe8\x1d\x00\x00\x00\x00\x03\x06\x00\x00\xe8\x05\x00\x00\x1a\x06\x00\x00\x19\x06\x48\x03\x00\x00\x00\x00\x00\x00\x00\x00\x12\x06\x00\x00\x59\x06\x00\x00\x00\x00\x00\x00\x00\x00\x18\x31\x10\x06\x00\x00\x00\x00\x5b\x24\x5b\x24\x00\x00\x12\x3f\x00\x00\x4e\x47\xd2\x46\xd4\x05\x00\x00\xd3\x05\x00\x00\x3f\x03\x00\x00\xf0\x05\x00\x00\x70\x4c\x00\x00\x00\x00\xeb\x05\x00\x00\x0e\x06\x00\x00\xe8\x00\x00\x00\x00\x00\xc2\x48\xa3\x01\x00\x00\x43\x3c\x00\x00\x00\x00\xe6\x00\x00\x00\x2c\x06\x18\x31\x96\x3e\x57\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x71\x01\x02\x01\x6d\x0a\x6d\x0a\x00\x00\x00\x00\x3a\x3a\xe4\xff\x00\x00\x30\x06\x00\x00\x42\x06\xe2\x05\x00\x00\x6f\x4a\x64\x03\x00\x00\x00\x00\x00\x00\xa5\x01\x00\x00\x00\x00\xdf\x05\x00\x00\x00\x00\x00\x00\x00\x00\x18\x31\x18\x31\x18\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x29\x06\xf2\x05\x00\x00\x18\x31\xc1\x05\x00\x00\x00\x00\x1a\x3e\xea\x05\x00\x00\x56\x46\xda\x01\x00\x00\x00\x00\x00\x00\x6c\x1d\x00\x00\xc2\x48\x00\x00\xed\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x06\x00\x00\x00\x00\xdd\x20\xdd\x20\x00\x00\x64\x03\xcf\x05\x00\x00\x48\x03\x53\x4b\xf8\x08\x64\x03\x00\x00\x00\x00\xc2\x48\x60\x0c\xe0\x05\xcb\x05\xcd\x05\x00\x00\x0e\x00\xc2\x05\xc0\x05\xdc\x05\xc8\x05\x7d\x11\xc5\x05\xbd\x05\x00\x00\x9c\x22\x00\x00\x66\x05\xc2\x48\xc2\x48\xbf\x1c\xc2\x48\x00\x00\x00\x00\x00\x00\x07\x22\x00\x00\x00\x00\xc2\x48\x00\x00\x00\x00\x00\x00\x00\x00\x70\x4c\x00\x00\x00\x00\x46\x00\x00\x00\x0e\x00\x48\x01\xba\x05\x00\x00\x1d\x00\x08\x01\x1a\x3e\x00\x00\x12\x00\x48\x03\x00\x00\x00\x00\x00\x00\xb1\x05\x64\x03\xaf\x05\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x48\x00\x00\x00\x00\xa8\x05\xab\x05\xfa\xff\x00\x00\xc4\x05\x9e\x3d\xc4\x05\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x05\x43\x00\x22\x3d\x7c\x02\x01\x04\x00\x00\x00\x00\x22\x3d\x88\x05\xa2\x05\xa9\x05\xc6\x38\x75\x05\x00\x00\x00\x00\x1a\x03\x00\x00\x00\x00\x00\x00\xf3\x4a\x97\x05\x0e\x00\x00\x00\x8e\x05\x00\x00\x9d\x05\x18\x31\x76\x05\x00\x00\x00\x00\x00\x00\xa1\x05\x00\x00\x00\x00\xdd\x20\x00\x00\x64\x03\xf0\x02\x00\x00\x8b\x05\x00\x00\x00\x00\xc2\x48\xc2\x48\x80\x05\xc2\x48\x00\x00\x5c\x05\x00\x00\x00\x00\x00\x00\x00\x00\x87\x05\x00\x00\x00\x00\x00\x00\xca\x05\xd8\x05\x00\x00\x70\x4c\x00\x00\x00\x00\x78\x05\x64\x03\x73\x05\x00\x00\x00\x00\x00\x00\xd1\x05\x8d\x05\x00\x00\xbe\x39\x51\x05\xc2\x48\xc2\x48\x00\x00\x00\x00\x20\x4b\x00\x00\x8f\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x3d\x00\x00\x00\x00\x00\x00\x00\x00"#

happyGotoOffsets :: HappyAddr
happyGotoOffsets = HappyA# "\x26\x11\xbc\x05\x39\x04\x14\x00\x02\x00\x26\x19\xe5\x10\xbb\x05\xbe\x03\x14\x19\x04\x00\x01\x00\xa0\x10\x00\x00\xae\x05\x00\x00\x00\x00\x00\x00\x43\x0b\x00\x00\xaf\x18\xa0\x18\x67\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3c\x18\x12\x05\x00\x00\x5f\x10\x00\x00\x00\x00\x00\x00\x50\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x37\x1b\x00\x00\x85\xff\x26\x1b\x1b\x05\x11\x05\x04\x05\x00\x00\x00\x00\x00\x00\x98\x08\x98\x01\xfe\x1a\xf3\x08\x2a\x0a\xc6\x09\xb4\x08\x1b\x09\xcf\x07\xdc\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x18\xc6\x0c\xc3\x45\x28\x05\x18\x18\x00\x00\xb4\x17\x00\x00\xa2\x17\xdf\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x43\x0b\x00\x00\x4d\x08\x00\x00\x00\x00\x00\x00\x00\x00\x91\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x82\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5f\x0c\x00\x00\x00\x00\x00\x00\x9b\x05\x00\x00\xa4\x48\x68\x05\x50\x00\x3b\x05\x98\x03\xa8\x01\xa7\x05\xd5\x03\x00\x00\x94\x03\xc4\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9c\x05\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x05\xf6\x04\xbf\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd9\x0f\x94\x0f\x00\x00\x00\x00\x00\x00\x7f\x06\x64\x06\x90\x17\x92\x05\x00\x00\xb3\x04\x00\x00\x96\x01\x85\x04\x00\x00\x62\x04\x14\x04\x86\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x81\x1a\xce\x04\x00\x00\x21\x04\xac\x04\x00\x00\x00\x00\x46\x05\x00\x00\x00\x00\x00\x00\x3e\x05\x00\x00\x00\x00\x01\x05\x00\x00\xd0\xff\x9b\x04\x53\x02\x00\x00\x30\x05\x2e\x05\x5c\x07\x00\x00\x4b\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x63\x09\x00\x00\x00\x00\x00\x00\x9c\x48\x88\x02\x00\x00\x00\x00\x00\x00\x8c\x01\xb3\x45\xcb\x44\xc1\x0e\xbd\x10\x3c\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x17\x45\x34\x00\x00\x00\x00\x00\x00\x00\x00\x5d\x05\x0b\x3d\x88\x48\x10\x05\x00\x00\x00\x00\x4b\x06\x52\x03\x00\x00\x38\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x12\x00\x00\x00\x00\x00\x00\x00\x00\x09\x03\x00\x00\x00\x00\x00\x00\x00\x00\x96\x0b\x4b\x05\x00\x00\x00\x00\x7a\x0a\x6d\xff\x00\x00\x00\x00\xfd\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x0a\xf3\x08\x00\x00\x00\x00\xaf\x02\x2b\x37\x1c\x17\xb8\x16\xa4\x16\x94\x16\x86\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x01\x83\x04\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x03\x3c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x99\x01\x5c\x02\x00\x00\x00\x00\x00\x00\x29\x02\xdb\x04\x00\x00\x6d\xff\x00\x00\x00\x00\x00\x00\xf3\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x1a\x00\x00\x00\x00\x9a\x19\x00\x00\xbf\x04\x20\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdd\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x5c\x03\x00\x00\x00\x00\x34\x03\x3d\x33\xa1\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd3\x04\x6b\xff\x00\x00\xcf\x04\x00\x00\x53\x0f\xde\x00\x00\x00\x00\x00\x00\x00\x0e\x1a\xcf\xff\xe0\x01\x00\x00\x00\x00\x00\x00\x8f\x3a\xe7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8a\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x00\x00\x60\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\x02\x00\x00\x00\x00\xae\x04\x8a\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x16\x1e\x16\x28\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x58\x0c\x27\x12\x00\x00\x00\x00\x00\x00\x2b\x0f\x82\x09\x56\x19\xc3\x04\xea\x0c\x00\x00\xa7\x15\x90\x0d\x85\x0c\x00\x00\x98\x15\x4e\x0d\x21\x0c\x00\x00\x5e\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8f\x0a\x00\x00\x9d\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3a\x01\x00\x00\xb8\x01\x1f\x48\xbb\x44\x00\x00\x00\x00\x00\x00\x00\x00\x37\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5c\x02\x00\x00\x00\x00\x38\x19\xbc\x0b\x00\x00\xcd\x0a\xe1\xff\x00\x00\x00\x00\x00\x00\xab\xff\x00\x00\x07\x01\x00\x00\x00\x00\xda\xff\x00\x00\x34\x15\xe5\x0e\x00\x00\xd9\x47\x00\x00\xbe\x47\xd3\x43\xb6\x48\x00\x00\x77\x01\x08\x22\x36\x47\xd4\x04\x33\x03\xd9\x04\x00\x00\x00\x00\x00\x00\x35\x32\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x04\x00\x00\x00\x00\x00\x00\xfb\x3c\x9f\x38\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x46\x02\x00\x00\xce\xff\x00\x00\x00\x00\xfe\x01\xb0\x03\xc0\x04\x00\x00\x00\x00\x0b\x3b\xc3\x43\x00\x00\x55\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x12\x02\x00\x00\xcd\xff\x19\x12\xae\x11\xb1\x04\x00\x00\x00\x00\x00\x00\x94\x04\x00\x00\x76\x04\x00\x00\x00\x00\xb0\x02\xaa\x04\x00\x00\x00\x00\x13\x02\x00\x00\xde\x19\x00\x00\x00\x00\x00\x00\x00\x00\x20\x15\x00\x00\x00\x00\x00\x00\x00\x00\xa2\x04\x00\x00\x00\x00\xd6\x03\x00\x00\x00\x00\x82\x00\x00\x00\xc5\x03\x00\x00\x00\x00\x00\x00\x00\x00\xbb\x03\xe2\x03\x9f\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x59\x0e\x00\x00\x00\x00\x69\x04\x00\x00\x0b\x08\x10\x15\x00\x00\x00\x00\x7d\x04\x00\x00\x00\x00\x0a\x04\x00\x00\x00\x00\x00\x00\xf0\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x0b\xe2\xff\x00\x00\x59\x04\x9f\x19\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x85\x02\x00\x00\x00\x00\xc8\x06\xdb\x42\x66\x04\x9a\x08\x00\x00\x48\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x3e\x00\x00\x95\x08\x00\x00\xeb\x3e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x38\x04\x00\x00\x00\x00\x03\x3e\x00\x00\x00\x00\x00\x00\x31\x01\x00\x00\x36\x04\x00\x00\xbb\x46\x3e\x46\x6a\x02\x00\x00\x00\x00\xc8\x06\x00\x00\x00\x00\x00\x00\x00\x00\x18\x04\x00\x00\x00\x00\x13\x04\x00\x00\xa5\x3e\xb5\x3c\x59\x38\x00\x00\x0f\x3c\x3e\x38\x73\x21\x1b\x3b\x00\x00\xd8\x03\xc8\x03\x00\x00\xe0\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3d\x04\xe0\x03\xcc\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x03\x00\x00\x00\x00\x00\x00\x00\x00\xcb\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x04\x00\x00\x29\x03\x00\x00\x00\x00\xba\x03\x00\x00\x18\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90\x18\x00\x00\x00\x00\x0c\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9a\x14\x00\x00\x93\x11\x88\x14\x00\x00\x00\x00\x00\x00\xa7\x39\x43\x02\x58\x0b\xac\x02\x00\x00\x00\x00\x3f\x35\x2e\x34\xb3\x33\xe3\x41\xa5\x1b\x2f\x1f\xd3\x41\x00\x00\x00\x00\xe6\x06\x00\x00\x00\x00\x00\x00\x00\x00\x26\x33\xab\x32\x2d\x04\x00\x00\x0c\x03\xcd\x02\x00\x00\xeb\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2c\x03\x00\x00\x00\x00\x6b\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb9\x03\x33\x36\x6b\x11\x00\x00\x00\x00\x23\x14\x14\x14\x00\x00\x00\x00\xf4\x0d\x1a\x10\xb0\x13\x00\x00\xda\x07\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00\x35\x03\x04\x03\x98\xff\x00\x00\xe1\x02\xfc\x02\x00\x00\x1b\x32\x5a\x2c\x2d\x04\xdb\x40\x80\x02\x7e\x02\x00\x00\x87\x0d\x00\x00\x00\x00\x9c\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe9\x05\x6e\x05\x00\x00\xf7\x02\x27\x03\x00\x00\x00\x00\xd8\x04\x5d\x04\x00\x00\xf3\x3d\x00\x00\x00\x00\xde\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x64\x04\xc6\x03\x00\x00\xee\x01\xf3\x3f\x00\x00\x00\x00\x00\x00\x22\x03\x00\x00\x00\x00\x97\x39\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\xff\x00\x00\x01\x02\x5c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x03\x00\x00\x00\x00\x00\x00\x00\x00\x8c\x13\x00\x00\x00\x00\x00\x00\x90\x07\x75\x07\x00\x00\x3b\x37\x00\x00\xd8\x06\xc7\x05\xbc\x01\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x47\x03\x00\x00\x00\x00\x00\x00\x00\x00\xce\x02\x00\x00\x04\x02\x00\x00\x00\x00\xf0\x08\x00\x00\x00\x00\x31\x01\x00\x00\x00\x00\xfb\x01\x00\x00\x69\x02\x6b\x0a\xd7\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7c\x09\x52\x08\x00\x00\x00\x00\x04\x14\x70\x01\x00\x00\x28\x02\x00\x00\xed\x01\x00\x00\x00\x00\xb2\x00\x37\x00\x00\x00\x00\x00\x00\x00\x1e\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x13\x16\x13\x04\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x02\x64\x01\x00\x00\x9f\x12\x00\x00\x00\x00\x00\x00\x88\x15\x00\x00\x00\x00\xc4\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x90\x12\x00\x00\x9d\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x01\xf6\x00\x00\x00\x2e\x00\xe2\x01\x00\x00\xae\x00\x17\x01\xab\x00\xf6\xff\x00\x00\x00\x00\xe8\x0d\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8f\x00\x00\x00\x00\x00\x00\x00\xfa\x06\x00\x00\xc5\x00\xb5\x05\xb8\x1b\x5c\x02\xf8\x12\x00\x00\x00\x00\x00\x00\x53\x05\x00\x00\x00\x00\xbd\x09\x00\x00\x00\x00\x00\x00\x00\x00\x7b\x02\x00\x00\x00\x00\xcc\x00\x00\x00\xb4\x00\x00\x00\x00\x00\x00\x00\x2f\x00\x00\x00\xe3\x3f\x00\x00\xba\x02\x68\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3a\x05\x00\x00\x00\x00\x00\x00\x00\x00\xd9\xff\x00\x00\xaf\x00\xf6\x0f\x94\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5c\x01\x3a\x35\xe1\x00\xc4\x03\x00\x00\x00\x00\x82\x10\x9a\x01\x00\x00\x00\x00\xb9\x01\x5f\x01\x00\x00\x00\x00\x56\x03\x00\x00\x00\x00\x00\x00\xb7\x00\x00\x00\x94\xff\x00\x00\x00\x00\x00\x00\x00\x00\x2c\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x02\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x11\x1f\x0f\xa3\xff\x8f\x0d\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\xff\xc9\xff\x00\x00\x45\x02\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc6\xff\x00\x00\x00\x00\xb9\x01\x4c\x01\x2d\x04\x2d\x04\x00\x00\x00\x00\xc6\x00\x00\x00\xb2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x79\x19\x00\x00\x00\x00\x00\x00\x00\x00"#

happyDefActions :: HappyAddr
happyDefActions = HappyA# "\x00\x00\x00\x00\x00\x00\x00\x00\xe9\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe9\xff\x00\x00\x2d\xfe\xaa\xff\x6a\xfe\xf3\xff\x18\xfe\x00\x00\x58\xfe\x00\x00\x00\x00\x49\xfe\x34\xfe\x31\xfe\x2f\xfe\x22\xfe\x2e\xfe\xbe\xff\xa0\xfd\x00\x00\xbf\xff\x61\xfd\x5e\xfd\x5a\xfd\xa2\xfd\x3b\xfd\x2c\xfe\x23\xfe\x4a\xfd\x00\x00\x00\x00\x48\xfd\x00\x00\xa8\xff\xa7\xff\xa6\xff\x00\x00\x49\xfd\x56\xfd\x47\xfd\x46\xfd\x45\xfd\x58\xfd\x57\xfd\x59\xfd\x00\x00\x55\xfd\x54\xfd\x44\xfd\x43\xfd\x42\xfd\x41\xfd\x40\xfd\x00\x00\x3f\xfd\x00\x00\x00\x00\x64\xfe\x64\xfe\x64\xfe\x00\x00\x00\x00\x00\x00\xad\xfd\x00\x00\x00\x00\x00\x00\x00\x00\xed\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x5b\xfd\x38\xfd\x5d\xfd\x3a\xfd\x5c\xfd\x39\xfd\xaf\xfd\x33\xfd\x32\xfd\x2b\xfe\x2a\xfe\x2f\xfd\x2e\xfd\x31\xfd\x30\xfd\x2d\xfd\x2c\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\xfe\x00\x00\x14\xfe\x00\x00\x00\x00\x60\xfe\x5f\xfe\x00\x00\x00\x00\xea\xff\x21\xfd\x00\x00\x00\x00\x59\xfe\x5e\xfd\x00\x00\x00\x00\xa0\xff\x9f\xff\x9e\xff\x61\xff\x9d\xff\x9c\xff\x76\xfe\x8f\xff\x75\xfe\x7e\xfe\x8e\xff\x79\xfe\x8d\xff\x7d\xfe\x7c\xfe\x7b\xfe\x7a\xfe\x00\x00\x69\xff\x00\x00\x00\x00\x7e\xff\x68\xff\x00\x00\x00\x00\x00\x00\x27\xff\x12\xff\x17\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\xfd\x24\xfd\x23\xfd\x22\xfd\x00\x00\xb7\xff\xbc\xfd\x00\x00\x00\x00\xbf\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcd\xfd\xbe\xfd\xc4\xfd\xc4\xfd\x2f\xff\x00\x00\x44\xfe\x32\xff\x32\xff\x00\x00\xb5\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa3\xfd\x9d\xfd\xa4\xfd\x63\xfd\x9f\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\xff\x00\x00\xa6\xfd\x00\x00\x13\xff\x00\x00\x00\x00\x28\xff\x25\xff\x00\x00\x53\xff\x00\x00\x00\x00\x9a\xff\x00\x00\x00\x00\x00\x00\x00\x00\xe3\xfe\xd0\xfe\xc3\xfe\xcf\xfe\x8e\xfd\x87\xfd\x80\xfd\xce\xfe\x6b\xfd\x67\xfd\xb9\xfe\x00\x00\x65\xfd\x64\xfd\x66\xfd\x00\x00\x00\x00\x00\x00\x00\x00\xf2\xfe\x1d\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x68\xfd\x7f\xfd\x82\xfd\x81\xfd\xba\xfe\xbb\xfe\xc1\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7e\xff\xb4\xfe\x00\x00\xad\xfe\x00\x00\x64\xff\xe3\xfe\x00\x00\x72\xfd\x00\x00\x73\xfd\x6f\xfd\x52\xfd\x53\xfd\x4e\xfd\x4b\xfd\x93\xfd\x37\xfd\x34\xfd\x00\x00\x4d\xfd\x3e\xfd\x3c\xfd\x3d\xfd\x00\x00\x4c\xfd\x35\xfd\x4f\xfd\x36\xfd\x00\x00\x61\xff\x00\x00\x0b\xfe\x59\xfe\x00\x00\x00\x00\x70\xfd\x00\x00\x71\xfd\x6d\xfd\x50\xfd\x00\x00\x51\xfd\x93\xfd\x00\x00\x4d\xfd\x9a\xfd\x26\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\xfe\x91\xfd\x1f\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\xfe\x0d\xfe\x00\x00\x00\x00\xea\xfe\x00\x00\xb0\xfe\x00\x00\x00\x00\x20\xfe\x21\xfe\x00\x00\x11\xfe\xbf\xff\x00\x00\x00\x00\x50\xfd\x51\xfd\x00\x00\x98\xfd\x00\x00\xec\xfd\xeb\xfd\x00\x00\x01\xfe\x00\x00\x00\xfe\x96\xfd\x50\xfe\x32\xfe\xcc\xfd\xc9\xfd\x47\xfe\x00\x00\x00\x00\x00\x00\xae\xfd\xac\xfd\xaa\xfd\xa7\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x63\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x35\xfe\x00\x00\x00\x00\x4e\xfe\x00\x00\x3a\xfe\x00\x00\x52\xfe\x3a\xfe\x3f\xfe\x00\x00\x00\x00\x4f\xfe\x00\x00\x3c\xfe\x00\x00\x00\x00\xb9\xfd\x36\xfe\x4c\xfe\x4d\xfe\x00\x00\x00\x00\xa9\xff\x6b\xfe\x76\xfd\xa4\xff\x77\xfd\x75\xfd\x95\xfd\x00\x00\x6d\xfe\xf7\xfe\x00\x00\xe6\xfe\xdc\xfe\x00\x00\xb0\xfe\x00\x00\xba\xfd\xb7\xfd\xb4\xfd\xb6\xfd\x00\x00\xf5\xfe\x00\x00\x33\xfe\x3d\xfe\x00\x00\x00\x00\x00\x00\xe7\xfd\xe5\xfd\xd4\xfd\x3b\xfe\x3a\xfe\xd2\xfd\x2a\xfd\x2b\xfd\x00\x00\x45\xfe\x00\x00\x00\x00\x00\x00\x00\x00\xb8\xfe\xf8\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x39\xfe\x38\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x65\xfe\xcb\xfd\x54\xfe\x00\x00\x00\x00\xc9\xfd\xfa\xfe\x00\x00\x25\xfe\xff\xfd\x00\x00\x00\x00\x24\xfe\x00\x00\x00\x00\x00\x00\x60\xfd\x03\xfe\x06\xfe\x97\xfd\x27\xfd\x26\xfe\x07\xfe\x02\xfe\x27\xfe\x00\x00\x00\x00\x00\x00\x1d\xfe\x1a\xfe\x00\x00\xb0\xfe\xaf\xfe\x00\x00\x00\x00\x00\x00\x1b\xfe\x0c\xfe\xdd\xff\xa1\xff\x00\x00\x00\x00\x19\xfe\x1c\xfe\x15\xfe\x13\xfe\x00\x00\x8f\xfd\x00\x00\x7c\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x78\xfd\x79\xfd\x90\xfd\x7a\xfd\x7b\xfd\x7d\xfd\x7e\xfd\x89\xfd\x8a\xfd\xe5\xff\x29\xfd\x28\xfd\x5a\xfe\x5b\xfe\x5c\xfe\x5d\xfe\x5e\xfe\x00\x00\x00\x00\x99\xfd\xa1\xfd\x60\xfd\x5f\xfd\x09\xfe\x28\xfe\x29\xfe\x0a\xfe\x00\x00\x00\x00\x00\x00\x67\xff\x00\x00\xfb\xfe\x00\x00\xdc\xfe\x00\x00\xb0\xfe\x57\xfe\x77\xfe\x2b\xff\x6f\xfe\x00\x00\x00\x00\xd1\xfe\x00\x00\x84\xfd\x00\x00\x00\x00\x00\x00\x69\xfd\x00\x00\x00\x00\x00\x00\x40\xff\xa8\xfe\x67\xff\xb3\xfe\x00\x00\xb5\xfe\x00\x00\x7f\xff\x80\xff\x82\xff\x81\xff\x36\xff\x00\x00\xc0\xfe\xbd\xfe\x00\x00\x00\x00\x00\x00\xc9\xfe\x00\x00\xcb\xfe\x00\x00\x00\x00\x00\x00\x86\xfe\x84\xfe\x1e\xfd\x00\x00\xf0\xfe\xf1\xfe\x5e\xff\x00\x00\x67\xff\x85\xff\x00\x00\x00\x00\x00\x00\xcd\xfe\x00\x00\x06\xff\x05\xff\x04\xff\x03\xff\x02\xff\x00\x00\x00\x00\x55\xff\x53\xff\x00\x00\x00\x00\x1f\xff\x24\xff\x00\x00\x97\xff\x29\xff\x11\xff\x00\x00\x10\xff\x99\xff\x14\xff\x00\x00\x16\xff\x98\xff\x19\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x95\xff\x78\xfe\xb8\xff\xb1\xff\xb6\xff\xbd\xfd\x00\x00\x74\xfe\x33\xff\xfc\xfe\x73\xfe\x00\x00\xb1\xfd\x2e\xfe\x00\x00\x00\x00\x00\x00\xc2\xfd\xc4\xfd\x00\x00\xc8\xfd\xc5\xfd\xc6\xfd\xc4\xfd\xc7\xfd\x2e\xff\xb2\xfd\x31\xff\x34\xff\x00\x00\x2d\xff\x30\xff\xb3\xff\xb2\xff\x93\xff\x00\x00\x00\x00\x90\xff\x94\xff\x00\x00\x0c\xff\x0a\xff\x00\x00\x1a\xff\xa5\xfd\x15\xff\x00\x00\x0d\xff\x2a\xff\x00\x00\x00\x00\x00\x00\x00\x00\xd0\xfd\x57\xff\x00\x00\x58\xff\x52\xff\x54\xff\x00\x00\x08\xff\x00\x00\x00\xff\xff\xfe\x01\xff\x00\x00\x07\xff\x8b\xff\xdf\xfe\x00\x00\x7d\xff\x00\x00\x5f\xff\x5d\xff\x5c\xff\x59\xff\x5a\xff\xef\xfe\xee\xfe\x00\x00\x00\x00\xcc\xfe\xc7\xfe\x00\x00\xc6\xfe\x00\x00\xc5\xfe\x00\x00\xc8\xfe\x00\x00\xf2\xfe\x00\x00\xc2\xfe\x86\xff\x00\x00\x60\xff\x9b\xff\x00\x00\x87\xff\xac\xfe\xaa\xfe\x00\x00\x8c\xff\x00\x00\x65\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\xfe\xe0\xfe\xe1\xfe\xe2\xfe\x00\x00\x2b\xff\x71\xfe\x70\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdb\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x6e\xfd\x96\xfe\x82\xfe\x00\x00\x67\xff\x62\xff\x00\x00\x08\xfe\x92\xfd\x6c\xfd\xd5\xff\x00\x00\x00\x00\x88\xfd\x85\xfd\x8b\xfd\x8d\xfd\x86\xfd\x8c\xfd\x0f\xfe\x0e\xfe\xa2\xff\xec\xfe\xeb\xfe\x00\x00\xb1\xfe\x00\x00\x10\xfe\x12\xfe\x17\xfe\x05\xfe\x04\xfe\x0b\xfe\xf9\xfd\xe8\xfd\xf8\xfd\xf6\xfd\xf3\xfd\xf2\xfd\x00\x00\xea\xfd\x0b\xfe\xfb\xfd\xfd\xfd\xfa\xfd\x00\x00\x00\x00\xca\xfd\x00\x00\xe0\xfd\xdc\xfd\xfc\xfe\xe1\xfd\x00\x00\x00\x00\xe2\xfd\xab\xfd\xa9\xfd\x9e\xfd\x62\xfd\xa8\xfd\x00\x00\x4a\xfe\x00\x00\x62\xfe\x00\x00\x00\x00\x66\xfe\x69\xfe\x4f\xff\x00\x00\x4b\xff\xb0\xfe\x4b\xfe\x55\xfe\x46\xfe\x40\xfe\x00\x00\xd5\xfd\x00\x00\x00\x00\xd3\xfd\x51\xfe\x3e\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x30\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa5\xff\x94\xfd\x74\xfd\xe8\xfe\x00\x00\x00\x00\xd4\xfe\xd6\xfe\xd8\xfe\xda\xfe\xe7\xfe\x00\x00\xb8\xfd\xb5\xfd\xf6\xfe\x6c\xfe\xd1\xfd\xe6\xfd\x3a\xfe\x41\xfe\x00\x00\x00\x00\xf4\xfe\x00\x00\x61\xfe\x00\x00\x00\x00\xe4\xfd\xdf\xfd\x00\x00\x00\x00\xdd\xfd\xe3\xfd\xf9\xfe\x00\x00\xfe\xfd\xf1\xfd\x3f\xfd\x00\x00\x00\x00\x00\x00\xed\xfe\x00\x00\xa3\xff\x00\x00\x00\x00\x00\x00\xce\xff\x63\xff\x96\xfe\x82\xfe\x1d\xfd\x89\xff\x00\x00\x82\xfe\x00\x00\x00\x00\x00\x00\xd4\xfe\x00\x00\xd8\xfe\xda\xfe\xe7\xfe\x00\x00\x2c\xff\x72\xfe\x00\x00\x6a\xfd\x83\xfd\xdd\xfe\xde\xfe\x41\xff\x44\xff\x44\xff\xa7\xfe\xa8\xfe\xa8\xfe\xb2\xfe\x37\xff\x3a\xff\x3a\xff\xbe\xfe\x00\x00\x00\x00\x00\x00\xa6\xfe\xa4\xfe\xa0\xfe\x9e\xfe\x9f\xfe\xa2\xfe\x00\x00\x00\x00\x00\x00\x1f\xfd\x00\x00\x5b\xff\x66\xff\x8a\xff\x00\x00\x74\xff\x00\x00\x00\x00\x09\xff\xcf\xfd\x56\xff\x00\x00\x00\x00\x1e\xff\x1c\xff\x00\x00\x00\x00\x23\xff\x21\xff\x00\x00\x0f\xff\x00\x00\x0b\xff\x00\x00\x96\xff\x00\x00\x00\x00\xb4\xff\xb0\xfd\x35\xff\xb3\xfd\x00\x00\xc3\xfd\xaf\xff\x91\xff\x92\xff\x0e\xff\x22\xff\x00\x00\x00\x00\x1d\xff\x20\xff\x32\xff\x32\xff\xfd\xfe\x00\x00\x7c\xff\x00\x00\x00\x00\x1f\xfd\x20\xfd\x1d\xfd\xbc\xfe\x00\x00\x9d\xfe\x00\x00\xa3\xfe\x00\x00\xc4\xfe\xca\xfe\x00\x00\x3f\xff\x61\xff\x3b\xff\x00\x00\x3e\xff\x69\xff\x00\x00\x00\x00\xab\xfe\xa9\xfe\x4a\xff\x45\xff\x00\x00\x49\xff\x6e\xff\x00\x00\x00\x00\x00\x00\x6e\xfe\xe9\xfe\xd9\xfe\xd7\xfe\xd5\xfe\xd2\xfe\xd3\xfe\x93\xfe\x93\xfe\x88\xff\x81\xfe\x00\x00\x90\xfe\x8e\xfe\x8a\xfe\x84\xff\x82\xfe\x00\x00\xd3\xff\xd0\xff\xce\xff\xcb\xff\xcc\xff\xcd\xff\x00\x00\xe7\xff\xe6\xff\x00\x00\xe9\xfd\xf5\xfd\xf4\xfd\xf7\xfd\x00\x00\x00\x00\x00\x00\xfc\xfd\x56\xfe\x48\xfe\xde\xfd\xdb\xfd\x2b\xff\xd8\xfd\xd6\xfd\x00\x00\x00\x00\x67\xfe\x68\xfe\x00\x00\x00\x00\x4c\xff\x00\x00\x00\x00\xd2\xfe\xd3\xfe\x42\xfe\x00\x00\x4e\xff\x00\x00\xf3\xfe\x00\x00\xd9\xfd\xd7\xfd\xda\xfd\xf0\xfd\xef\xfd\x00\x00\xae\xfe\xf2\xff\xba\xff\xba\xff\xcf\xff\xce\xff\xc7\xff\xc1\xff\x00\x00\x00\x00\x00\x00\xce\xff\xd6\xff\x83\xff\x00\x00\xb0\xfe\x00\x00\xb7\xfe\x00\x00\x80\xfe\x00\x00\x94\xfe\x9c\xfd\x00\x00\x00\x00\x00\x00\x38\xfd\x00\x00\x43\xff\x46\xff\x70\xff\x67\xff\x00\x00\x00\x00\x00\x00\x00\x00\x6d\xff\x42\xff\x39\xff\x3c\xff\x6c\xff\x38\xff\x00\x00\xbf\xfe\xa5\xfe\x9b\xfe\xa1\xfe\x00\x00\x85\xfe\x83\xfe\x00\x00\x75\xff\x00\x00\x00\x00\x00\x00\xfe\xfe\x00\x00\x00\x00\x00\x00\x26\xff\xad\xff\x00\x00\xb0\xff\xb9\xff\xae\xff\x00\x00\xce\xff\x00\x00\x51\xff\x50\xff\x79\xff\x7b\xff\x76\xff\x78\xff\x7a\xff\x9a\xfe\x00\x00\x67\xff\x3d\xff\x67\xff\x00\x00\x67\xff\x6f\xff\x72\xff\x47\xff\x98\xfe\x35\xfd\x1d\xfd\x00\x00\x00\x00\x93\xfe\x97\xfe\x7f\xfe\x00\x00\x1f\xfd\x00\x00\x00\x00\x89\xfe\x1f\xfd\xd4\xff\xc8\xff\x00\x00\xc0\xff\xc9\xff\xca\xff\x00\x00\xd1\xff\x00\x00\xde\xff\xe0\xff\xbb\xff\x00\x00\x00\x00\x00\x00\x4d\xff\x53\xfe\x43\xfe\x00\x00\xee\xfd\xe4\xff\xbc\xff\xe3\xff\xce\xff\x00\x00\xc2\xff\x00\x00\xc5\xff\x8c\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x8b\xfe\x1d\xfd\xb6\xfe\x95\xfe\x9b\xfd\x92\xfe\x00\x00\x71\xff\x48\xff\x73\xff\x96\xfe\x82\xfe\x9c\xfe\x00\x00\x77\xff\x1b\xff\x00\x00\xce\xff\x00\x00\xac\xff\x99\xfe\x6b\xff\x82\xfe\x00\x00\x8f\xfe\x89\xfe\x1f\xfd\xe5\xfe\x88\xfe\xc6\xff\xc4\xff\x00\x00\xd2\xff\xd0\xff\xdf\xff\xbd\xff\x37\xfe\xc3\xff\x8d\xfe\x00\x00\x6a\xff\xab\xff\x91\xfe"#

happyCheck :: HappyAddr
happyCheck = HappyA# "\xff\xff\xa3\x00\x01\x00\x01\x00\x00\x00\x04\x00\x04\x00\x11\x00\x12\x00\x3c\x00\x23\x00\x32\x00\x3c\x00\x00\x00\x00\x00\x64\x00\xa3\x00\x01\x00\x32\x00\x32\x00\x00\x00\x00\x00\x6b\x00\x7f\x00\x80\x00\x11\x00\x0d\x00\x17\x00\x0a\x00\x00\x00\x0f\x00\x10\x00\x11\x00\x12\x00\xb7\x00\x51\x00\x52\x00\x4b\x00\x22\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x17\x00\x10\x00\x11\x00\x12\x00\x52\x00\x62\x00\x62\x00\x4e\x00\x51\x00\x52\x00\x11\x00\x22\x00\x0f\x00\x10\x00\x11\x00\x12\x00\x19\x00\x91\x00\x48\x00\x47\x00\x11\x00\x12\x00\x48\x00\x3e\x00\x4e\x00\x4a\x00\x4b\x00\x00\x00\x4e\x00\x11\x00\x12\x00\x52\x00\x00\x00\x86\x00\x4a\x00\x4b\x00\x86\x00\x4b\x00\x4a\x00\x3e\x00\x4e\x00\xcf\x00\xf7\x00\xd1\x00\x7e\x00\x4b\x00\x7c\x00\x7b\x00\x4e\x00\x5d\x00\x50\x00\x7e\x00\x7e\x00\xf5\x00\x6c\x00\x17\x00\x4e\x00\xf7\x00\x6c\x00\x42\x00\x8d\x00\x84\x00\x61\x00\x4a\x00\x5e\x00\x0c\x00\x60\x00\x60\x00\x62\x00\x4e\x00\x64\x00\x7b\x00\x6c\x00\x7c\x00\x60\x00\xf1\x00\x65\x00\x6b\x00\x6c\x00\x5c\x00\x5d\x00\x1c\x00\x60\x00\x84\x00\x6f\x00\xd5\x00\xd6\x00\xd7\x00\xd8\x00\xd9\x00\xda\x00\xdb\x00\x84\x00\x6b\x00\xf5\x00\x85\x00\x3b\x00\x6c\x00\xe2\x00\xe3\x00\xe4\x00\xf8\x00\x6c\x00\x8e\x00\x80\x00\xf1\x00\x91\x00\xfe\x00\x93\x00\x94\x00\xee\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x5e\x00\x8e\x00\x96\x00\xf9\x00\x91\x00\x60\x00\x93\x00\x94\x00\x84\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x6b\x00\x5d\x00\xe5\x00\xe5\x00\xe8\x00\xe8\x00\xe8\x00\xe8\x00\xd2\x00\xe8\x00\xee\x00\xee\x00\xee\x00\xee\x00\x4e\x00\xee\x00\x70\x00\x71\x00\xdc\x00\xdd\x00\x13\x00\x32\x00\x84\x00\x16\x00\x17\x00\xe8\x00\xc7\x00\x15\x00\x16\x00\x17\x00\x5e\x00\xee\x00\xf8\x00\xce\x00\xec\x00\xed\x00\xd1\x00\xef\x00\xfe\x00\xf8\x00\xf8\x00\xf3\x00\xc7\x00\x16\x00\x17\x00\xfe\x00\xfe\x00\x5e\x00\x32\x00\xce\x00\x00\x00\xe5\x00\xd1\x00\x00\x00\xe8\x00\x00\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\xee\x00\xf8\x00\x00\x00\xfa\x00\xfb\x00\xee\x00\x4b\x00\xf0\x00\xf1\x00\x4e\x00\x32\x00\xf4\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\xfc\x00\xfc\x00\x09\x00\x0a\x00\x49\x00\xee\x00\xe5\x00\xf0\x00\xf1\x00\xe8\x00\xf8\x00\xf4\x00\xfa\x00\xfb\x00\xf8\x00\xee\x00\x17\x00\x18\x00\x19\x00\xf8\x00\xfe\x00\xfa\x00\xfb\x00\xf8\x00\x47\x00\xfa\x00\xfb\x00\x22\x00\x6f\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\xcf\x00\xf8\x00\xd1\x00\xfa\x00\xfb\x00\xf5\x00\x7b\x00\xf8\x00\x31\x00\xfa\x00\xfb\x00\x72\x00\x35\x00\x36\x00\x85\x00\x17\x00\xf8\x00\x3a\x00\xfa\x00\xfb\x00\xe2\x00\x3e\x00\xe4\x00\x00\x00\x47\x00\xe8\x00\x6b\x00\xe5\x00\x09\x00\x0a\x00\xe8\x00\xee\x00\xee\x00\x5d\x00\xf1\x00\x5f\x00\xee\x00\x84\x00\x85\x00\x60\x00\x62\x00\x60\x00\x17\x00\x18\x00\x19\x00\x5d\x00\x4b\x00\x5f\x00\x59\x00\x4e\x00\x6b\x00\x47\x00\x6b\x00\x22\x00\xd3\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x6b\x00\x4e\x00\x00\x00\xf6\x00\x4a\x00\xde\x00\x7c\x00\xe0\x00\x31\x00\x70\x00\x71\x00\x5e\x00\x35\x00\x36\x00\xda\x00\xdb\x00\xe9\x00\x3a\x00\xeb\x00\xec\x00\xed\x00\x3e\x00\xef\x00\x15\x00\x6b\x00\xf2\x00\xf3\x00\x6b\x00\x70\x00\x71\x00\xce\x00\x6c\x00\x66\x00\xd1\x00\x87\x00\x88\x00\x89\x00\xce\x00\x6c\x00\xf3\x00\xd1\x00\x8e\x00\xce\x00\xf7\x00\x91\x00\xd1\x00\x93\x00\x94\x00\x59\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xb5\x00\xce\x00\xb7\x00\x60\x00\xd1\x00\xe6\x00\xe7\x00\xe8\x00\xf0\x00\xf1\x00\xe6\x00\xe7\x00\xe8\x00\xee\x00\x6b\x00\xf0\x00\xf1\x00\xf6\x00\xee\x00\x5e\x00\xf0\x00\xf1\x00\xf5\x00\x70\x00\x71\x00\xe6\x00\xe7\x00\xe8\x00\x17\x00\xcf\x00\xd0\x00\xd1\x00\x6b\x00\xee\x00\x5e\x00\xf0\x00\xf1\x00\xf8\x00\x87\x00\x88\x00\x89\x00\x4b\x00\xc7\x00\xfe\x00\x4e\x00\x8e\x00\xf5\x00\x6b\x00\x91\x00\xce\x00\x93\x00\x94\x00\xd1\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x00\x00\x70\x00\x71\x00\xf1\x00\x61\x00\x52\x00\xf5\x00\xe2\x00\x55\x00\xe4\x00\x57\x00\x00\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\x83\x00\x84\x00\x85\x00\xee\x00\x09\x00\xee\x00\xce\x00\xf0\x00\xf1\x00\xd1\x00\xe2\x00\xf4\x00\xe4\x00\x61\x00\x7b\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x48\x00\x71\x00\x72\x00\xee\x00\x14\x00\x75\x00\x76\x00\xc7\x00\x50\x00\x53\x00\x54\x00\xe6\x00\xe7\x00\xe8\x00\xce\x00\x5e\x00\x5d\x00\xd1\x00\x5f\x00\xee\x00\x7b\x00\xf0\x00\xf1\x00\x70\x00\x71\x00\x55\x00\x56\x00\x57\x00\x6b\x00\x83\x00\x84\x00\x85\x00\x5c\x00\xe2\x00\x5d\x00\xe4\x00\x5f\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\xb7\x00\xe2\x00\x64\x00\xe4\x00\xee\x00\xee\x00\x0a\x00\xf0\x00\xf1\x00\x6b\x00\x07\x00\xf4\x00\x71\x00\xee\x00\x91\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x17\x00\x60\x00\x19\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x37\x00\x38\x00\x39\x00\x65\x00\x22\x00\x6b\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\xda\x00\xdb\x00\xe2\x00\x70\x00\xe4\x00\xf9\x00\x0a\x00\x74\x00\x31\x00\xfd\x00\x91\x00\x78\x00\x35\x00\x36\x00\xee\x00\xd8\x00\xd9\x00\x3a\x00\xba\x00\x17\x00\xf8\x00\x3e\x00\x78\x00\x79\x00\xf9\x00\x4b\x00\xfe\x00\xe4\x00\xfd\x00\xf7\x00\x22\x00\xc7\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\xee\x00\xce\x00\x54\x00\xf8\x00\xd1\x00\x4e\x00\x5e\x00\x50\x00\x31\x00\xfe\x00\x5e\x00\x59\x00\x35\x00\x36\x00\x86\x00\xcc\x00\xcd\x00\x3a\x00\xcf\x00\x6b\x00\xd1\x00\x3e\x00\xe2\x00\x6b\x00\xe4\x00\xe6\x00\xe7\x00\xe8\x00\xeb\x00\xec\x00\xed\x00\xf8\x00\xef\x00\xee\x00\xee\x00\xf0\x00\xf1\x00\xfe\x00\xd2\x00\xf4\x00\xe5\x00\xd5\x00\xd6\x00\xe8\x00\xd8\x00\xd9\x00\xf9\x00\x00\x00\x59\x00\xee\x00\xfd\x00\x2f\x00\xf1\x00\xe2\x00\xe2\x00\xe4\x00\xe4\x00\x87\x00\x88\x00\x89\x00\x0d\x00\xc2\x00\xc3\x00\xc4\x00\x8e\x00\xee\x00\xee\x00\x91\x00\x81\x00\x93\x00\x94\x00\xf3\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xf9\x00\xd8\x00\xd9\x00\x5d\x00\xfd\x00\x5f\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\xe2\x00\x62\x00\xe4\x00\x87\x00\x88\x00\x89\x00\xe6\x00\xe7\x00\xe8\x00\x48\x00\x8e\x00\x6c\x00\xee\x00\x91\x00\xee\x00\x93\x00\x94\x00\x50\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x1f\x00\x20\x00\x65\x00\xa0\x00\x61\x00\xc7\x00\xcc\x00\xcd\x00\x65\x00\xcf\x00\x67\x00\xd1\x00\xce\x00\x70\x00\xf9\x00\xd1\x00\xe8\x00\x74\x00\xfd\x00\x70\x00\x62\x00\x78\x00\xee\x00\xf5\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x49\x00\x6c\x00\xe5\x00\xf5\x00\xe8\x00\xe8\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\xee\x00\xee\x00\x34\x00\xc7\x00\xf1\x00\xee\x00\x56\x00\xf0\x00\xf1\x00\x4b\x00\xce\x00\xf4\x00\x4e\x00\xd1\x00\xf6\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x66\x00\xeb\x00\xec\x00\xed\x00\x4b\x00\xef\x00\x6c\x00\x4e\x00\xf2\x00\xf3\x00\xd8\x00\xd9\x00\x72\x00\xf7\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\x0a\x00\x1e\x00\xe2\x00\xe5\x00\xe4\x00\xee\x00\xe8\x00\xf0\x00\xf1\x00\x91\x00\xd3\x00\xf4\x00\xee\x00\x17\x00\xee\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x9b\x00\x9c\x00\xde\x00\x9e\x00\xe0\x00\x22\x00\xf8\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\xfe\x00\xe9\x00\xf3\x00\xeb\x00\xec\x00\xed\x00\xf7\x00\xef\x00\x31\x00\x2b\x00\xf2\x00\xf3\x00\x35\x00\x36\x00\xe8\x00\xd8\x00\xd9\x00\x3a\x00\x66\x00\x17\x00\xee\x00\x3e\x00\xf0\x00\xf1\x00\x6c\x00\xe2\x00\xd6\x00\xe4\x00\xd8\x00\xd9\x00\x22\x00\x49\x00\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\xee\x00\xe5\x00\xce\x00\x75\x00\xe8\x00\xd1\x00\xc3\x00\xc4\x00\x31\x00\xe8\x00\xee\x00\x59\x00\x35\x00\x36\x00\xf9\x00\xee\x00\xf9\x00\x3a\x00\xf1\x00\xcc\x00\xcd\x00\x3e\x00\xcf\x00\x66\x00\xd1\x00\x86\x00\xe6\x00\xe7\x00\xe8\x00\x6c\x00\xe6\x00\xe7\x00\xe8\x00\x86\x00\xee\x00\x72\x00\xf0\x00\xf1\x00\xee\x00\x76\x00\xf4\x00\xe6\x00\xe7\x00\xe8\x00\xe5\x00\xe7\x00\xe8\x00\xe8\x00\x59\x00\xee\x00\x74\x00\x75\x00\xee\x00\xee\x00\xf0\x00\xf1\x00\xf1\x00\x87\x00\x88\x00\x89\x00\x66\x00\x73\x00\x74\x00\x75\x00\x8e\x00\xce\x00\x6c\x00\x91\x00\xd1\x00\x93\x00\x94\x00\x7b\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x70\x00\xd8\x00\xd9\x00\xa0\x00\x74\x00\x76\x00\x77\x00\x78\x00\x79\x00\x95\x00\xe6\x00\xe7\x00\xe8\x00\x66\x00\xf9\x00\x87\x00\x88\x00\x89\x00\xee\x00\x6c\x00\xf0\x00\xf1\x00\x8e\x00\xec\x00\xed\x00\x91\x00\xef\x00\x93\x00\x94\x00\x17\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x8b\x00\x8c\x00\x8d\x00\x22\x00\x66\x00\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x6c\x00\x84\x00\xce\x00\x86\x00\x87\x00\xd1\x00\x55\x00\x56\x00\x31\x00\xe7\x00\xe8\x00\x47\x00\x35\x00\x36\x00\x66\x00\x4b\x00\xee\x00\x3a\x00\xf0\x00\xf1\x00\x6c\x00\x3e\x00\x55\x00\x56\x00\x57\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\x5c\x00\xf9\x00\x5d\x00\xc7\x00\x5f\x00\xee\x00\xce\x00\xf0\x00\xf1\x00\xd1\x00\xce\x00\xf4\x00\x5d\x00\xd1\x00\x5f\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x59\x00\x5e\x00\x71\x00\xe6\x00\xe7\x00\xe8\x00\x75\x00\xf5\x00\xd8\x00\xd9\x00\xe5\x00\xee\x00\x57\x00\xe8\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\xe2\x00\xee\x00\xe4\x00\xf0\x00\xf1\x00\xee\x00\x47\x00\xf0\x00\xf1\x00\x68\x00\x4b\x00\xf4\x00\xee\x00\x6c\x00\x57\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7c\x00\x7d\x00\xe6\x00\xe7\x00\xe8\x00\x87\x00\x88\x00\x89\x00\xf2\x00\xf3\x00\xee\x00\x0e\x00\x8e\x00\xf7\x00\x86\x00\x91\x00\x17\x00\x93\x00\x94\x00\x7b\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x22\x00\x49\x00\x4a\x00\x25\x00\x26\x00\x27\x00\x28\x00\x61\x00\x4b\x00\xcc\x00\xcd\x00\x65\x00\xcf\x00\x67\x00\xd1\x00\x31\x00\xb2\x00\xb3\x00\xb4\x00\x35\x00\x36\x00\xb7\x00\x70\x00\x70\x00\x3a\x00\x17\x00\x74\x00\x74\x00\x3e\x00\x42\x00\x78\x00\xe6\x00\xe7\x00\xe8\x00\xe5\x00\x46\x00\x22\x00\xe8\x00\x39\x00\xee\x00\x68\x00\x68\x00\xc7\x00\xee\x00\x6c\x00\x6c\x00\xf1\x00\xda\x00\xdb\x00\xce\x00\x30\x00\x31\x00\xd1\x00\x2a\x00\x64\x00\x59\x00\xcf\x00\xd0\x00\xd1\x00\x3d\x00\x3a\x00\x6b\x00\x1c\x00\xd6\x00\x3e\x00\xd8\x00\xd9\x00\xd8\x00\xd9\x00\xbe\x00\x44\x00\x45\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\x68\x00\xe2\x00\x4b\x00\xe4\x00\x6c\x00\xee\x00\x4f\x00\xf0\x00\xf1\x00\xf5\x00\x5d\x00\xf4\x00\x5f\x00\xee\x00\xf1\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\xf5\x00\xe6\x00\xe7\x00\xe8\x00\x91\x00\x1d\x00\x87\x00\x88\x00\x89\x00\xee\x00\xd4\x00\xd5\x00\xd6\x00\x8e\x00\xd8\x00\xd9\x00\x91\x00\xf5\x00\x93\x00\x94\x00\x58\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x43\x00\x44\x00\x45\x00\x46\x00\x76\x00\x77\x00\x78\x00\x79\x00\xd4\x00\xd5\x00\xd6\x00\x4d\x00\xd8\x00\xd9\x00\x87\x00\x88\x00\x89\x00\x8a\x00\xd4\x00\xd5\x00\xd6\x00\x8e\x00\xd8\x00\xd9\x00\x91\x00\x17\x00\x93\x00\x94\x00\x32\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x22\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xc7\x00\x50\x00\xd5\x00\xd6\x00\x47\x00\xd8\x00\xd9\x00\xce\x00\x30\x00\x31\x00\xd1\x00\x32\x00\x64\x00\xec\x00\xed\x00\xe2\x00\xef\x00\xe4\x00\x3a\x00\x6b\x00\xf3\x00\x68\x00\x3e\x00\x43\x00\xf7\x00\x6c\x00\x06\x00\xee\x00\x44\x00\x45\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\x5f\x00\x5d\x00\xc7\x00\x5f\x00\x5d\x00\xee\x00\x5f\x00\xf0\x00\xf1\x00\xce\x00\xf5\x00\xf4\x00\xd1\x00\xc6\x00\xc7\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x95\x00\xd4\x00\xd5\x00\xd6\x00\x91\x00\xd8\x00\xd9\x00\xd8\x00\xd9\x00\x8b\x00\x8c\x00\x8d\x00\xb7\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\xe2\x00\x5d\x00\xe4\x00\x5f\x00\x5d\x00\xee\x00\x5f\x00\xf0\x00\xf1\x00\x4e\x00\x4f\x00\xf4\x00\xee\x00\x49\x00\x4a\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\xd4\x00\xd5\x00\xd6\x00\xae\x00\xd8\x00\xd9\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x5d\x00\x95\x00\x5f\x00\x8e\x00\x2d\x00\x95\x00\x91\x00\x17\x00\x93\x00\x94\x00\xae\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x22\x00\xcc\x00\xcd\x00\x9d\x00\xcf\x00\xf7\x00\xd1\x00\xf6\x00\xd5\x00\xd6\x00\x34\x00\xd8\x00\xd9\x00\x72\x00\x30\x00\x31\x00\x17\x00\x29\x00\x4c\x00\x4d\x00\x5b\x00\xe2\x00\x5b\x00\xe4\x00\x3a\x00\xf3\x00\xe5\x00\x22\x00\x3e\x00\xe8\x00\x8f\x00\x90\x00\x57\x00\xee\x00\x44\x00\xee\x00\x49\x00\x4a\x00\xf1\x00\x2e\x00\x57\x00\x64\x00\xc7\x00\x8f\x00\x90\x00\x68\x00\xf7\x00\x6a\x00\x6b\x00\xce\x00\xd9\x00\x3a\x00\xd1\x00\x8f\x00\x90\x00\x3e\x00\x1b\x00\x40\x00\x41\x00\x4a\x00\x4b\x00\xbc\x00\xd4\x00\xd5\x00\xd6\x00\x1a\x00\xd8\x00\xd9\x00\x2d\x00\x2e\x00\x39\x00\x3a\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\xe2\x00\x5a\x00\xe4\x00\x29\x00\x34\x00\xee\x00\x9f\x00\xf0\x00\xf1\x00\xbc\x00\x91\x00\xf4\x00\xee\x00\xbc\x00\x21\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x19\x00\x19\x00\x85\x00\x4a\x00\x07\x00\x66\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x66\x00\x07\x00\x84\x00\x8e\x00\x2d\x00\x19\x00\x91\x00\x5e\x00\x93\x00\x94\x00\x47\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x70\x00\x66\x00\x7c\x00\x2c\x00\x2d\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x6b\x00\x85\x00\x5e\x00\x8e\x00\x54\x00\x5c\x00\x91\x00\x17\x00\x93\x00\x94\x00\x6c\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x22\x00\x66\x00\x85\x00\x4a\x00\xd5\x00\xd6\x00\x66\x00\xd8\x00\xd9\x00\x6c\x00\x66\x00\x65\x00\x2e\x00\x5e\x00\x64\x00\xc7\x00\x5e\x00\xe2\x00\x68\x00\xe4\x00\x6a\x00\x6b\x00\xce\x00\x5d\x00\x3a\x00\xd1\x00\x5d\x00\x4a\x00\x3e\x00\xee\x00\x40\x00\x41\x00\x64\x00\x6c\x00\x6b\x00\x4e\x00\x68\x00\x2e\x00\x6a\x00\x6b\x00\x66\x00\x65\x00\xc7\x00\x49\x00\x6c\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\xce\x00\x7c\x00\x54\x00\xd1\x00\x4e\x00\xee\x00\x19\x00\xf0\x00\xf1\x00\x66\x00\x91\x00\xf4\x00\x66\x00\x07\x00\x1a\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x23\x00\x42\x00\x66\x00\x62\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\x84\x00\x91\x00\x85\x00\x4a\x00\x02\x00\xee\x00\x4b\x00\xf0\x00\xf1\x00\x47\x00\x47\x00\xf4\x00\x7b\x00\x5c\x00\x62\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x4a\x00\x85\x00\x62\x00\x66\x00\x07\x00\x66\x00\x87\x00\x88\x00\x89\x00\x8a\x00\xcd\x00\x84\x00\xcf\x00\x8e\x00\xd1\x00\x07\x00\x91\x00\x17\x00\x93\x00\x94\x00\x19\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x22\x00\x19\x00\x47\x00\x2d\x00\xd5\x00\xd6\x00\xe5\x00\xd8\x00\xd9\x00\xe8\x00\x47\x00\x55\x00\x6c\x00\x47\x00\x47\x00\xee\x00\x17\x00\xe2\x00\xf1\x00\xe4\x00\x49\x00\x5c\x00\xd5\x00\xd6\x00\x3a\x00\xd8\x00\xd9\x00\x22\x00\x3e\x00\xee\x00\x6b\x00\x6d\x00\x55\x00\x56\x00\x57\x00\xe2\x00\x85\x00\xe4\x00\x48\x00\x5c\x00\x5c\x00\x64\x00\xc7\x00\x6d\x00\x54\x00\x7c\x00\x4a\x00\xee\x00\x6b\x00\xce\x00\x62\x00\x3a\x00\xd1\x00\x5e\x00\x50\x00\x3e\x00\x6d\x00\x6b\x00\x4a\x00\x47\x00\x71\x00\x72\x00\x65\x00\x07\x00\x4b\x00\x48\x00\x19\x00\x50\x00\x19\x00\x5c\x00\x4b\x00\x6d\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\x62\x00\x6d\x00\x6c\x00\x6c\x00\x19\x00\xee\x00\x4a\x00\xf0\x00\xf1\x00\x66\x00\x91\x00\xf4\x00\x4a\x00\x6c\x00\x4a\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x4a\x00\x19\x00\x62\x00\x47\x00\x47\x00\x79\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x7b\x00\x5e\x00\x6b\x00\x8e\x00\x4b\x00\x16\x00\x91\x00\x1a\x00\x93\x00\x94\x00\x47\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x47\x00\x47\x00\x7b\x00\x2c\x00\x2d\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x7b\x00\x4b\x00\x4a\x00\x8e\x00\x56\x00\x56\x00\x91\x00\x17\x00\x93\x00\x94\x00\x5e\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x22\x00\x68\x00\x19\x00\x6c\x00\xd5\x00\xd6\x00\xd7\x00\xd8\x00\xd9\x00\xda\x00\xdb\x00\x64\x00\x2e\x00\xc5\x00\xc6\x00\xc7\x00\x64\x00\xe2\x00\xe3\x00\xe4\x00\x66\x00\x66\x00\xce\x00\x6b\x00\x3a\x00\xd1\x00\x4a\x00\x19\x00\x3e\x00\xee\x00\x40\x00\x4a\x00\x64\x00\x54\x00\x6d\x00\x6d\x00\x68\x00\x6d\x00\x6a\x00\x6b\x00\xc5\x00\xc6\x00\xc7\x00\x66\x00\x66\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\xce\x00\x66\x00\x6b\x00\xd1\x00\x66\x00\xee\x00\x5e\x00\xf0\x00\xf1\x00\x66\x00\x5c\x00\xf4\x00\x91\x00\x66\x00\x6c\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x4a\x00\x49\x00\x6c\x00\x66\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\x66\x00\x91\x00\x66\x00\x4a\x00\x62\x00\xee\x00\x7c\x00\xf0\x00\xf1\x00\x4a\x00\x47\x00\xf4\x00\x47\x00\x6c\x00\x6b\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x4b\x00\x50\x00\x6c\x00\x5e\x00\x4a\x00\x6c\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x54\x00\x4e\x00\x6b\x00\x8e\x00\x50\x00\x4a\x00\x91\x00\x17\x00\x93\x00\x94\x00\x47\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x22\x00\x47\x00\x47\x00\x6c\x00\x7c\x00\x4e\x00\xd5\x00\xd6\x00\x47\x00\xd8\x00\xd9\x00\x6c\x00\x62\x00\x66\x00\x68\x00\x64\x00\x17\x00\x6c\x00\x8c\x00\xe2\x00\x4a\x00\xe4\x00\xd5\x00\xd6\x00\x3a\x00\xd8\x00\xd9\x00\x22\x00\x3e\x00\x54\x00\x8c\x00\xee\x00\x62\x00\xd2\x00\x66\x00\xe2\x00\x8c\x00\xe4\x00\x48\x00\x64\x00\x66\x00\x64\x00\xc7\x00\xdc\x00\xdd\x00\x66\x00\x8e\x00\xee\x00\x6b\x00\xce\x00\x66\x00\x3a\x00\xd1\x00\x66\x00\x66\x00\x3e\x00\x66\x00\x50\x00\x7b\x00\xec\x00\xed\x00\x42\x00\xef\x00\x54\x00\x4e\x00\x48\x00\xf3\x00\x47\x00\x47\x00\x47\x00\x47\x00\x47\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\x47\x00\x4b\x00\x61\x00\x17\x00\x6c\x00\xee\x00\x62\x00\xf0\x00\xf1\x00\x70\x00\x91\x00\xf4\x00\x4b\x00\x47\x00\x47\x00\xf8\x00\xf9\x00\xfa\x00\xfb\x00\x00\x00\x1f\x00\x96\x00\x34\x00\x4f\x00\x4f\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x96\x00\x18\x00\x11\x00\x8e\x00\x2d\x00\x7b\x00\x91\x00\x65\x00\x93\x00\x94\x00\x23\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x13\x00\x96\x00\x96\x00\x7b\x00\x7b\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x61\x00\x6c\x00\x51\x00\x8e\x00\x6c\x00\x5d\x00\x91\x00\x17\x00\x93\x00\x94\x00\x84\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x22\x00\x7c\x00\x0c\x00\x0c\x00\xd5\x00\xd6\x00\x84\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\xc7\x00\xff\xff\xe2\x00\x68\x00\xe4\x00\x6a\x00\x6b\x00\xce\x00\xff\xff\x3a\x00\xd1\x00\xff\xff\xff\xff\x3e\x00\xee\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x76\x00\x77\x00\x78\x00\x79\x00\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xe5\x00\xe6\x00\xe7\x00\xe8\x00\xce\x00\xff\xff\x91\x00\xd1\x00\xff\xff\xee\x00\x17\x00\xf0\x00\xf1\x00\xff\xff\x91\x00\xf4\x00\x9b\x00\x9c\x00\xff\xff\xf8\x00\xf9\x00\xfa\x00\xfb\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe5\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xf8\x00\xf9\x00\xfa\x00\xfb\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x87\x00\x88\x00\x89\x00\x8a\x00\xc7\x00\xff\xff\xff\xff\x8e\x00\xff\xff\xff\xff\x91\x00\xce\x00\x93\x00\x94\x00\xd1\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xe2\x00\xff\xff\xe4\x00\xe2\x00\xee\x00\xe4\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xee\x00\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\x7c\x00\x7d\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xa1\x00\xa2\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xf8\x00\xf9\x00\xfa\x00\xfb\x00\xff\xff\xff\xff\xff\xff\x17\x00\x76\x00\x77\x00\x78\x00\x79\x00\xff\xff\x76\x00\x77\x00\x78\x00\x79\x00\xc7\x00\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xce\x00\x67\x00\x2d\x00\xd1\x00\xff\xff\xd3\x00\xcf\x00\xd0\x00\xd1\x00\xff\xff\x70\x00\xff\xff\xff\xff\xd6\x00\x74\x00\xd8\x00\xd9\x00\xdf\x00\x78\x00\xe1\x00\xff\xff\xff\xff\xff\xff\x17\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xea\x00\xeb\x00\xec\x00\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\xff\xff\xf1\x00\xf7\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\x64\x00\xa1\x00\xa2\x00\xff\xff\x68\x00\x61\x00\x6a\x00\x6b\x00\xff\xff\x65\x00\xff\xff\x67\x00\xc8\x00\xc9\x00\xca\x00\xcb\x00\xff\xff\xcd\x00\xff\xff\xcf\x00\x70\x00\xd1\x00\xff\xff\xff\xff\x74\x00\xd8\x00\xd9\x00\xff\xff\x78\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xc7\x00\xe2\x00\xe5\x00\xe4\x00\xff\xff\xe8\x00\x91\x00\xce\x00\xee\x00\x91\x00\xd1\x00\xee\x00\xd3\x00\xee\x00\xf1\x00\xff\xff\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x2d\x00\xff\xff\xff\xff\xdf\x00\xff\xff\xe1\x00\xff\xff\xff\xff\xff\xff\x17\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xea\x00\xeb\x00\xec\x00\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\xff\xff\xff\xff\xf7\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xa1\x00\xa2\x00\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xd5\x00\xd6\x00\x64\x00\xd8\x00\xd9\x00\xff\xff\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\x17\x00\xee\x00\xff\xff\xff\xff\xee\x00\xc7\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xd3\x00\xff\xff\x33\x00\xff\xff\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\x7c\x00\x7d\x00\xdf\x00\xff\xff\xe1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xea\x00\xeb\x00\xff\xff\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\xff\xff\xff\xff\xf7\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x64\x00\xff\xff\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaf\x00\xb0\x00\xb1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xb8\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xc7\x00\xff\xff\xcf\x00\xd0\x00\xd1\x00\x91\x00\xff\xff\xce\x00\xee\x00\xd6\x00\xd1\x00\xd8\x00\xd9\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\x64\x00\xff\xff\xff\xff\xa1\x00\xe6\x00\xe7\x00\xe8\x00\x6b\x00\xa6\x00\xf1\x00\xff\xff\xff\xff\xee\x00\xab\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xf5\x00\xff\xff\xff\xff\xff\xff\x49\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xc7\x00\x5c\x00\xff\xff\xff\xff\x91\x00\xd5\x00\xd6\x00\xce\x00\xd8\x00\xd9\x00\xd1\x00\x66\x00\xd3\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6c\x00\xe2\x00\xff\xff\xe4\x00\xff\xff\x71\x00\x72\x00\xdf\x00\x17\x00\xe1\x00\xff\xff\xff\xff\xff\xff\xee\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xea\x00\xeb\x00\xff\xff\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xa1\x00\xff\xff\xff\xff\x61\x00\xa5\x00\xa6\x00\xff\xff\x65\x00\xff\xff\x67\x00\xd5\x00\xd6\x00\xd7\x00\xd8\x00\xd9\x00\xda\x00\xdb\x00\xff\xff\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xe2\x00\xe3\x00\xe4\x00\x78\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xf9\x00\xff\xff\xd1\x00\x91\x00\xd3\x00\x93\x00\x94\x00\x33\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xdf\x00\x17\x00\xe1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xea\x00\xeb\x00\xff\xff\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xa1\x00\x64\x00\xc7\x00\xa4\x00\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xd3\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xde\x00\xee\x00\xe0\x00\xf0\x00\xf1\x00\xce\x00\x91\x00\xf4\x00\xd1\x00\xff\xff\xd3\x00\xe9\x00\xff\xff\xeb\x00\xec\x00\xed\x00\xff\xff\xef\x00\xff\xff\xff\xff\xf2\x00\xf3\x00\xdf\x00\x17\x00\xe1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xea\x00\xeb\x00\xff\xff\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xa1\x00\xff\xff\xff\xff\xa4\x00\xff\xff\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xc7\x00\xee\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xce\x00\xff\xff\x2c\x00\xd1\x00\x91\x00\xd3\x00\x93\x00\x94\x00\x33\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xdf\x00\x17\x00\xe1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xea\x00\xeb\x00\xff\xff\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xa1\x00\x64\x00\xc7\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xce\x00\xff\xff\xff\xff\xd1\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xd3\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xde\x00\xee\x00\xe0\x00\xf0\x00\xf1\x00\xce\x00\x91\x00\xf4\x00\xd1\x00\xff\xff\xd3\x00\xe9\x00\xff\xff\xeb\x00\xec\x00\xed\x00\xff\xff\xef\x00\xff\xff\xff\xff\xf2\x00\xf3\x00\xdf\x00\x17\x00\xe1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xea\x00\xeb\x00\xff\xff\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xa1\x00\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xc7\x00\xee\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xce\x00\xff\xff\x2c\x00\xd1\x00\x91\x00\xd3\x00\x93\x00\x94\x00\x33\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xdf\x00\x17\x00\xe1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xea\x00\xeb\x00\xff\xff\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xa1\x00\x64\x00\xc7\x00\x65\x00\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xce\x00\xff\xff\xff\xff\xd1\x00\x6f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xce\x00\x91\x00\xf4\x00\xd1\x00\xff\xff\xd3\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdf\x00\x17\x00\xe1\x00\x3f\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xea\x00\xeb\x00\xff\xff\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xca\x00\xcb\x00\xff\xff\xcd\x00\xa1\x00\xcf\x00\x64\x00\xd1\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe5\x00\xff\xff\xff\xff\xe8\x00\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xf1\x00\xff\xff\xff\xff\xc7\x00\xee\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\x91\x00\xd1\x00\x91\x00\xd3\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xdf\x00\x17\x00\xe1\x00\x3f\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xea\x00\xeb\x00\xff\xff\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xa1\x00\x64\x00\xc7\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe2\x00\x17\x00\xe4\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xee\x00\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xce\x00\x91\x00\xf4\x00\xd1\x00\xff\xff\xd3\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdf\x00\xff\xff\xe1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xea\x00\xeb\x00\xff\xff\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\x64\x00\xff\xff\xa7\x00\xa8\x00\xa9\x00\xaa\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb9\x00\xff\xff\xff\xff\xe2\x00\x17\x00\xe4\x00\xff\xff\xff\xff\xc1\x00\xff\xff\x82\x00\xff\xff\xff\xff\xff\xff\xc7\x00\xee\x00\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\x91\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xa7\x00\xa8\x00\xa9\x00\xaa\x00\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb9\x00\xff\xff\xff\xff\x64\x00\xff\xff\xc7\x00\x67\x00\xff\xff\xc1\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xce\x00\xd8\x00\xd9\x00\xd1\x00\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xe2\x00\x82\x00\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\xe2\x00\xff\xff\xe4\x00\xff\xff\xee\x00\xe6\x00\xe7\x00\xe8\x00\x91\x00\xff\xff\xff\xff\xff\xff\xee\x00\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xa8\x00\xa9\x00\xaa\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xb9\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xc1\x00\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xaf\x00\xb0\x00\xb1\x00\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xb8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xce\x00\xff\xff\xf4\x00\xd1\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb9\x00\xff\xff\xff\xff\xff\xff\xbd\x00\xff\xff\xff\xff\xc0\x00\xc1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xce\x00\x67\x00\x68\x00\xd1\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb9\x00\xff\xff\xff\xff\xff\xff\xbd\x00\xff\xff\xff\xff\xc0\x00\xc1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\x64\x00\xff\xff\xe6\x00\xe7\x00\xe8\x00\xc7\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xac\x00\xad\x00\xf4\x00\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xda\x00\xdb\x00\xff\xff\xb9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xc1\x00\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\xc7\x00\xff\xff\xff\xff\xee\x00\x91\x00\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xf7\x00\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xaf\x00\xb0\x00\xb1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb8\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xc7\x00\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xac\x00\xad\x00\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb9\x00\xee\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xc1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xc7\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb9\x00\xff\xff\xff\xff\xff\xff\xbd\x00\xff\xff\xff\xff\xc0\x00\xc1\x00\xff\xff\x61\x00\xff\xff\xff\xff\x64\x00\xc7\x00\x66\x00\x67\x00\xff\xff\x69\x00\x6a\x00\x6b\x00\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\x91\x00\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb9\x00\xff\xff\xff\xff\xff\xff\xbd\x00\xff\xff\xff\xff\xc0\x00\xc1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xe6\x00\xe7\x00\xe8\x00\x22\x00\xff\xff\xaa\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xd5\x00\xd6\x00\xf4\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xb9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xc1\x00\xff\xff\xff\xff\x3e\x00\xff\xff\xff\xff\xc7\x00\x60\x00\xff\xff\xee\x00\xff\xff\x64\x00\x65\x00\xce\x00\x67\x00\x68\x00\xd1\x00\x6a\x00\x6b\x00\x6c\x00\x6d\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\xb5\x00\xb6\x00\xb7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xc7\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\x6f\x00\xce\x00\x8e\x00\xff\xff\xd1\x00\x91\x00\xff\xff\x93\x00\x94\x00\x49\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xe6\x00\xe7\x00\xe8\x00\x5c\x00\xc7\x00\xff\xff\xff\xff\xff\xff\xee\x00\x91\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\x6d\x00\xd8\x00\xd9\x00\xff\xff\x71\x00\x72\x00\xff\xff\xff\xff\x75\x00\x76\x00\xff\xff\xe2\x00\xff\xff\xe4\x00\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\xff\xff\xce\x00\xff\xff\xee\x00\xd1\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xc7\x00\xe5\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xd5\x00\xd6\x00\xf4\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\xff\xff\xb9\x00\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xc0\x00\xc1\x00\xff\xff\xff\xff\xff\xff\x17\x00\xee\x00\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xf7\x00\xff\xff\xd1\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\x49\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\xee\x00\x57\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xb9\x00\xd8\x00\xd9\x00\xff\xff\x66\x00\xff\xff\xff\xff\xc0\x00\xc1\x00\xff\xff\x6c\x00\xe2\x00\xff\xff\xe4\x00\xc7\x00\x71\x00\x72\x00\xff\xff\xff\xff\x75\x00\x76\x00\xce\x00\xff\xff\xee\x00\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xb1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb8\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\x17\x00\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xb9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xc1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xc7\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xb8\x00\xff\xff\xff\xff\x60\x00\x61\x00\xff\xff\xff\xff\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\xc7\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\x91\x00\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\xc7\x00\xb8\x00\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xc9\x00\xca\x00\xcb\x00\xc7\x00\xcd\x00\xff\xff\xcf\x00\xee\x00\xd1\x00\xff\xff\xce\x00\xff\xff\x91\x00\xd1\x00\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xe5\x00\xf4\x00\xff\xff\xe8\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xee\x00\xff\xff\xff\xff\xf1\x00\xff\xff\xee\x00\x17\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\x17\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x50\x00\xff\xff\x52\x00\x53\x00\xe2\x00\x55\x00\xe4\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xee\x00\xff\xff\xff\xff\x64\x00\xff\xff\xce\x00\x66\x00\x68\x00\xd1\x00\x6a\x00\x6b\x00\xff\xff\x6c\x00\xc7\x00\xff\xff\xff\xff\xff\xff\x71\x00\x72\x00\xff\xff\xce\x00\x75\x00\x76\x00\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xee\x00\xd1\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xce\x00\xff\xff\xf4\x00\xd1\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\x60\x00\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xce\x00\x67\x00\x68\x00\xd1\x00\x6a\x00\x6b\x00\x6c\x00\x6d\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xce\x00\xff\xff\xf4\x00\xd1\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\x17\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xe2\x00\xff\xff\xe4\x00\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xee\x00\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xce\x00\xff\xff\xf4\x00\xd1\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\x60\x00\xff\xff\xff\xff\x63\x00\x64\x00\x65\x00\xce\x00\x67\x00\x68\x00\xd1\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xce\x00\xff\xff\xf4\x00\xd1\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\x17\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xe2\x00\xff\xff\xe4\x00\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xee\x00\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xce\x00\xff\xff\xf4\x00\xd1\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\x60\x00\xff\xff\xff\xff\x63\x00\x64\x00\x65\x00\xce\x00\x67\x00\x68\x00\xd1\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xce\x00\xff\xff\xf4\x00\xd1\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\x17\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xe2\x00\xff\xff\xe4\x00\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xee\x00\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xce\x00\xff\xff\xf4\x00\xd1\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\x17\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\x60\x00\xff\xff\xff\xff\x63\x00\x64\x00\x65\x00\xce\x00\x67\x00\x68\x00\xd1\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xce\x00\xff\xff\xf4\x00\xd1\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\x17\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\x17\x00\xce\x00\xff\xff\xff\xff\xd1\x00\xe2\x00\xff\xff\xe4\x00\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\xee\x00\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\x91\x00\x92\x00\x93\x00\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\x94\x00\xff\xff\x96\x00\x97\x00\x98\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x60\x00\xff\xff\xc7\x00\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xce\x00\x6a\x00\x6b\x00\xd1\x00\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xce\x00\x17\x00\xff\xff\xd1\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xce\x00\xff\xff\xf4\x00\xd1\x00\x91\x00\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xba\x00\xbb\x00\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xc7\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xce\x00\x17\x00\xee\x00\xd1\x00\xf0\x00\xf1\x00\xff\xff\x91\x00\xf4\x00\xff\xff\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\x99\x00\x9a\x00\x9b\x00\x9c\x00\x17\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xe6\x00\xe7\x00\xe8\x00\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xba\x00\xbb\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\x17\x00\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xee\x00\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xce\x00\xff\xff\x91\x00\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xee\x00\xf4\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x99\x00\x9a\x00\x9b\x00\x9c\x00\x49\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xee\x00\xff\xff\xf0\x00\xf1\x00\x5c\x00\xff\xff\xf4\x00\xff\xff\xff\xff\xc7\x00\x17\x00\xff\xff\xff\xff\x91\x00\x66\x00\x17\x00\xce\x00\xff\xff\xff\xff\xd1\x00\x6c\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x71\x00\x72\x00\xc7\x00\xff\xff\x75\x00\x76\x00\xff\xff\xff\xff\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xc7\x00\xf0\x00\xf1\x00\x91\x00\xff\xff\xf4\x00\x17\x00\xce\x00\x91\x00\xff\xff\xd1\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x49\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xe6\x00\xe7\x00\xe8\x00\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6d\x00\xff\xff\xff\xff\xff\xff\x71\x00\x72\x00\xc7\x00\xff\xff\x75\x00\x76\x00\xff\xff\xc7\x00\x17\x00\xce\x00\x91\x00\xff\xff\xd1\x00\xff\xff\xce\x00\x91\x00\xff\xff\xd1\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\x99\x00\x9a\x00\x9b\x00\x9c\x00\x8c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xee\x00\xf4\x00\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xff\xff\x17\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xce\x00\xff\xff\x91\x00\xd1\x00\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xee\x00\xf4\x00\xf0\x00\xf1\x00\xff\xff\x91\x00\xf4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\xce\x00\x49\x00\x4a\x00\xd1\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\x58\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\xff\xff\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xc7\x00\xf0\x00\xf1\x00\xff\xff\x6d\x00\xf4\x00\xff\xff\xce\x00\x71\x00\x72\x00\xd1\x00\x91\x00\x75\x00\x76\x00\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\x99\x00\x9a\x00\x9b\x00\x9c\x00\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\x64\x00\xff\xff\xff\xff\xe6\x00\xe7\x00\xe8\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\x64\x00\xe6\x00\xe7\x00\xe8\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xee\x00\xff\xff\xf0\x00\xf1\x00\xff\xff\xff\xff\xf4\x00\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xce\x00\x91\x00\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\x91\x00\x0a\x00\x0b\x00\xff\xff\xe6\x00\xe7\x00\xe8\x00\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xee\x00\x16\x00\xf0\x00\xf1\x00\xff\xff\x1a\x00\xf4\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\x4c\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\x52\x00\xee\x00\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\x60\x00\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xee\x00\x67\x00\xff\xff\x69\x00\xff\xff\x6b\x00\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\x49\x00\x4a\x00\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\x4e\x00\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x6d\x00\xff\xff\xff\xff\xff\xff\x71\x00\x72\x00\xff\xff\x5d\x00\x75\x00\x76\x00\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xc9\x00\xca\x00\xcb\x00\xff\xff\xcd\x00\xff\xff\xcf\x00\xff\xff\xd1\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\xe5\x00\xff\xff\xff\xff\xe8\x00\xff\xff\xff\xff\xff\xff\xec\x00\xed\x00\xee\x00\xef\x00\x61\x00\xf1\x00\x63\x00\xf3\x00\x65\x00\xff\xff\x67\x00\xf7\x00\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\x49\x00\x30\x00\x4b\x00\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\x6d\x00\xff\xff\x55\x00\xff\xff\x71\x00\x72\x00\xff\xff\xff\xff\x75\x00\x76\x00\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\x49\x00\x4a\x00\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x6d\x00\xff\xff\xff\xff\xff\xff\x71\x00\x72\x00\xff\xff\xff\xff\x75\x00\x76\x00\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\x49\x00\x4a\x00\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x6d\x00\xff\xff\xff\xff\xff\xff\x71\x00\x72\x00\xff\xff\xff\xff\x75\x00\x76\x00\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x00\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xce\x00\xff\xff\xff\xff\xd1\x00\x64\x00\xd3\x00\xff\xff\xff\xff\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xdd\x00\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xe5\x00\xff\xff\x52\x00\xe8\x00\xff\xff\x55\x00\xff\xff\xec\x00\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\x91\x00\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x00\x00\x01\x00\x02\x00\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\x0a\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xd5\x00\xd6\x00\x2c\x00\xd8\x00\xd9\x00\x49\x00\x4a\x00\x4b\x00\xff\xff\xff\xff\x4e\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xee\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4d\x00\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\x6d\x00\xff\xff\xff\xff\x56\x00\x71\x00\x72\x00\xff\xff\xff\xff\x75\x00\x76\x00\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\xff\xff\x0a\x00\x0b\x00\x0c\x00\xff\xff\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\xff\xff\x14\x00\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\xff\xff\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\xff\xff\xff\xff\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x84\x00\x85\x00\x86\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\x0f\x00\x10\x00\x11\x00\x12\x00\xff\xff\x14\x00\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\x1b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\xff\xff\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\xff\xff\xff\xff\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x84\x00\x85\x00\x86\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\x05\x00\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\x0f\x00\x10\x00\xff\xff\x12\x00\xff\xff\x14\x00\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xd3\x00\xff\xff\x41\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdd\x00\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe5\x00\x52\x00\xff\xff\xe8\x00\x55\x00\x56\x00\xff\xff\xec\x00\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x84\x00\x85\x00\x86\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\x05\x00\x06\x00\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\x0f\x00\x10\x00\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xce\x00\xff\xff\xff\xff\xd1\x00\xff\xff\xd3\x00\xff\xff\x41\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdd\x00\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xe5\x00\x52\x00\xff\xff\xe8\x00\x55\x00\x56\x00\xff\xff\xec\x00\xed\x00\xee\x00\xef\x00\xf0\x00\xf1\x00\xf2\x00\xf3\x00\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x84\x00\x85\x00\x86\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\x05\x00\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\x0f\x00\x10\x00\xff\xff\x12\x00\xff\xff\x14\x00\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x41\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x84\x00\x85\x00\x86\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\x05\x00\x06\x00\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\x0f\x00\x10\x00\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x41\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x84\x00\x85\x00\x86\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\x0f\x00\x10\x00\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x41\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x84\x00\x85\x00\x86\x00\x87\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x49\x00\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\x68\x00\x69\x00\xff\xff\xff\xff\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x49\x00\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\x66\x00\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x49\x00\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\x66\x00\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x49\x00\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\x68\x00\x69\x00\xff\xff\xff\xff\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x49\x00\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\x66\x00\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x49\x00\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x49\x00\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\x62\x00\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x49\x00\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\x0e\x00\x0f\x00\x10\x00\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\x2f\x00\x30\x00\x31\x00\x32\x00\x33\x00\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x41\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\x6b\x00\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5e\x00\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\x6b\x00\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\x6b\x00\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\x17\x00\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\xff\xff\xff\xff\xff\xff\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\x91\x00\x6b\x00\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\x01\x00\x02\x00\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\x0a\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xd5\x00\xd6\x00\x2c\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x49\x00\x4a\x00\x4b\x00\xff\xff\xff\xff\x4e\x00\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x73\x00\x74\x00\x75\x00\x76\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\x17\x00\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\x2b\x00\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\xff\xff\xff\xff\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\xff\xff\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\x01\x00\x02\x00\x03\x00\xff\xff\xff\xff\xff\xff\xff\xff\x08\x00\xff\xff\x0a\x00\x0b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\x00\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x2a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x36\x00\x37\x00\x38\x00\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\xff\xff\xff\xff\xff\xff\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x52\x00\x60\x00\xff\xff\x55\x00\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\x6c\x00\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\x91\x00\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x91\x00\x01\x00\x02\x00\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\x0a\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xd5\x00\xd6\x00\x2c\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\x64\x00\xff\xff\xff\xff\xff\xff\x68\x00\xff\xff\x6a\x00\x6b\x00\xe2\x00\x52\x00\xe4\x00\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\x91\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\x01\x00\x02\x00\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\x0a\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x30\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\xff\xff\xff\xff\xe2\x00\x68\x00\xe4\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\x52\x00\x60\x00\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\x6c\x00\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\x91\x00\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x91\x00\x01\x00\x02\x00\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\x0a\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xee\x00\xd8\x00\xd9\x00\x64\x00\xff\xff\xff\xff\xff\xff\x68\x00\xff\xff\x6a\x00\x6b\x00\xe2\x00\x52\x00\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\x91\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\x01\x00\x02\x00\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\x0a\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\xff\xff\xff\xff\xe2\x00\x68\x00\xe4\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\x60\x00\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\x6c\x00\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\x6a\x00\xff\xff\xff\xff\x91\x00\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\x91\x00\x01\x00\x02\x00\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\x0a\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xee\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe2\x00\x52\x00\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\x01\x00\x02\x00\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\x0a\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x60\x00\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\x64\x00\x6a\x00\x6b\x00\xff\xff\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\x69\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\x91\x00\xff\xff\x73\x00\x74\x00\xff\xff\x91\x00\x77\x00\x78\x00\x79\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\x7e\x00\x7f\x00\x80\x00\x81\x00\x82\x00\x83\x00\xff\xff\x01\x00\x02\x00\xff\xff\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x8d\x00\x0a\x00\x8f\x00\x90\x00\x91\x00\x92\x00\x93\x00\x94\x00\x95\x00\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xc7\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\x3b\x00\x3c\x00\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\x4b\x00\xff\xff\xff\xff\x4e\x00\xee\x00\x50\x00\xff\xff\x52\x00\xff\xff\x54\x00\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\xff\xff\x74\x00\x75\x00\x76\x00\xff\xff\x78\x00\xff\xff\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x85\x00\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x60\x00\xff\xff\x3b\x00\x3c\x00\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x50\x00\xff\xff\x52\x00\x53\x00\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\x66\x00\x67\x00\xff\xff\xff\xff\x91\x00\xff\xff\x6c\x00\xff\xff\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\xff\xff\x74\x00\x75\x00\x76\x00\xff\xff\x78\x00\x79\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xff\xff\x50\x00\xff\xff\x52\x00\xff\xff\x54\x00\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\xff\xff\x74\x00\x75\x00\x76\x00\xff\xff\x78\x00\xff\xff\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x85\x00\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x60\x00\xff\xff\x3b\x00\x3c\x00\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\x49\x00\x61\x00\xff\xff\xff\xff\x64\x00\xff\xff\x66\x00\x67\x00\xff\xff\x69\x00\x6a\x00\x6b\x00\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\x66\x00\x67\x00\xff\xff\xff\xff\x91\x00\xff\xff\x6c\x00\xff\xff\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\xff\xff\x74\x00\xff\xff\x76\x00\xff\xff\x78\x00\x79\x00\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xe2\x00\x50\x00\xe4\x00\x52\x00\xff\xff\x54\x00\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xee\x00\x5c\x00\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\xff\xff\x74\x00\x75\x00\x76\x00\xff\xff\x78\x00\xff\xff\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x02\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x0a\x00\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x3b\x00\x3c\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x50\x00\xff\xff\x52\x00\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\x64\x00\xff\xff\xff\xff\xff\xff\x5c\x00\x5d\x00\x6a\x00\x6b\x00\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\x50\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x72\x00\x64\x00\x74\x00\x75\x00\x76\x00\x68\x00\x78\x00\x6a\x00\x6b\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x0a\x00\x6f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\x91\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\x49\x00\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\x52\x00\xff\xff\x54\x00\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xee\x00\x67\x00\xd5\x00\xd6\x00\x91\x00\xd8\x00\xd9\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\xff\xff\x72\x00\xff\xff\x74\x00\xe2\x00\xff\xff\xe4\x00\x78\x00\xff\xff\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xec\x00\xed\x00\xee\x00\xef\x00\xff\xff\xff\xff\xf2\x00\xf3\x00\xff\xff\xff\xff\xff\xff\xf7\x00\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\xff\xff\xff\xff\x6c\x00\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\x3b\x00\x3c\x00\x64\x00\xff\xff\x66\x00\x67\x00\xff\xff\x69\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\x49\x00\x61\x00\xff\xff\xff\xff\x64\x00\xff\xff\x66\x00\x67\x00\xff\xff\x69\x00\x6a\x00\x6b\x00\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\x6d\x00\x6e\x00\x6f\x00\x70\x00\xff\xff\x72\x00\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\xff\xff\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\x66\x00\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\x3b\x00\x3c\x00\x64\x00\xff\xff\x66\x00\x67\x00\xff\xff\x69\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x4b\x00\xff\xff\xff\xff\x4e\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x54\x00\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\xff\xff\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x64\x00\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\x62\x00\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\x64\x00\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\x02\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x0a\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x3b\x00\x3c\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\x66\x00\x67\x00\x68\x00\x69\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\x62\x00\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\x91\x00\xff\xff\x78\x00\x79\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\x6f\x00\xff\xff\xff\xff\xff\xff\xff\xff\x11\x00\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xc7\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xee\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x64\x00\x74\x00\xff\xff\xff\xff\x68\x00\x78\x00\x6a\x00\x6b\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\x91\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\x6e\x00\x6f\x00\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\x56\x00\x6e\x00\x6f\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xd5\x00\xd6\x00\x91\x00\xd8\x00\xd9\x00\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xe2\x00\xff\xff\xe4\x00\x78\x00\x79\x00\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\x6f\x00\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\x56\x00\xff\xff\x6f\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x11\x00\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x64\x00\x74\x00\xff\xff\xff\xff\x68\x00\x78\x00\x6a\x00\x6b\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\x91\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\x6f\x00\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\x56\x00\xff\xff\x6f\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xd5\x00\xd6\x00\x91\x00\xd8\x00\xd9\x00\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xe2\x00\xff\xff\xe4\x00\x78\x00\x79\x00\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x64\x00\xff\xff\x66\x00\x67\x00\xff\xff\x69\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\xff\xff\x66\x00\x67\x00\xff\xff\x69\x00\x6a\x00\x6b\x00\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x64\x00\xff\xff\x66\x00\x67\x00\xff\xff\x69\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\xff\xff\x66\x00\x67\x00\xff\xff\x69\x00\x6a\x00\x6b\x00\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x64\x00\xff\xff\x66\x00\x67\x00\xff\xff\x69\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\x65\x00\xff\xff\x67\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x79\x00\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xc7\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xc7\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\x64\x00\xff\xff\xff\xff\xe2\x00\x68\x00\xe4\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x91\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\x48\x00\xff\xff\xff\xff\xff\xff\xff\xff\x64\x00\xe2\x00\xff\xff\xe4\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\xff\xff\x91\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\x48\x00\xff\xff\xff\xff\xff\xff\x64\x00\xff\xff\xff\xff\xe2\x00\x68\x00\xe4\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xff\xff\xee\x00\xff\xff\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x91\x00\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\x54\x00\xff\xff\x56\x00\xff\xff\x64\x00\xff\xff\xee\x00\xff\xff\x68\x00\x5d\x00\x6a\x00\x6b\x00\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x64\x00\x74\x00\xff\xff\xff\xff\x68\x00\x78\x00\x6a\x00\x6b\x00\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\x91\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\x64\x00\xff\xff\xff\xff\xff\xff\x68\x00\xff\xff\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\x5d\x00\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xee\x00\x67\x00\xd5\x00\xd6\x00\x91\x00\xd8\x00\xd9\x00\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xe2\x00\xff\xff\xe4\x00\x78\x00\xff\xff\xff\xff\x7b\x00\x7c\x00\x01\x00\x02\x00\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\x16\x00\xff\xff\x94\x00\x95\x00\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x64\x00\xff\xff\x2c\x00\xff\xff\x68\x00\xff\xff\x6a\x00\x6b\x00\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\x3b\x00\x3c\x00\xff\xff\x64\x00\xe2\x00\xff\xff\xe4\x00\x68\x00\xff\xff\x6a\x00\x6b\x00\x64\x00\xff\xff\xff\xff\xff\xff\x68\x00\xee\x00\x6a\x00\x6b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x56\x00\x91\x00\x64\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5d\x00\x6a\x00\x6b\x00\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\x6e\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x91\x00\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\xff\xff\xff\xff\x7b\x00\x7c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x00\x90\x00\xff\xff\xff\xff\xff\xff\x94\x00\x95\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xee\x00\xff\xff\xff\xff\xd5\x00\xd6\x00\xff\xff\xd8\x00\xd9\x00\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xee\x00\xd5\x00\xd6\x00\x02\x00\xd8\x00\xd9\x00\xff\xff\xff\xff\xee\x00\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xe2\x00\xff\xff\xe4\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xee\x00\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x02\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x0a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\x65\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x6f\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\x7b\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\xff\xff\xff\xff\x65\x00\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\x7b\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x65\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7b\x00\x49\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\xff\xff\xff\xff\x65\x00\x02\x00\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6d\x00\x0a\x00\x6f\x00\x70\x00\x71\x00\x72\x00\xff\xff\x74\x00\xff\xff\x76\x00\x13\x00\x78\x00\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x02\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x0a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\x2f\x00\xff\xff\xff\xff\xff\xff\x13\x00\xff\xff\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\x2f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\xff\xff\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6c\x00\xff\xff\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\xff\xff\xff\xff\x65\x00\x02\x00\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\xff\xff\x77\x00\x78\x00\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\x48\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\x02\x00\xff\xff\xff\xff\x65\x00\x66\x00\x67\x00\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\x16\x00\x77\x00\x78\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\x61\x00\x02\x00\xff\xff\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\x16\x00\x77\x00\x78\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\x02\x00\xff\xff\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\x16\x00\x77\x00\x78\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\x61\x00\x02\x00\xff\xff\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\x16\x00\xff\xff\x78\x00\xff\xff\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\x73\x00\x74\x00\xff\xff\x16\x00\x77\x00\x78\x00\xff\xff\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\x57\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\x61\x00\x02\x00\xff\xff\xff\xff\x65\x00\x66\x00\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\x16\x00\xff\xff\x78\x00\xff\xff\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x50\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x57\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\xff\xff\x61\x00\xff\xff\xff\xff\xff\xff\x65\x00\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\x16\x00\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\x63\x00\xff\xff\x65\x00\x02\x00\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x57\x00\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\x02\x00\x2c\x00\x61\x00\xff\xff\xff\xff\xff\xff\x65\x00\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\x16\x00\x74\x00\xff\xff\xff\xff\x1a\x00\x78\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\xff\xff\xff\xff\x65\x00\x02\x00\xff\xff\x04\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x02\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\x74\x00\xff\xff\xff\xff\xff\xff\x78\x00\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x65\x00\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\x48\x00\xff\xff\x16\x00\x73\x00\xff\xff\xff\xff\x1a\x00\x77\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x02\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x65\x00\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\xff\xff\xff\xff\x16\x00\x73\x00\xff\xff\xff\xff\x1a\x00\x77\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x65\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\xff\xff\x49\x00\xff\xff\x73\x00\xff\xff\xff\xff\xff\xff\x77\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x55\x00\x56\x00\x57\x00\xff\xff\xff\xff\xff\xff\xff\xff\x5c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\x02\x00\xff\xff\xff\xff\x65\x00\x66\x00\x67\x00\xff\xff\xff\xff\x0a\x00\xff\xff\x6c\x00\xff\xff\xff\xff\x6f\x00\x70\x00\x71\x00\x72\x00\x13\x00\xff\xff\xff\xff\x16\x00\xff\xff\x18\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x02\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x0a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\xff\xff\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\x0a\x00\xff\xff\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\x6f\x00\x70\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x02\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x0a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\xff\xff\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\x0a\x00\xff\xff\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\x6f\x00\x70\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x02\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x0a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\xff\xff\xff\xff\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x61\x00\x0a\x00\xff\xff\xff\xff\x65\x00\xff\xff\x67\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\x6f\x00\x70\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x02\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x0a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x02\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x0a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\x6f\x00\x70\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x65\x00\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\x6f\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x02\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x0a\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x65\x00\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\x6f\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\x65\x00\xff\xff\x1a\x00\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x6f\x00\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\x02\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x65\x00\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\xff\xff\xff\xff\x16\x00\xff\xff\xff\xff\xff\xff\x1a\x00\x4a\x00\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\x23\x00\x24\x00\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\x02\x00\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0a\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x00\xff\xff\x6f\x00\xff\xff\xff\xff\xff\xff\x1c\x00\x1d\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\xff\xff\xff\xff\xff\x25\x00\x26\x00\x27\x00\x28\x00\x29\x00\xff\xff\xff\xff\x2c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x65\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x6f\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"#

happyTable :: HappyAddr
happyTable = HappyA# "\x00\x00\x21\x03\x71\x00\xab\x00\x75\x00\x72\x00\x72\x00\xb9\x04\x28\x04\xbb\x02\x95\x01\xe4\x04\x68\x02\xba\x01\xb7\x01\xdf\x00\xe5\x01\xce\x02\x97\x03\x03\x03\xac\x00\xb7\x01\x30\x02\x20\x04\x21\x04\x7c\x01\xbb\x01\x0d\x00\x98\x04\xb7\x01\xec\x04\x26\x04\x27\x04\x28\x04\xb4\x01\xed\x03\xd2\x03\xf6\x02\x0e\x00\xea\x04\x26\x04\x27\x04\x28\x04\x0d\x00\xfa\x04\xfb\x04\x28\x04\xb4\x02\xd1\x02\xa8\x01\x1d\xfd\xd1\x03\xd2\x03\x27\x01\x0e\x00\x25\x04\x26\x04\x27\x04\x28\x04\xf9\x02\xe3\x00\xd9\x01\x08\x03\xc0\x04\x28\x04\xdd\x01\x0f\x00\xda\x01\xca\x02\x1d\xfd\xb7\x01\xde\x01\x5a\x04\x28\x04\xc3\x01\x4f\x03\x02\x05\xca\x02\x1d\xfd\xef\x04\xe2\xfe\xc6\x03\x0f\x00\xe2\xfe\x7e\x01\xe6\x01\xc5\x00\xe5\x04\xbb\xfd\xb5\x02\xf0\x04\xbb\xfd\xcd\x03\xbb\xfd\x98\x03\x04\x03\xb5\x01\xdb\x01\x50\x03\x88\x01\xe6\x01\xdf\x01\x28\x01\xf7\x02\x9e\x00\x7a\x01\x57\x03\xbb\xfd\xde\x00\xbb\xfd\xb8\x01\xbb\xfd\x30\x02\xbb\xfd\x09\x03\x58\x03\xc4\x01\xb8\x01\xc8\x00\x99\x04\xbb\xfd\xbb\xfd\xbd\x02\xbe\x02\xdf\x00\xb8\x01\x9e\x00\xcf\x02\xe4\x00\xe5\x00\xfb\x02\xe6\x00\xe7\x00\x32\x02\x00\x02\x9e\x00\x9f\x02\xcf\x04\x9f\x00\xd8\x00\x58\x03\xe8\x00\xfc\x02\xe9\x00\x54\x02\x1d\xfd\x10\x00\xf2\x04\x64\x03\x11\x00\x22\x04\x12\x00\x13\x00\xea\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x87\xfe\x10\x00\xbb\xfd\xfd\x02\x11\x00\xb8\x01\x12\x00\x13\x00\x9e\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x9f\x04\xc4\x02\xa9\x01\xa9\x01\x69\x02\xc7\x00\xc7\x00\x69\x02\x96\x01\xd3\x03\x22\x00\x22\x00\x22\x00\x22\x00\x88\x01\x22\x00\xb5\x04\xee\x01\x97\x01\x98\x01\x5b\x04\xe1\x04\x9e\x00\x5c\x04\x5d\x04\xd3\x03\x1b\x00\xd1\x04\xd2\x04\x5d\x04\x54\x03\x22\x00\x54\x02\x1c\x00\x99\x01\x16\x01\x1d\x00\x17\x01\x05\x03\x54\x02\x54\x02\x9a\x01\x1b\x00\xff\x04\x5d\x04\x05\x03\x05\x03\x0f\x01\xe3\x04\x1c\x00\x56\x03\xbf\x02\x1d\x00\xb7\x01\xc7\x00\xb7\x01\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x29\x04\xb7\x00\x2a\x04\x2b\x04\x22\x00\xe1\xfe\x23\x00\x24\x00\xe1\xfe\xa9\x04\x25\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x73\x00\x73\x00\xc1\x04\xc2\x04\x1b\x01\x22\x00\xbf\x02\x23\x00\x24\x00\xc7\x00\x29\x04\x25\x00\x2a\x04\x2b\x04\x54\x02\x22\x00\x0d\x00\xc3\x04\xc4\x04\x29\x04\x22\x04\x2a\x04\x2b\x04\x29\x04\x70\x02\x2a\x04\x2b\x04\x0e\x00\x75\x01\xf5\x01\xf6\x01\x7b\x00\x7c\x00\x7d\x00\xd9\x00\x29\x04\xc5\x00\x2a\x04\x2b\x04\x9b\x04\x76\x01\x29\x04\x7e\x00\x2a\x04\x2b\x04\x23\x01\x7f\x00\x80\x00\x9f\x00\xbc\x04\x29\x04\x81\x00\x2a\x04\x2b\x04\xef\x01\x0f\x00\xe9\x00\xb7\x01\x75\x02\xda\x00\x71\x02\xbf\x02\xc5\x04\xc2\x04\xc7\x00\x22\x00\xea\x00\xd3\x01\xc8\x00\xd4\x01\x22\x00\x86\x04\x53\x02\xb8\x01\xd8\x03\xb8\x01\x0d\x00\xc3\x04\xc4\x04\xb8\x00\xde\xfe\xb9\x00\x82\x00\xde\xfe\x74\x04\x79\x02\x7e\x04\x0e\x00\x10\x01\xf5\x01\xf6\x01\x7b\x00\x7c\x00\x7d\x00\x76\x02\x8d\x03\xad\x01\x94\x04\xd8\x02\x11\x01\xd9\x03\x12\x01\x7e\x00\x7a\x03\xee\x01\x9b\x04\x7f\x00\x80\x00\xff\x01\x00\x02\x13\x01\x81\x00\x14\x01\x15\x01\x16\x01\x0f\x00\x17\x01\xae\x01\x9f\x02\x18\x01\x19\x01\x7a\x02\xf9\x02\xee\x01\xba\x04\x8e\x03\xd9\x02\x1d\x00\x83\x00\x84\x00\x85\x00\x1c\x00\xda\x02\xcb\x01\x1d\x00\x86\x00\x1c\x00\xcc\x01\x11\x00\x1d\x00\x87\x00\x13\x00\x82\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\xae\x01\x1c\x00\x85\x01\xb8\x01\x1d\x00\x57\x01\x20\x00\x78\x00\x23\x00\x24\x00\x57\x01\x20\x00\x78\x00\x22\x00\x9d\x02\x23\x00\x24\x00\xbd\x04\x22\x00\x9e\x04\x23\x00\x24\x00\x9f\x04\x1b\x03\xee\x01\x57\x01\x20\x00\x78\x00\x0d\x00\x6c\x04\xde\x04\xc5\x00\x9f\x04\x22\x00\x73\x04\x23\x00\x24\x00\x54\x02\x83\x00\x84\x00\x85\x00\xdd\xfe\x1b\x00\x55\x02\xdd\xfe\x86\x00\xa0\x04\x74\x04\x11\x00\x1c\x00\x87\x00\x13\x00\x1d\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\xb7\x01\x5b\x03\xee\x01\xc8\x00\x73\x02\x04\x02\xb1\x04\xef\x01\x06\x02\xe9\x00\x07\x02\x4b\x04\x1e\x00\x1f\x00\x20\x00\x21\x00\xe0\x04\x52\x02\x53\x02\xea\x00\x4c\x04\x22\x00\x1c\x00\x23\x00\x24\x00\x1d\x00\xef\x01\x25\x00\xe9\x00\x73\x02\x74\x02\x88\x00\x89\x00\x8a\x00\x8b\x00\x8a\x03\x09\x02\x0a\x02\xea\x00\xbe\x04\x0b\x02\x0c\x02\x1b\x00\x21\x02\xce\x00\xcf\x00\x57\x01\x20\x00\x78\x00\x1c\x00\x7d\x04\x59\x04\x1d\x00\x5a\x04\x22\x00\x74\x02\x23\x00\x24\x00\xed\x01\xee\x01\x1d\x01\x1e\x01\x1f\x01\x7e\x04\x51\x02\x52\x02\x53\x02\x20\x01\xb0\x03\xf0\x03\xe9\x00\xf1\x03\x1e\x00\x1f\x00\x20\x00\x21\x00\x51\x04\xef\x01\xdf\x00\xe9\x00\xea\x00\x22\x00\xfc\x04\x23\x00\x24\x00\x30\x02\x57\x04\x25\x00\x22\x01\xea\x00\x11\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\x0d\x00\xb8\x01\xfd\x04\x68\x01\x18\x00\x19\x00\x1a\x00\xca\x02\xcb\x02\xcc\x02\x20\x04\x0e\x00\x9f\x02\xf5\x01\xf6\x01\x7b\x00\x7c\x00\x7d\x00\xff\x01\x00\x02\xef\x01\xfd\x00\xe9\x00\xf7\x03\xf4\x01\xfe\x00\x7e\x00\x00\x05\xe3\x00\xff\x00\x7f\x00\x80\x00\xea\x00\xee\x02\xe7\x00\x81\x00\x69\x01\x0d\x00\x54\x02\x0f\x00\xfd\x03\xbd\x03\xf7\x03\x52\x04\x55\x02\xef\x02\xd5\x04\x01\x02\x0e\x00\x1b\x00\xf5\x01\xf6\x01\x7b\x00\x7c\x00\x7d\x00\xea\x00\x1c\x00\xad\x02\x54\x02\x1d\x00\x88\x01\x9c\x02\x40\x04\x7e\x00\x66\x04\x9e\x02\x82\x00\x7f\x00\x80\x00\x63\x04\xd0\x00\xd1\x00\x81\x00\xc4\x00\x9d\x02\xc5\x00\x0f\x00\xef\x01\x9f\x02\xe9\x00\x1f\x00\x20\x00\x78\x00\xe9\x01\x31\x01\x16\x01\x54\x02\x17\x01\x22\x00\xea\x00\x23\x00\x24\x00\x55\x02\xd6\x04\x25\x00\xc6\x00\xe4\x00\xe5\x00\xc7\x00\xe6\x00\xe7\x00\xf7\x03\xba\x01\x82\x00\x22\x00\xdb\x04\x79\x04\xc8\x00\x1a\x03\xe8\x00\xe9\x00\xe9\x00\x83\x00\x84\x00\x85\x00\xbb\x01\xa3\x01\xa4\x01\xa5\x01\x86\x00\xea\x00\xea\x00\x11\x00\x64\x04\x87\x00\x13\x00\x9a\x01\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\xf7\x03\xbe\x03\xe7\x00\xf5\x03\x87\x04\xf6\x03\xa1\x04\xbb\x03\xbc\x03\xbd\x03\xee\x04\xbf\x03\xda\x03\xe9\x00\x83\x00\x84\x00\x85\x00\xa6\x01\x20\x00\x78\x00\x8f\x03\x86\x00\xdb\x03\xea\x00\x11\x00\x22\x00\x87\x00\x13\x00\x21\x02\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x95\x04\x96\x04\x5a\x02\xf7\x01\xcc\x00\x1b\x00\xd0\x00\xd1\x00\xdc\x00\xc4\x00\xce\x00\xc5\x00\x1c\x00\xfd\x00\xf7\x03\x1d\x00\xec\x03\xfe\x00\xf8\x03\x56\x00\xd5\x02\xff\x00\x22\x00\x7b\x04\xa1\x04\xbb\x03\xbc\x03\xbd\x03\xa2\x04\x1b\x01\xd6\x02\xc6\x00\x7f\x04\xbc\x02\xc7\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x22\x00\x22\x00\x80\x04\x1b\x00\xc8\x00\x22\x00\xaf\x02\x23\x00\x24\x00\xeb\xfe\x1c\x00\x25\x00\xeb\xfe\x1d\x00\xe6\x03\x88\x00\x89\x00\x8a\x00\x8b\x00\x37\x01\xe9\x01\x31\x01\x16\x01\x2f\x02\x17\x01\x38\x01\x30\x02\xea\x01\x19\x01\xbe\x03\xe7\x00\x23\x01\xcc\x01\x1e\x00\x1f\x00\x20\x00\x21\x00\xf4\x01\x92\x04\xbf\x03\x74\x03\xe9\x00\x22\x00\xc7\x00\x23\x00\x24\x00\x11\x00\x10\x01\x25\x00\x22\x00\x0d\x00\xea\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\x1d\x03\x1a\x00\x11\x01\x1e\x03\x12\x01\x0e\x00\x54\x02\xf5\x01\xf6\x01\x7b\x00\x7c\x00\x7d\x00\xd2\x02\x13\x01\xcb\x01\x14\x01\x15\x01\x16\x01\xcc\x01\x17\x01\x7e\x00\xf3\x03\x18\x01\x19\x01\x7f\x00\x80\x00\x63\x03\xbe\x03\xe7\x00\x81\x00\xf9\x04\x0d\x00\x22\x00\x0f\x00\x17\x02\x24\x00\xfa\x04\xbf\x03\x58\x02\xe9\x00\xe6\x00\xe7\x00\x0e\x00\x1b\x01\x1b\x00\x91\x03\x7b\x00\x7c\x00\x7d\x00\xea\x00\xcb\x03\x1c\x00\x0b\x04\xc7\x00\x1d\x00\x72\x03\xa5\x01\x7e\x00\x63\x03\x22\x00\x82\x00\x7f\x00\x80\x00\x16\x04\x22\x00\x17\x04\x81\x00\x64\x03\xd4\x00\xd1\x00\x0f\x00\xc4\x00\x37\x01\xc5\x00\x1d\x04\x57\x01\x20\x00\x78\x00\x38\x01\xbd\x01\x20\x00\x78\x00\x23\x04\x22\x00\x23\x01\x23\x00\x24\x00\x22\x00\x25\x01\x25\x00\xa6\x01\x20\x00\x78\x00\xc6\x00\x16\x02\x78\x00\xc7\x00\x82\x00\x22\x00\x0a\x04\xe7\x02\x22\x00\x22\x00\x17\x02\x24\x00\xc8\x00\x83\x00\x84\x00\x85\x00\x85\x04\xe5\x02\xe6\x02\xe7\x02\x86\x00\x53\x01\x86\x04\x11\x00\x1d\x00\x87\x00\x13\x00\x24\x04\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x10\x02\x1e\x04\xe7\x00\xf8\x01\x11\x02\x82\x04\xbb\x03\xbc\x03\xbd\x03\x47\x04\x54\x01\x20\x00\x78\x00\x13\x03\x16\x04\x83\x00\x84\x00\x85\x00\x22\x00\xe4\x01\x23\x00\x24\x00\x86\x00\xca\x01\x16\x01\x11\x00\x17\x01\x87\x00\x13\x00\x0d\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x2b\x02\x2c\x02\x2d\x02\x0e\x00\x19\x02\x1b\x00\x7a\x00\x7b\x00\x7c\x00\x7d\x00\xe4\x01\x9e\x00\x1c\x00\xa0\x00\xa1\x00\x1d\x00\xd2\x00\xd3\x00\x7e\x00\x24\x02\x78\x00\xa5\x02\x7f\x00\x80\x00\x1f\x02\xa6\x02\x22\x00\x81\x00\x17\x02\x24\x00\x38\x01\x0f\x00\x1d\x01\x1e\x01\x1f\x01\x1e\x00\x1f\x00\x20\x00\x21\x00\x20\x01\x17\x04\x1c\x04\x1b\x00\x1d\x04\x22\x00\x47\x02\x23\x00\x24\x00\x1d\x00\x1c\x00\x25\x00\xb8\x00\x1d\x00\xb9\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\x82\x00\x83\x03\x22\x01\xc1\x01\x20\x00\x78\x00\x24\x01\x86\x03\xbe\x03\xe7\x00\x48\x02\x22\x00\x92\x03\xc7\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\xbf\x03\x22\x00\xe9\x00\x23\x00\x24\x00\x22\x00\xa9\x02\x23\x00\x24\x00\xe3\x01\xaa\x02\x25\x00\xea\x00\xe4\x01\x93\x03\x88\x00\x89\x00\x8a\x00\x8b\x00\xfa\x03\xbb\x03\xbc\x03\xbd\x03\xdd\x04\x6b\x04\xc4\x01\x20\x00\x78\x00\x83\x00\x84\x00\x85\x00\xea\x01\x19\x01\x22\x00\x94\x03\x86\x00\xcc\x01\x9a\x03\x11\x00\x0d\x00\x87\x00\x13\x00\x9c\x03\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0e\x00\xb4\x00\xa6\x03\xad\x00\x7b\x00\x7c\x00\x7d\x00\xcc\x00\xa7\x03\xd4\x00\xd1\x00\x70\x04\xc4\x00\xce\x00\xc5\x00\x7e\x00\x3b\x04\x3c\x04\x3d\x04\x7f\x00\x80\x00\x3e\x04\x71\x04\x10\x02\x81\x00\x0d\x00\xfe\x00\x11\x02\x0f\x00\xad\x03\xff\x00\xbd\x00\x20\x00\x78\x00\xc6\x00\xb4\x03\x0e\x00\xc7\x00\xc6\x03\x22\x00\x15\x03\xe8\x01\x1b\x00\x22\x00\xe4\x01\x38\x01\xc8\x00\xff\x01\x00\x02\x1c\x00\x02\x04\x03\x04\x1d\x00\xc8\x03\xdf\x00\x82\x00\x6c\x04\x6d\x04\xc5\x00\xcf\x03\x81\x00\x30\x02\xdf\x03\x6e\x04\x0f\x00\xe6\x00\xe7\x00\xbe\x03\xe7\x00\x98\x02\x04\x04\x05\x04\x1e\x00\x1f\x00\x20\x00\x21\x00\xff\x01\xbf\x03\x6b\x02\xe9\x00\x38\x01\x22\x00\x6c\x02\x23\x00\x24\x00\x9a\x02\xaf\x03\x25\x00\xb0\x03\xea\x00\xc8\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\xa0\x02\xc0\x00\x20\x00\x78\x00\xe3\x00\xa2\x02\x83\x00\x84\x00\x85\x00\x22\x00\xdc\x03\x40\x01\xe5\x00\x86\x00\xe6\x00\xe7\x00\x11\x00\xa1\x02\x87\x00\x13\x00\xb0\x02\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x05\x01\x06\x01\x07\x01\x08\x01\xfc\x03\xbb\x03\xbc\x03\xbd\x03\xde\x03\x40\x01\xe5\x00\xb2\x02\xe6\x00\xe7\x00\x83\x00\x84\x00\x89\x02\x06\x04\x7e\x02\x40\x01\xe5\x00\x86\x00\xe6\x00\xe7\x00\x11\x00\x0d\x00\x8b\x02\x13\x00\xc8\x02\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x8c\x02\x0e\x00\x62\x02\x63\x02\x64\x02\x65\x02\x66\x02\x1b\x00\xb5\x02\xe4\x00\xe5\x00\xdf\x02\xe6\x00\xe7\x00\x1c\x00\x02\x04\x03\x04\x1d\x00\xe4\x02\xdf\x00\xca\x01\x16\x01\xe8\x00\x17\x01\xe9\x00\x81\x00\x87\x03\xcb\x01\x5e\x01\x0f\x00\xe8\x02\xcc\x01\x38\x01\x0c\x03\xea\x00\x04\x04\x09\x04\x1e\x00\x1f\x00\x20\x00\x21\x00\x2f\x03\xb6\x03\x1b\x00\xb7\x03\xd3\x01\x22\x00\xd4\x01\x23\x00\x24\x00\x1c\x00\x16\x03\x25\x00\x1d\x00\xe3\x03\xe4\x03\x88\x00\x89\x00\x8a\x00\x8b\x00\x50\x03\x7f\x02\x40\x01\xe5\x00\xe3\x00\xe6\x00\xe7\x00\xbe\x03\xe7\x00\x83\x02\x2c\x02\x2d\x02\xb4\x01\x1e\x00\x1f\x00\x20\x00\x21\x00\xbf\x03\xb3\x00\xe9\x00\xb4\x00\x4b\x01\x22\x00\x4c\x01\x23\x00\x24\x00\x6c\x02\x6d\x02\x25\x00\xea\x00\xb4\x00\xb5\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\x81\x02\x40\x01\xe5\x00\x54\x03\xe6\x00\xe7\x00\x83\x00\x84\x00\x89\x02\x06\x04\xb3\x00\xb2\x01\xb4\x00\x86\x00\xe8\x04\xb8\x01\x11\x00\x0d\x00\x8b\x02\x13\x00\xd1\x01\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x8c\x02\x0e\x00\xae\x02\xd1\x00\xe8\x01\xc4\x00\xfd\x01\xc5\x00\x0e\x02\xe4\x00\xe5\x00\x22\x02\xe6\x00\xe7\x00\x3a\x02\x02\x04\x03\x04\x0d\x00\x40\x02\xd5\x00\xd6\x00\x60\x02\xe8\x00\x66\x02\xe9\x00\x81\x00\x67\x02\xc6\x00\x0e\x00\x0f\x00\xc7\x00\x77\x01\x78\x01\x71\x02\xea\x00\xa4\x04\x22\x00\xb4\x00\x81\x01\xc8\x00\x0c\x04\x77\x02\xdf\x00\x1b\x00\x7a\x01\x78\x01\x5c\x02\x7a\x02\xe1\x00\xe2\x00\x1c\x00\x7b\x02\x81\x00\x1d\x00\x7c\x01\x78\x01\x0f\x00\x85\x02\x0d\x04\x0e\x04\xca\x02\xc8\x02\xb1\x00\x3f\x01\x40\x01\xe5\x00\xba\x00\xe6\x00\xe7\x00\x35\x04\x36\x04\x0e\x03\x0f\x03\x1e\x00\x1f\x00\x20\x00\x21\x00\x41\x01\xdc\x00\xe9\x00\x03\x01\x25\x01\x22\x00\x49\x01\x23\x00\x24\x00\x80\x01\xe3\x00\x25\x00\xea\x00\x89\x01\x93\x01\x88\x00\x89\x00\x8a\x00\x8b\x00\xa1\x00\xae\x00\x9f\x00\x02\x05\x9c\x03\x04\x05\x83\x00\x84\x00\x89\x02\x06\x04\xee\x04\x9c\x03\x9e\x00\x86\x00\xa8\x04\x9e\x03\x11\x00\xf2\x04\x8b\x02\x13\x00\xff\x04\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x8c\x02\x56\x00\xf8\x04\xcc\x04\x88\x04\x89\x04\x83\x00\x84\x00\x89\x02\x0f\x04\xcf\x04\x9f\x00\xce\x04\x86\x00\xda\x04\xdb\x04\x11\x00\x0d\x00\x8b\x02\x13\x00\xd1\x04\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x8c\x02\x0e\x00\x35\xfd\x9f\x00\xca\x02\xe4\x00\xe5\x00\xe7\x04\xe6\x00\xe7\x00\xe8\x04\xea\x04\xec\x04\x0c\x04\x9d\x04\xdf\x00\x1b\x00\xac\x04\xe8\x00\x5c\x02\xe9\x00\xe1\x00\xe2\x00\x1c\x00\x7f\xfd\x81\x00\x1d\x00\xae\x04\xaf\x04\x0f\x00\xea\x00\x0d\x04\x13\x04\xdf\x00\xb0\x04\xb1\x04\xb5\x04\x5c\x02\xc7\x04\xe1\x00\xe2\x00\xb3\x04\xc0\x04\x1b\x00\xc8\x04\xb4\x04\x1e\x00\x1f\x00\x20\x00\x21\x00\x1c\x00\x50\x04\x4e\x04\x1d\x00\x88\x01\x22\x00\xf9\x02\x23\x00\x24\x00\x57\x04\xe3\x00\x25\x00\x63\x04\x9c\x03\x66\x04\x88\x00\x89\x00\x8a\x00\x8b\x00\x7b\x04\x28\x01\x82\x04\x84\x04\x1e\x00\x1f\x00\x20\x00\x21\x00\x9e\x00\xe3\x00\x9f\x00\x91\x04\x94\x04\x22\x00\xa0\x02\x23\x00\x24\x00\xe8\x03\xe9\x03\x25\x00\xea\x03\xef\x03\xeb\x03\x88\x00\x89\x00\x8a\x00\x8b\x00\xf3\x03\x9f\x00\xfa\x03\x00\x04\x9c\x03\x01\x04\x83\x00\x84\x00\x89\x02\x0f\x04\xc3\x00\x9e\x00\xc4\x00\x86\x00\xc5\x00\x9c\x03\x11\x00\x0d\x00\x8b\x02\x13\x00\x9e\x03\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x8c\x02\x0e\x00\x2d\x04\x2e\x04\x37\x04\xe4\x00\xe5\x00\xc6\x00\xe6\x00\xe7\x00\xc7\x00\x2f\x04\x41\x04\x44\x04\x42\x04\x43\x04\x22\x00\x0d\x00\xe8\x00\xc8\x00\xe9\x00\x1b\x01\x47\x04\xe4\x00\xe5\x00\x81\x00\xe6\x00\xe7\x00\x0e\x00\x0f\x00\xea\x00\xb4\x01\x68\x03\x1d\x01\x1e\x01\x1f\x01\xe8\x00\x9f\x00\xe9\x00\x88\x02\x20\x01\x72\x03\xdf\x00\x1b\x00\x69\x03\x7c\x03\x81\x03\x85\x03\xea\x00\x30\x02\x1c\x00\x7f\x03\x81\x00\x1d\x00\x82\x03\x89\x03\x0f\x00\x9c\x01\x86\x03\x91\x03\x97\x03\x22\x01\x23\x01\x96\x03\x9c\x03\x9a\x03\x90\x02\x9e\x03\xa2\x03\xf9\x02\xa6\x03\xa9\x03\xaa\x03\x1e\x00\x1f\x00\x20\x00\x21\x00\xb8\x03\xab\x03\xb3\x03\xb9\x03\xca\x03\x22\x00\x59\xfd\x23\x00\x24\x00\x3e\xfd\xe3\x00\x25\x00\x57\xfd\xc5\x03\x58\xfd\x88\x00\x89\x00\x8a\x00\x8b\x00\xcd\x03\xd1\x03\xd7\x03\xdc\x03\xde\x03\x5b\x00\x83\x00\x84\x00\x89\x02\x8a\x02\xe1\x03\x97\x02\x9a\x02\x86\x00\xa0\x02\xa4\x02\x11\x00\xb7\x02\x8b\x02\x13\x00\xa8\x02\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x8c\x02\xab\x02\xac\x02\xb2\x02\x8b\x04\x89\x04\x83\x00\x84\x00\x89\x02\x8a\x02\xd8\x00\xc8\x02\xca\x02\x86\x00\xd0\x02\xd1\x02\x11\x00\x0d\x00\x8b\x02\x13\x00\xd4\x02\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x8c\x02\x0e\x00\xdb\x02\xe1\x02\xe4\x02\xe4\x00\xe5\x00\x31\x02\xe6\x00\xe7\x00\x32\x02\x00\x02\xd7\x02\x0c\x04\x8d\x02\x8e\x02\x8f\x02\xdf\x00\xe8\x00\x33\x02\xe9\x00\xdf\x02\xe3\x02\x1c\x00\x30\x02\x81\x00\x1d\x00\xca\x02\xea\x02\x0f\x00\xea\x00\xaa\x04\xfb\x02\xdf\x00\x02\x03\x03\x03\x0b\x03\x5c\x02\x0c\x03\xe1\x00\xe2\x00\x91\x02\x8e\x02\x8f\x02\x10\x03\x11\x03\x1e\x00\x1f\x00\x20\x00\x21\x00\x1c\x00\x12\x03\x18\x03\x1d\x00\x14\x03\x22\x00\x16\x03\x23\x00\x24\x00\x1a\x02\x1d\x03\x25\x00\xe3\x00\x1c\x02\x38\x01\x88\x00\x89\x00\x8a\x00\x8b\x00\x31\x03\x40\x03\x62\xfd\x3d\x03\x1e\x00\x1f\x00\x20\x00\x21\x00\x3e\x03\xe3\x00\x3f\x03\x42\x03\x43\x03\x22\x00\x44\x03\x23\x00\x24\x00\x45\x03\x46\x03\x25\x00\x47\x03\x52\x03\xb4\x01\x88\x00\x89\x00\x8a\x00\x8b\x00\x59\x03\x53\x03\x5a\x03\x5b\x03\x5d\x03\x66\x03\x83\x00\x84\x00\x89\x02\x0f\x04\x63\x03\x88\x01\xb4\x01\x86\x00\xbc\x01\xbd\x01\x11\x00\x0d\x00\x8b\x02\x13\x00\xc6\x01\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x8c\x02\x0e\x00\xc7\x01\xc8\x01\xce\x01\xc9\x01\xcf\x01\xe4\x00\xe5\x00\xd0\x01\xe6\x00\xe7\x00\xd7\x01\xd8\x01\xe0\x01\xe5\x01\xdc\x01\x0d\x00\xd7\x01\xec\x01\xe8\x00\xf2\x01\xe9\x00\xe4\x00\xe5\x00\x81\x00\xe6\x00\xe7\x00\x0e\x00\x0f\x00\xf3\x01\xf4\x01\xea\x00\x0e\x02\x96\x01\xfc\x01\xe8\x00\xfa\x01\xe9\x00\x8e\x04\x0d\x02\xfd\x01\xdf\x00\x1b\x00\x66\x03\x98\x01\x1a\x02\xfb\x01\xea\x00\x5f\x02\x1c\x00\x4e\xfd\x81\x00\x1d\x00\x1b\x02\x1c\x02\x0f\x00\x1e\x02\x21\x02\x22\x02\x99\x01\x16\x01\x28\x01\x17\x01\x3a\x02\x3c\x02\x8f\x04\x9a\x01\x42\x02\x43\x02\x44\x02\x45\x02\x57\x02\x1e\x00\x1f\x00\x20\x00\x21\x00\x58\x02\x5f\x02\x6f\x02\x0d\x00\x77\x02\x22\x00\x66\x01\x23\x00\x24\x00\xfd\x00\xe3\x00\x25\x00\x81\x02\x83\x02\x85\x02\x88\x00\x89\x00\x8a\x00\x8b\x00\xff\xff\x87\x02\xff\xff\xbc\x00\xba\x00\xce\xfd\x83\x00\x84\x00\x89\x02\x8a\x02\xff\xff\xc0\x00\x09\x01\x86\x00\x74\x04\xd8\x00\x11\x00\x0a\x01\x8b\x02\x13\x00\x0b\x01\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x8c\x02\x3f\x01\xff\xff\xff\xff\x74\x01\x77\x01\x83\x00\x84\x00\x89\x02\x8a\x02\x7a\x01\x63\xfd\x8d\x01\x86\x00\x8e\x01\x8f\x01\x11\x00\x0d\x00\x8b\x02\x13\x00\x75\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x8c\x02\x0e\x00\x95\x01\xa3\x00\xa3\x00\xe4\x00\xe5\x00\x75\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x1b\x00\x00\x00\xe8\x00\x75\x04\xe9\x00\xe1\x00\xe2\x00\x1c\x00\x00\x00\x81\x00\x1d\x00\x00\x00\x00\x00\x0f\x00\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2f\x04\xbb\x03\xbc\x03\xbd\x03\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x1c\x00\x00\x00\x11\x00\x1d\x00\x00\x00\x22\x00\x0d\x00\x23\x00\x24\x00\x00\x00\xe3\x00\x25\x00\x56\x01\x1a\x00\x00\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x1f\x00\x20\x00\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x83\x00\x84\x00\x89\x02\xe2\x03\x1b\x00\x00\x00\x00\x00\x86\x00\x00\x00\x00\x00\x11\x00\x1c\x00\x8b\x02\x13\x00\x1d\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x8c\x02\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\xbe\x03\xe7\x00\x00\x00\x57\x01\x20\x00\x78\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xbf\x03\x22\x00\xe9\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\xea\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x6a\x04\x6b\x04\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x11\x00\x28\x01\x29\x01\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x01\x2b\x01\x1e\x00\x1f\x00\x20\x00\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x88\x00\x89\x00\x8a\x00\x8b\x00\x00\x00\x00\x00\x00\x00\x0d\x00\xba\x03\xbb\x03\xbc\x03\xbd\x03\x00\x00\xc7\x03\xbb\x03\xbc\x03\xbd\x03\x1b\x00\x00\x00\x43\x01\x00\x00\x44\x01\x00\x00\x45\x01\x1c\x00\x46\x01\x7e\x04\x1d\x00\x00\x00\x2c\x01\x6c\x04\x6d\x04\xc5\x00\x00\x00\xfd\x00\x00\x00\x00\x00\x6e\x04\xfe\x00\xe6\x00\xe7\x00\x2d\x01\xff\x00\x2e\x01\x00\x00\x00\x00\x00\x00\x0d\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x2f\x01\x30\x01\x31\x01\x32\x01\x22\x00\x17\x01\x23\x00\x24\x00\x33\x01\x19\x01\x25\x00\x00\x00\xc8\x00\x34\x01\x11\x00\x28\x01\x29\x01\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x2a\x01\x2b\x01\x00\x00\x5c\x02\xcc\x00\xe1\x00\xe2\x00\x00\x00\xbc\x04\x00\x00\xce\x00\x6d\x01\x6e\x01\x6f\x01\x70\x01\x00\x00\x71\x01\x00\x00\xc4\x00\x56\x00\xc5\x00\x00\x00\x00\x00\x58\x00\xbe\x03\xe7\x00\x00\x00\x5a\x00\x00\x00\xbe\x03\xe7\x00\x00\x00\x00\x00\x00\x00\xbf\x03\x00\x00\xe9\x00\x00\x00\x1b\x00\xbf\x03\xc6\x00\xe9\x00\x00\x00\xc7\x00\xe3\x00\x1c\x00\xea\x00\x11\x00\x1d\x00\x22\x00\x2c\x01\xea\x00\xc8\x00\x00\x00\x66\x01\x17\x00\x18\x00\x19\x00\x1a\x00\x5b\x02\x00\x00\x00\x00\x2d\x01\x00\x00\x2e\x01\x00\x00\x00\x00\x00\x00\x0d\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x2f\x01\x30\x01\x5e\x01\x32\x01\x22\x00\x17\x01\x23\x00\x24\x00\x33\x01\x19\x01\x25\x00\x00\x00\x00\x00\x34\x01\x11\x00\x28\x01\x29\x01\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x58\x01\x59\x01\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\xe4\x00\xe5\x00\xdf\x00\xe6\x00\xe7\x00\x00\x00\x5c\x02\x00\x00\xe1\x00\xe2\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x0d\x00\xea\x00\x00\x00\x00\x00\x22\x00\x1b\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x2c\x01\x00\x00\xa3\x04\x00\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x71\x04\x6b\x04\x2d\x01\x00\x00\x2e\x01\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x2f\x01\x5a\x01\x00\x00\x5b\x01\x22\x00\x17\x01\x23\x00\x24\x00\x18\x01\x19\x01\x25\x00\x00\x00\x00\x00\x5c\x01\x11\x00\xb7\x02\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x00\x00\x0c\x01\x0d\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x32\x03\x33\x03\x34\x03\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x35\x03\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x1b\x00\x00\x00\x6c\x04\x6d\x04\xc5\x00\xe3\x00\x00\x00\x1c\x00\xea\x00\x6e\x04\x1d\x00\xe6\x00\xe7\x00\x00\x00\x11\x00\x28\x01\x29\x01\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\xdf\x00\x00\x00\x00\x00\x5f\x01\x1f\x00\x20\x00\x78\x00\x30\x02\x60\x01\xc8\x00\x00\x00\x00\x00\x22\x00\x61\x01\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x36\x03\x00\x00\x00\x00\x00\x00\x1b\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1d\x01\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x1b\x00\x20\x01\x00\x00\x00\x00\xe3\x00\xe4\x00\xe5\x00\x1c\x00\xe6\x00\xe7\x00\x1d\x00\x37\x01\x2c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x38\x01\xe8\x00\x00\x00\xe9\x00\x00\x00\x22\x01\x23\x01\x2d\x01\x0d\x00\x2e\x01\x00\x00\x00\x00\x00\x00\xea\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x2f\x01\x5a\x01\x00\x00\x5b\x01\x22\x00\x17\x01\x23\x00\x24\x00\x18\x01\x19\x01\x25\x00\x11\x00\x28\x01\x29\x01\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x62\x01\x00\x00\x00\x00\xcc\x00\x63\x01\x64\x01\x00\x00\x70\x04\x00\x00\xce\x00\xe4\x00\xe5\x00\x5d\x03\xe6\x00\xe7\x00\x32\x02\x00\x02\x00\x00\x71\x04\x00\x00\x00\x00\x00\x00\xfe\x00\xe8\x00\x5e\x03\xe9\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\xfd\x02\x00\x00\x1d\x00\x11\x00\x2c\x01\x78\x04\x13\x00\x06\x03\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x2d\x01\x0d\x00\x2e\x01\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x2f\x01\x5a\x01\x00\x00\x5b\x01\x22\x00\x17\x01\x23\x00\x24\x00\x18\x01\x19\x01\x25\x00\x00\x00\x11\x00\x28\x01\x29\x01\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x01\xdf\x00\x1b\x00\x20\x03\x0c\x01\x0d\x01\x00\x00\x0e\x01\xe2\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x10\x01\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x1f\x02\x22\x00\x12\x01\x23\x00\x24\x00\x1c\x00\xe3\x00\x25\x00\x1d\x00\x00\x00\x2c\x01\x13\x01\x00\x00\x14\x01\x15\x01\x16\x01\x00\x00\x17\x01\x00\x00\x00\x00\x18\x01\x19\x01\x2d\x01\x0d\x00\x2e\x01\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x2f\x01\x5a\x01\x00\x00\x5b\x01\x22\x00\x17\x01\x23\x00\x24\x00\x18\x01\x19\x01\x25\x00\x11\x00\x28\x01\x29\x01\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x01\x00\x00\x00\x00\xe1\x01\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x1b\x00\xea\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x1c\x00\x00\x00\x42\x00\x1d\x00\x11\x00\x2c\x01\xd5\x03\x13\x00\x23\x02\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x2d\x01\x0d\x00\x2e\x01\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x2f\x01\x5a\x01\x00\x00\x5b\x01\x22\x00\x17\x01\x23\x00\x24\x00\x18\x01\x19\x01\x25\x00\x00\x00\x11\x00\x28\x01\x29\x01\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x73\x03\xdf\x00\x1b\x00\x00\x00\x0c\x01\x0d\x01\x00\x00\x0e\x01\xe2\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x10\x01\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x11\x01\x22\x00\x12\x01\x23\x00\x24\x00\x1c\x00\xe3\x00\x25\x00\x1d\x00\x00\x00\x2c\x01\x13\x01\x00\x00\x14\x01\x15\x01\x16\x01\x00\x00\x17\x01\x00\x00\x00\x00\x18\x01\x19\x01\x2d\x01\x0d\x00\x2e\x01\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x2f\x01\x5a\x01\x00\x00\x5b\x01\x22\x00\x17\x01\x23\x00\x24\x00\x18\x01\x19\x01\x25\x00\x11\x00\x28\x01\x29\x01\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\x03\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x1b\x00\xea\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x1c\x00\x00\x00\x42\x00\x1d\x00\x11\x00\x2c\x01\x1c\x02\x13\x00\x0b\x01\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x2d\x01\x0d\x00\x2e\x01\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x2f\x01\x5a\x01\x00\x00\x5b\x01\x22\x00\x17\x01\x23\x00\x24\x00\x18\x01\x19\x01\x25\x00\x00\x00\x11\x00\x22\x03\x29\x01\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x23\x03\xdf\x00\x1b\x00\xf1\x01\x0c\x01\x0d\x01\x00\x00\x0e\x01\xe2\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x1c\x00\xe3\x00\x25\x00\x1d\x00\x00\x00\x2c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2d\x01\x0d\x00\x2e\x01\x4c\x04\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x2f\x01\x5a\x01\x00\x00\x5b\x01\x22\x00\x17\x01\x23\x00\x24\x00\x18\x01\x19\x01\x25\x00\x11\x00\x2b\x03\x29\x01\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x3b\x03\x70\x01\x00\x00\x71\x01\x23\x03\xc4\x00\xdf\x00\xc5\x00\x00\x00\x48\x03\x49\x03\x00\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc6\x00\x00\x00\x00\x00\xc7\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x22\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x1b\x00\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\xe3\x00\x1d\x00\x11\x00\x2c\x01\x51\x01\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x2d\x01\x0d\x00\x2e\x01\x47\x03\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x2f\x01\x5a\x01\x00\x00\x5b\x01\x22\x00\x17\x01\x23\x00\x24\x00\x18\x01\x19\x01\x25\x00\x00\x00\x11\x00\x28\x01\x29\x01\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2e\x03\xdf\x00\x1b\x00\x00\x00\x48\x03\x49\x03\x00\x00\x0e\x01\xe2\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x0d\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\xea\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x1c\x00\xe3\x00\x25\x00\x1d\x00\x00\x00\x2c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2d\x01\x00\x00\x2e\x01\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x2f\x01\x5a\x01\x00\x00\x5b\x01\x22\x00\x17\x01\x23\x00\x24\x00\x18\x01\x19\x01\x25\x00\x11\x00\xa3\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\xdf\x00\x8f\x03\x15\x04\x26\x02\x4e\x01\x9f\x01\x27\x02\xe2\x00\xdf\x00\x00\x00\x24\x03\x25\x03\x26\x03\x27\x03\xf3\x04\xe2\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x00\x00\x00\x00\x00\xe8\x00\x0d\x00\xe9\x00\x00\x00\x00\x00\x28\x03\x00\x00\xf4\x04\x00\x00\x00\x00\x00\x00\x1b\x00\xea\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\xe3\x00\x11\x00\xa3\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x2c\x03\x25\x03\x26\x03\x27\x03\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x28\x02\xb6\x04\x00\x00\x28\x03\xb7\x04\xe2\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x1c\x00\xe6\x00\xe7\x00\x1d\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\xe8\x00\xb8\x04\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\xea\x00\x1f\x00\x20\x00\x78\x00\xe3\x00\x00\x00\x00\x00\x00\x00\xea\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x11\x00\xa3\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x33\x04\x26\x03\x27\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\xb7\x02\x77\x00\x13\x00\xa4\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x28\x03\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x82\x03\x33\x03\x34\x03\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x35\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x1c\x00\x00\x00\x25\x00\x1d\x00\x11\x00\xa3\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x00\x00\x00\x00\x00\x00\x00\xe5\x03\x00\x00\x00\x00\x93\x02\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x4d\x02\x1c\x00\x4d\x01\x4e\x01\x1d\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x11\x00\xa3\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x00\x00\x00\x00\x00\x00\x00\x97\x02\x00\x00\x00\x00\x93\x02\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\xa3\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\xdf\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x4f\x01\xf5\x04\xe2\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\xf4\x02\xb0\x01\x25\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\xff\x01\x00\x02\x00\x00\xa4\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xb1\x01\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x1b\x00\x00\x00\x00\x00\xea\x00\xe3\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x01\x02\x00\x00\x00\x00\x00\x00\x11\x00\xb7\x02\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x38\x03\x33\x03\x34\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x35\x03\x11\x00\xa3\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x1b\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\xaf\x01\xb0\x01\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x00\xea\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\xb1\x01\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x1b\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x11\x00\xa3\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x00\x00\x00\x00\x00\x00\x00\x92\x02\x00\x00\x00\x00\x93\x02\xa6\x00\x00\x00\xe2\x04\x00\x00\x00\x00\xdf\x00\x1b\x00\x9d\x01\x9e\x01\x00\x00\x9f\x01\xa0\x01\xe2\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\xa3\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\xe3\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x00\x00\x00\x00\x00\x00\x00\x95\x02\x00\x00\x00\x00\x93\x02\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x11\x00\xa3\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa1\x01\x00\x00\x1f\x00\x20\x00\x78\x00\x0e\x00\x00\x00\x31\x04\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\xe4\x00\xe5\x00\x25\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\xa4\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x32\x04\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x1b\x00\xbe\x01\x00\x00\xea\x00\x00\x00\xdf\x00\xbf\x01\x1c\x00\x4d\x01\x4e\x01\x1d\x00\x0e\x01\xe2\x00\x67\x04\xdc\x04\x11\x00\x82\x01\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x83\x01\x84\x01\x85\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x3d\x02\x00\x00\x4d\x01\x4e\x01\x1b\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x4b\x02\x1c\x00\x10\x00\x00\x00\x1d\x00\x11\x00\x00\x00\x12\x00\x13\x00\x1b\x01\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x1d\x01\x1e\x01\x1f\x01\x00\x00\x1f\x00\x20\x00\x78\x00\x20\x01\x4f\x01\x00\x00\x00\x00\x00\x00\x22\x00\xe3\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x21\x01\xe6\x00\xe7\x00\x00\x00\x22\x01\x23\x01\x00\x00\x00\x00\x24\x01\x25\x01\x00\x00\xe8\x00\x00\x00\xe9\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x1c\x00\x00\x00\xea\x00\x1d\x00\xf6\x04\xe2\x00\x00\x00\x00\x00\x11\x00\xa3\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x4f\x01\x1e\x00\x1f\x00\x20\x00\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\xe4\x00\xe5\x00\x25\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\xa5\x00\xa6\x00\x00\x00\x00\x00\x00\x00\x0d\x00\xea\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\xfd\x01\x00\x00\x1d\x00\x11\x00\xa3\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x1b\x01\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x04\x02\x00\x00\x00\x00\x06\x02\x22\x00\x07\x02\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\xa4\x00\xe6\x00\xe7\x00\x00\x00\x37\x01\x00\x00\x00\x00\xaf\x00\xa6\x00\x00\x00\x38\x01\xe8\x00\x00\x00\xe9\x00\x1b\x00\x09\x02\xad\x04\x00\x00\x00\x00\x0b\x02\x0c\x02\x1c\x00\x00\x00\xea\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\xb7\x02\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x3a\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x35\x03\x11\x00\xa3\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x11\x00\xb7\x02\x77\x00\x13\x00\x0d\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\xa4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x77\x03\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x1b\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\xb8\x02\x00\x00\x00\x00\x25\x02\x9c\x01\x00\x00\x00\x00\xdf\x00\xbf\x01\x9d\x01\x26\x02\x4e\x01\x9f\x01\x27\x02\xe2\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x11\x00\xb7\x02\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\xcc\x04\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x28\x02\xba\x02\x44\x04\x45\x04\x00\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x1b\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x3a\x03\x6f\x01\x70\x01\x1b\x00\x71\x01\x00\x00\xc4\x00\xea\x00\xc5\x00\x00\x00\x1c\x00\x00\x00\xe3\x00\x1d\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\xc6\x00\x25\x00\x00\x00\xc7\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x22\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x22\x00\x0d\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x11\x00\xc9\x04\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x11\x00\x50\x04\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x0d\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x02\x00\x00\x04\x02\x05\x02\xe8\x00\x06\x02\xe9\x00\x07\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\xea\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x1c\x00\x08\x02\xa5\x04\x1d\x00\xe1\x00\xe2\x00\x00\x00\x38\x01\x1b\x00\x00\x00\x00\x00\x00\x00\x09\x02\x0a\x02\x00\x00\x1c\x00\x0b\x02\x0c\x02\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x1f\x00\x20\x00\x78\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x11\x00\x53\x04\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x11\x00\x54\x04\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x55\x04\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\xea\x00\x1d\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x1c\x00\x00\x00\x25\x00\x1d\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x11\x00\x91\x04\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x11\x00\x14\x04\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x30\x04\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\xbe\x01\x00\x00\x00\x00\x00\x00\xdf\x00\xbf\x01\x1c\x00\x4d\x01\x4e\x01\x1d\x00\x0e\x01\xe2\x00\x67\x04\x68\x04\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x1c\x00\x00\x00\x25\x00\x1d\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x0d\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x11\x00\x37\x04\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x11\x00\x38\x04\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x1b\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\xea\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x11\x00\x76\x03\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x11\x00\x78\x03\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x8a\x03\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x1c\x00\x00\x00\x25\x00\x1d\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x11\x00\xe1\x03\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x11\x00\xa6\x02\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\xf5\x02\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x7c\x03\x00\x00\x00\x00\x4e\x04\xdf\x00\xbf\x01\x1c\x00\x4d\x01\x4e\x01\x1d\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x1c\x00\x00\x00\x25\x00\x1d\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x0d\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x11\x00\x2a\x03\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x11\x00\x2d\x03\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x1b\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\xea\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x11\x00\x40\x03\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x11\x00\x4b\x03\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x4c\x03\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x1c\x00\x00\x00\x25\x00\x1d\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x11\x00\x11\x02\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x11\x00\x12\x02\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x13\x02\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x7c\x03\x00\x00\x00\x00\x7d\x03\xdf\x00\xbf\x01\x1c\x00\x4d\x01\x4e\x01\x1d\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x1c\x00\x00\x00\x25\x00\x1d\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x0d\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x11\x00\x14\x02\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x11\x00\x46\x02\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x1b\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\xea\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x11\x00\x87\x02\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x11\x00\x46\x01\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x47\x01\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x1c\x00\x00\x00\x25\x00\x1d\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x11\x00\x48\x01\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x11\x00\x52\x01\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x8a\x01\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x7c\x03\x00\x00\x00\x00\x7f\x03\xdf\x00\xbf\x01\x1c\x00\x4d\x01\x4e\x01\x1d\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x1c\x00\x00\x00\x25\x00\x1d\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x0d\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x11\x00\x90\x01\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x11\x00\x91\x01\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x1b\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\xea\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x11\x00\x76\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x11\x00\xaa\x00\x77\x00\x13\x00\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x2a\x02\x00\x00\x14\x00\x15\x00\x16\x00\x17\x00\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x05\x00\x00\x1b\x00\x00\x00\xdf\x00\xbf\x01\x00\x00\x4d\x01\x4e\x01\x1c\x00\x0e\x01\xe2\x00\x1d\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x68\x01\x18\x00\x19\x00\x1a\x00\x00\x00\x1c\x00\x0d\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x1c\x00\x00\x00\x25\x00\x1d\x00\xe3\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\xd4\x01\x31\x03\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x1b\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x0d\x00\x22\x00\x1d\x00\x23\x00\x24\x00\x00\x00\x11\x00\x25\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x68\x01\x18\x00\x19\x00\x1a\x00\x0d\x00\xce\x03\x18\x00\x19\x00\x1a\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x4f\x01\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\xd4\x01\xd5\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x0d\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\xea\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x1c\x00\x00\x00\x11\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x02\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x22\x00\x25\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\xab\x01\x18\x00\x19\x00\x1a\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x01\x18\x00\x19\x00\x1a\x00\x1b\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1d\x01\x1e\x01\x1f\x01\x22\x00\x00\x00\x23\x00\x24\x00\x20\x01\x00\x00\x25\x00\x00\x00\x00\x00\x1b\x00\x0d\x00\x00\x00\x00\x00\x11\x00\x37\x01\x0d\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x38\x01\x8f\x01\x18\x00\x19\x00\x1a\x00\x22\x01\x23\x01\x1b\x00\x00\x00\x24\x01\x25\x01\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x1b\x00\x23\x00\x24\x00\x11\x00\x00\x00\x25\x00\x0d\x00\x1c\x00\x11\x00\x00\x00\x1d\x00\x7c\x02\x18\x00\x19\x00\x1a\x00\x1b\x01\x7d\x02\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1d\x01\x1e\x01\x1f\x01\x00\x00\x1f\x00\x20\x00\x78\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x21\x01\x00\x00\x00\x00\x00\x00\x22\x01\x23\x01\x1b\x00\x00\x00\x24\x01\x25\x01\x00\x00\x1b\x00\x0d\x00\x1c\x00\x11\x00\x00\x00\x1d\x00\x00\x00\x1c\x00\x11\x00\x00\x00\x1d\x00\xb0\x00\x18\x00\x19\x00\x1a\x00\x00\x00\xbc\x00\x18\x00\x19\x00\x1a\x00\xed\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x22\x00\x25\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x11\x00\x1d\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x67\x01\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x22\x00\x25\x00\x23\x00\x24\x00\x00\x00\x11\x00\x25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7d\x01\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x1b\x01\x3a\x01\x1d\x00\x7f\x01\x18\x00\x19\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1d\x01\x1e\x01\x1f\x01\x3b\x01\x3c\x01\x3d\x01\x3e\x01\x20\x01\x00\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x1b\x00\x23\x00\x24\x00\x00\x00\x21\x01\x25\x00\x00\x00\x1c\x00\x22\x01\x23\x01\x1d\x00\x11\x00\x24\x01\x25\x01\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x8f\x01\x18\x00\x19\x00\x1a\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x1d\x00\xdf\x00\x00\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x6c\x03\xe2\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\xdf\x00\x1f\x00\x20\x00\x78\x00\xa7\x04\x00\x00\xe1\x00\xe2\x00\x00\x00\x22\x00\x00\x00\x23\x00\x24\x00\x00\x00\x00\x00\x25\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\xe3\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb7\x01\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\xe3\x00\x2b\x00\x2c\x00\x00\x00\x1f\x00\x20\x00\x78\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x22\x00\x31\x00\x23\x00\x24\x00\x00\x00\x32\x00\x25\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x4c\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x4d\x00\xea\x00\x00\x00\x4e\x00\xba\x02\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\xb8\x01\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\xea\x00\x52\x00\x00\x00\x53\x00\x00\x00\x38\x03\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x87\x01\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x1b\x01\xa7\x04\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1d\x01\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x88\x01\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x21\x01\x00\x00\x00\x00\x00\x00\x22\x01\x23\x01\x00\x00\x89\x01\x24\x01\x25\x01\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\xcb\x04\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\xc9\x01\x6f\x01\x70\x01\x00\x00\x71\x01\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\xc6\x00\x00\x00\x00\x00\xc7\x00\x00\x00\x00\x00\x00\x00\xca\x01\x16\x01\x22\x00\x17\x01\x4f\x00\xc8\x00\x50\x00\xcb\x01\x7a\x00\x00\x00\x52\x00\xcc\x01\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x3a\x04\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x1b\x01\x44\x00\xec\x03\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x1d\x01\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x21\x01\x00\x00\x4e\x00\x00\x00\x22\x01\x23\x01\x00\x00\x00\x00\x24\x01\x25\x01\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x7a\x03\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x1b\x01\x1c\x01\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1d\x01\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x21\x01\x00\x00\x00\x00\x00\x00\x22\x01\x23\x01\x00\x00\x00\x00\x24\x01\x25\x01\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x4e\x03\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x1b\x01\x93\x01\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1d\x01\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x21\x01\x00\x00\x00\x00\x00\x00\x22\x01\x23\x01\x00\x00\x00\x00\x24\x01\x25\x01\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x8c\x01\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x47\x02\x00\x00\x00\x00\x1d\x00\xdf\x00\x6a\x03\x00\x00\x00\x00\xc8\x04\x00\x00\xe1\x00\xe2\x00\x00\x00\x00\x00\x00\x00\x6b\x03\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x48\x02\x00\x00\x4d\x00\xc7\x00\x00\x00\x4e\x00\x00\x00\x99\x01\x16\x01\x22\x00\x17\x01\x23\x00\x24\x00\x18\x01\x19\x01\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x6b\x01\x27\x00\x28\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x2b\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xe4\x00\xe5\x00\x42\x00\xe6\x00\xe7\x00\x1b\x01\x1c\x01\xfc\xfe\x00\x00\x00\x00\xfc\xfe\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x1d\x01\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x6c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x21\x01\x00\x00\x00\x00\x6d\x01\x22\x01\x23\x01\x00\x00\x00\x00\x24\x01\x25\x01\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\xa3\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x91\x00\x30\x00\x00\x00\x92\x00\x00\x00\x31\x00\x00\x00\x93\x00\x00\x00\x32\x00\x94\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x95\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00\x96\x00\x48\x00\x49\x00\x4a\x00\x97\x00\x98\x00\x00\x00\x00\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x9d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x51\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x8d\x00\x8e\x00\x8f\x00\x90\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x91\x00\x30\x00\x00\x00\x92\x00\x00\x00\x31\x00\x00\x00\x93\x00\x00\x00\x32\x00\x94\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x95\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00\x96\x00\x48\x00\x49\x00\x4a\x00\x97\x00\x98\x00\x00\x00\x00\x00\x99\x00\x9a\x00\x9b\x00\x9c\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x9d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x51\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x08\x04\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x00\x00\x92\x00\x00\x00\x31\x00\x00\x00\x09\x04\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x95\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x47\x02\x00\x00\x00\x00\x1d\x00\x00\x00\x9e\x03\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9f\x03\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x02\x4d\x00\x00\x00\xc7\x00\x4e\x00\x9d\x00\x00\x00\x99\x01\x16\x01\x22\x00\x17\x01\x23\x00\x24\x00\x18\x01\x19\x01\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x51\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x11\x04\x12\x04\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x13\x04\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x95\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x47\x02\x00\x00\x00\x00\x1d\x00\x00\x00\xeb\x02\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\x02\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x02\x4d\x00\x00\x00\xc7\x00\x4e\x00\x9d\x00\x00\x00\x99\x01\x16\x01\x22\x00\x17\x01\x23\x00\x24\x00\x18\x01\x19\x01\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x51\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x08\x04\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x00\x00\x92\x00\x00\x00\x31\x00\x00\x00\x09\x04\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x95\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x9d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x51\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x11\x04\x12\x04\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x13\x04\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x95\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x9d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x51\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x95\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x9d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x51\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x9e\x00\x9f\x00\xa0\x00\xa1\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\xe3\x01\x53\x00\x00\x00\x00\x00\xe4\x01\x39\x01\x54\x00\x55\x00\x56\x00\x22\x01\x23\x01\x57\x00\x58\x00\x24\x01\x25\x01\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x19\x02\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\xe4\x01\x39\x01\x54\x00\x55\x00\x56\x00\x22\x01\x23\x01\x57\x00\x58\x00\x24\x01\x25\x01\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x36\x01\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x37\x01\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x38\x01\x39\x01\x54\x00\x55\x00\x56\x00\x22\x01\x23\x01\x57\x00\x58\x00\x24\x01\x25\x01\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x5e\x01\x53\x00\x00\x00\x00\x00\x38\x01\x39\x01\x54\x00\x55\x00\x56\x00\x22\x01\x23\x01\x57\x00\x58\x00\x24\x01\x25\x01\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x36\x01\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x37\x01\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x38\x01\x39\x01\x54\x00\x55\x00\x56\x00\x22\x01\x23\x01\x57\x00\x58\x00\x24\x01\x25\x01\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\xe4\x01\x39\x01\x54\x00\x55\x00\x56\x00\x22\x01\x23\x01\x57\x00\x58\x00\x24\x01\x25\x01\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x66\x01\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x39\x01\x54\x00\x55\x00\x56\x00\x22\x01\x23\x01\x57\x00\x58\x00\x24\x01\x25\x01\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x39\x01\x54\x00\x55\x00\x56\x00\x22\x01\x23\x01\x57\x00\x58\x00\x24\x01\x25\x01\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x2d\x00\x2e\x00\x2f\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x51\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\xa9\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x95\x02\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\xba\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3a\x03\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x38\x03\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\xa9\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x95\x02\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x00\x00\x00\x00\x00\x00\x31\x00\x2a\x03\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x00\x00\x00\x00\x19\x04\x00\x00\xe1\x00\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\xba\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\xe3\x00\x38\x03\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x22\xfe\x22\xfe\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x22\xfe\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\xfe\x00\x00\x00\x00\x00\x00\x22\xfe\x00\x00\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x00\x00\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\xe4\x00\xe5\x00\x22\xfe\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\xfe\x22\xfe\x22\xfe\x00\x00\x00\x00\x22\xfe\x00\x00\x00\x00\x00\x00\x22\xfe\x00\x00\x00\x00\x22\xfe\x22\xfe\x22\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x22\xfe\x22\xfe\x00\x00\x00\x00\x00\x00\x22\xfe\x00\x00\x22\xfe\x00\x00\x22\xfe\x00\x00\x22\xfe\x00\x00\x22\xfe\x00\x00\x00\x00\x00\x00\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x00\x00\x22\xfe\x00\x00\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x22\xfe\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x00\x00\x00\x00\x00\x00\x31\x00\x2a\x03\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\xa9\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\xba\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\xba\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x8c\x03\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\x00\x00\x00\x00\x4e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x00\x00\x00\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x00\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x27\x00\x28\x00\x29\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2a\x00\x00\x00\x2b\x00\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x39\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x41\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x48\x00\x49\x00\x4a\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x00\x00\x00\x00\x1a\x04\x00\x00\xe1\x00\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x00\xbe\x01\x00\x00\x4e\x00\x00\x00\xdf\x00\xbf\x01\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\xe1\x02\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\xe3\x00\x27\x00\x28\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x2b\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xe4\x00\xe5\x00\x42\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x01\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\xdf\x00\x00\x00\x00\x00\x00\x00\x48\x04\x00\x00\xe1\x00\xe2\x00\xe8\x00\x4d\x00\xe9\x00\x00\x00\x00\x00\x6d\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\xe3\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x27\x00\x28\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x2b\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x00\x00\xe8\x00\x49\x04\xe9\x00\xe1\x00\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x4d\x00\xbe\x01\x00\x00\x00\x00\x00\x00\xdf\x00\xbf\x01\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\xc0\x01\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\xe3\x00\x27\x00\x28\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x2b\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x01\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\xea\x00\xe6\x00\xe7\x00\xdf\x00\x00\x00\x00\x00\x00\x00\x6e\x03\x00\x00\xe1\x00\xe2\x00\xe8\x00\x4d\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\xe3\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x27\x00\x28\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x2b\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x00\x00\xe8\x00\x6f\x03\xe9\x00\xe1\x00\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xbe\x01\x00\x00\x00\x00\x00\x00\xdf\x00\xbf\x01\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x45\x02\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x20\x03\x00\x00\x00\x00\xe3\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\xe3\x00\x27\x00\x28\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x2b\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x01\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\xea\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x4d\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\x27\x00\x28\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x2b\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x04\x00\x00\x00\x00\x00\x00\xdf\x00\xbf\x01\x00\x00\x4d\x01\x4e\x01\xdf\x00\x0e\x01\xe2\x00\x00\x00\x70\x03\x00\x00\xe1\x00\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4f\x00\x00\x00\x50\x00\x00\x00\x7a\x00\x00\x00\x52\x00\x00\x00\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x54\x00\x55\x00\x56\x00\xe3\x00\x00\x00\x57\x00\x58\x00\x00\x00\xe3\x00\x59\x00\x5a\x00\x5b\x00\x5c\x00\x5d\x00\x5e\x00\x5f\x00\x60\x00\x61\x00\x62\x00\x63\x00\x64\x00\x65\x00\x00\x00\xec\x00\x28\x00\x00\x00\x66\x00\x67\x00\x68\x00\x69\x00\x00\x00\x6a\x00\x2b\x00\x6b\x00\x6c\x00\x6d\x00\x6e\x00\x6f\x00\x70\x00\x71\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x4f\x01\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\xf3\x00\xf4\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\xe3\xfe\x00\x00\x00\x00\xe3\xfe\xea\x00\xff\x02\x00\x00\x00\x03\x00\x00\xe4\xfe\x06\x02\xf5\x00\x07\x02\x00\x00\x00\x00\x00\x00\x00\x00\x37\x02\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x38\x02\x01\x03\xfc\x00\xfd\x00\x09\x02\x0a\x02\x00\x00\xfe\x00\x0b\x02\x0c\x02\x00\x00\xff\x00\x00\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9f\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x02\x00\x00\xf3\x00\xf4\x00\xdf\x00\xbf\x01\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x02\x00\x00\x04\x02\x05\x02\x00\x00\x06\x02\xf5\x00\x07\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x4f\x02\xfa\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x38\x01\x00\x00\xfb\x00\xfc\x00\xfd\x00\x09\x02\x0a\x02\x00\x00\xfe\x00\x0b\x02\x0c\x02\x00\x00\xff\x00\x5b\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x4f\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x03\x00\x00\x61\x03\x00\x00\xe4\xfe\x06\x02\xf5\x00\x07\x02\x00\x00\x00\x00\x00\x00\x00\x00\x37\x02\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x38\x02\x62\x03\xfc\x00\xfd\x00\x09\x02\x0a\x02\x00\x00\xfe\x00\x0b\x02\x0c\x02\x00\x00\xff\x00\x00\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9f\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x02\x00\x00\xf3\x00\xf4\x00\xdf\x00\xbf\x01\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x8d\x04\x00\x00\x00\x00\xdf\x00\x00\x00\x9d\x01\x9e\x01\x00\x00\x9f\x01\xa0\x01\xe2\x00\x1d\x01\xdd\x02\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x37\x01\xfa\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x38\x01\x00\x00\xfb\x00\xfc\x00\xfd\x00\x22\x01\x23\x01\x00\x00\xfe\x00\x00\x00\x25\x01\x00\x00\xff\x00\x5b\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x4f\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\xa1\x01\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x35\x02\xe9\x00\x36\x02\x00\x00\xe4\xfe\x06\x02\xf5\x00\x07\x02\x00\x00\x00\x00\x00\x00\xea\x00\x37\x02\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x38\x02\x39\x02\xfc\x00\xfd\x00\x09\x02\x0a\x02\x00\x00\xfe\x00\x0b\x02\x0c\x02\x00\x00\xff\x00\x00\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x28\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x2b\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\xf3\x00\xf4\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x35\x02\x00\x00\x5e\x02\x00\x00\x00\x00\x06\x02\xf5\x00\x07\x02\xdf\x00\x00\x00\x00\x00\x00\x00\x37\x02\xf6\x00\xa0\x03\xe2\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\xb2\x03\x00\x00\x00\x00\x00\x00\x00\x00\x38\x02\x39\x02\xfc\x00\xfd\x00\x09\x02\x0a\x02\xdf\x00\xfe\x00\x0b\x02\x0c\x02\xa2\x03\xff\x00\xe1\x00\xe2\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x2b\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\xe3\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\xdf\x00\xdb\x02\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\xd8\x04\x00\x00\xe4\xfe\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\xea\x00\xfa\x00\xe4\x00\xe5\x00\xe3\x00\xe6\x00\xe7\x00\xd9\x04\xfb\x00\xfc\x00\xfd\x00\x00\x00\x23\x01\x00\x00\xfe\x00\xe8\x00\x00\x00\xe9\x00\xff\x00\x00\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x4f\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xca\x01\x16\x01\xea\x00\x17\x01\x00\x00\x00\x00\xea\x01\x19\x01\x00\x00\x00\x00\x00\x00\xcc\x01\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x4d\x02\x00\x00\x00\x00\x00\x00\x38\x01\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf1\x03\xf3\x00\xf4\x00\xdf\x00\x00\x00\x9d\x01\x9e\x01\x00\x00\x9f\x01\xa0\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x01\x75\x03\x00\x00\x00\x00\xdf\x00\x00\x00\x9d\x01\x9e\x01\x00\x00\x9f\x01\xa0\x01\xe2\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\xd9\x04\xfb\x00\xfc\x00\xfd\x00\x00\x00\x23\x01\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\xa1\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\xa1\x01\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x6a\x04\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9c\x01\xf3\x00\xf4\x00\xdf\x00\x00\x00\x9d\x01\x9e\x01\x00\x00\x9f\x01\xa0\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\xfe\x00\x00\x00\x00\xdf\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe5\xfe\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\xa1\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\xdf\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\xc6\x02\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xdf\x00\x18\x03\x69\x03\x26\x02\x4e\x01\x9f\x01\x27\x02\xe2\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x66\x01\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x28\x02\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x0d\x02\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x28\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x2b\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\xf3\x00\xf4\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\xdf\x00\xf1\x02\x6d\x03\x26\x02\x4e\x01\x9f\x01\x27\x02\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x0e\x02\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\xe3\x00\x00\x00\xff\x00\x5b\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\xed\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\xf1\x00\xf2\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x28\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\xdf\x00\xfe\x00\x00\x00\x00\x00\xa3\x03\xff\x00\xe1\x00\xe2\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\xe3\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\xdf\x00\x3d\x02\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\xdd\x02\x3f\x02\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x3d\x02\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\xf5\x00\x3e\x02\x3f\x02\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\xe4\x00\xe5\x00\xe3\x00\xe6\x00\xe7\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\xe8\x00\x00\x00\xe9\x00\xff\x00\x5b\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\xa3\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x4f\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x4f\x01\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\xdf\x00\x3d\x02\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x01\x04\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x3d\x02\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\xf5\x00\x00\x00\xb3\x03\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x77\x04\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x78\x04\x4f\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x4f\x01\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\xdf\x00\xfe\x00\x00\x00\x00\x00\xa4\x03\xff\x00\xe1\x00\xe2\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\xa3\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\xe3\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\xdf\x00\x3d\x02\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\xb9\x03\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x3d\x02\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\xf5\x00\x00\x00\xc3\x03\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\xe4\x00\xe5\x00\xe3\x00\xe6\x00\xe7\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\xe8\x00\x00\x00\xe9\x00\xff\x00\x5b\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x4f\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x4f\x01\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x2a\x02\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\xdf\x00\x99\x04\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\xf6\x03\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\xa3\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x4f\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x4f\x01\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\xdf\x00\x00\x00\x18\x04\x9e\x01\x00\x00\x9f\x01\xa0\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x15\x04\x9e\x01\x00\x00\x9f\x01\xa0\x01\xe2\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\xa3\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\xa1\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\xa1\x01\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\xdf\x00\x00\x00\x69\x03\x9e\x01\x00\x00\x9f\x01\xa0\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x6d\x03\x9e\x01\x00\x00\x9f\x01\xa0\x01\xe2\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x2a\x02\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\xa1\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\xa1\x01\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\xdf\x00\x8f\x03\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\xca\x03\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\xa3\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x4f\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x4f\x01\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\xdf\x00\x00\x00\xc5\x02\x9e\x01\x00\x00\x9f\x01\xa0\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\xf1\x02\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\xa3\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\xa1\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x4f\x01\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\xdf\x00\x18\x03\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x4f\x02\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x2a\x02\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x4f\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x4f\x01\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x51\x01\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\xdf\x00\x50\x02\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x4c\x01\x00\x00\x4d\x01\x4e\x01\x00\x00\x0e\x01\xe2\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x5b\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x4b\x03\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x4f\x01\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x4f\x01\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\xdf\x00\x00\x00\x00\x00\xe8\x00\xab\x03\xe9\x00\xe1\x00\xe2\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\xe3\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x8b\x04\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x00\xe8\x00\x00\x00\xe9\x00\xac\x03\x00\x00\xe1\x00\xe2\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\xe3\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x8d\x04\x00\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x00\x00\xe8\x00\xea\x02\xe9\x00\xe1\x00\xe2\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x00\x00\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\xe3\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\xe5\xfe\x00\x00\xf5\x00\x00\x00\xdf\x00\x00\x00\xea\x00\x00\x00\xf2\x02\xf6\x00\xe1\x00\xe2\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\xdf\x00\xfe\x00\x00\x00\x00\x00\xf3\x02\xff\x00\xe1\x00\xe2\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x4b\x03\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\xe3\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\xdf\x00\x00\x00\x00\x00\x00\x00\x19\x03\x00\x00\xe1\x00\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\xf6\x00\x00\x00\x00\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\xea\x00\xfa\x00\xe4\x00\xe5\x00\xe3\x00\xe6\x00\xe7\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\xe8\x00\x00\x00\xe9\x00\xff\x00\x00\x00\x00\x00\x00\x01\x01\x01\xec\x00\x28\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x31\x00\x00\x00\x70\x00\x71\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xdf\x00\x00\x00\x42\x00\x00\x00\x3c\x02\x00\x00\xe1\x00\xe2\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf3\x00\xf4\x00\x00\x00\xdf\x00\xe8\x00\x00\x00\xe9\x00\x5a\x02\x00\x00\xe1\x00\xe2\x00\xdf\x00\x00\x00\x00\x00\x00\x00\xe0\x00\xea\x00\xe1\x00\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf5\x00\xe3\x00\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x00\xf0\x02\xe2\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\xfb\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\xe3\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x01\x00\x00\x00\x00\x00\x00\x70\x00\x71\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\xea\x00\x00\x00\x00\x00\xe4\x00\xe5\x00\x00\x00\xe6\x00\xe7\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\xea\x00\xe4\x00\xe5\x00\x28\x00\xe6\x00\xe7\x00\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\xea\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x28\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x2b\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\xc1\x02\xc2\x02\xc3\x02\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\xab\x01\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x55\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\xc4\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\xc4\x02\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc4\x02\x1b\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1d\x01\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x4a\x02\x00\x00\x00\x00\x00\x00\x4b\x02\x28\x00\xce\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x02\x2b\x00\x55\x00\x56\x00\x22\x01\x23\x01\x00\x00\x58\x00\x00\x00\x25\x01\x5f\x04\x5a\x00\x00\x00\x31\x00\x00\x00\x60\x04\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x28\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x2b\x00\x00\x00\x42\x00\x00\x00\x00\x00\x61\x04\x00\x00\x00\x00\x00\x00\x5f\x04\x00\x00\x00\x00\x31\x00\x00\x00\x60\x04\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x61\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcc\x00\x00\x00\x00\x00\x00\x00\x56\x01\x00\x00\xce\x00\x00\x00\x00\x00\x00\x00\x00\x00\x62\x04\x00\x00\x00\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcc\x00\x00\x00\x00\x00\x00\x00\x56\x01\x28\x00\xce\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x00\x00\x59\x00\x5a\x00\x00\x00\x31\x00\x00\x00\x60\x04\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x60\x04\x00\x00\x32\x00\xd4\x04\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcc\x00\x28\x00\x00\x00\x00\x00\x56\x01\xd5\x04\xce\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x31\x00\x59\x00\x5a\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\xcc\x00\x28\x00\x00\x00\x00\x00\x56\x01\x00\x00\xce\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x31\x00\x59\x00\x5a\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcc\x00\x28\x00\x00\x00\x00\x00\x56\x01\x00\x00\xce\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x31\x00\x59\x00\x5a\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x4a\x02\x28\x00\x00\x00\x00\x00\x4b\x02\x00\x00\xce\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x56\x00\x00\x00\x00\x00\x00\x00\x58\x00\x00\x00\x31\x00\x00\x00\x5a\x00\x00\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x56\x00\x00\x00\x00\x00\x57\x00\x58\x00\x00\x00\x31\x00\x59\x00\x5a\x00\x00\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\xc1\x03\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\xc2\x03\x28\x00\x00\x00\x00\x00\xc3\x03\xfc\x03\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x31\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\xff\x03\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\xc1\x03\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00\xc2\x03\x00\x00\x00\x00\x00\x00\xc3\x03\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x31\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x43\x01\x00\x00\x44\x01\x00\x00\x45\x01\x28\x00\x46\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\xc1\x03\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x28\x00\x42\x00\xc2\x03\x00\x00\x00\x00\x00\x00\xc3\x03\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x31\x00\xfe\x00\x00\x00\x00\x00\x32\x00\xff\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\xc1\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x03\x00\x00\x00\x00\x00\x00\xc3\x03\x28\x00\x00\x00\xc2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\xfc\x00\xfd\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x31\x00\x00\x00\xc3\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x28\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x55\x00\x56\x00\x00\x00\x00\x00\x00\x00\x58\x00\x00\x00\x00\x00\x00\x00\x5a\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbf\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\xa8\x01\x00\x00\x31\x00\x57\x00\x00\x00\x00\x00\x32\x00\x59\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x28\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbf\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x00\x00\x00\x00\x31\x00\x57\x00\x00\x00\x00\x00\x32\x00\x59\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x00\x00\x1b\x01\x00\x00\x57\x00\x00\x00\x00\x00\x00\x00\x59\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1d\x01\x1e\x01\x1f\x01\x00\x00\x00\x00\x00\x00\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\xcc\x00\x28\x00\x00\x00\x00\x00\x73\x01\x37\x01\xce\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x38\x01\x00\x00\x00\x00\x55\x00\x56\x00\x22\x01\x23\x01\xca\x00\x00\x00\x00\x00\x31\x00\x00\x00\xcb\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x28\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x2b\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcc\x00\x00\x00\x00\x00\x00\x00\xcd\x00\x00\x00\xce\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x56\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcc\x00\x2b\x00\x00\x00\x00\x00\xcd\x00\x00\x00\xce\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x55\x00\x56\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x28\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x2b\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcc\x00\x00\x00\x00\x00\x00\x00\x73\x01\x00\x00\xce\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x56\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcc\x00\x2b\x00\x00\x00\x00\x00\xcd\x00\x00\x00\xce\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x55\x00\x56\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x28\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x2b\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcc\x00\x00\x00\x00\x00\x00\x00\xdc\x00\x00\x00\xce\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x56\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcc\x00\x2b\x00\x00\x00\x00\x00\x73\x01\x00\x00\xce\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x55\x00\x56\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x28\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x2b\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x28\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x2b\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x55\x00\x56\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd5\x03\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x55\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x28\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x2b\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\x55\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\xd5\x03\x00\x00\x32\x00\x00\x00\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x55\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xab\x01\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x00\x00\x00\x00\x31\x00\x00\x00\x00\x00\x00\x00\x32\x00\xbd\x01\x33\x00\x34\x00\x35\x00\x36\x00\x37\x00\x38\x00\x00\x00\x3a\x00\x3b\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x28\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00\x00\x00\x55\x00\x00\x00\x00\x00\x00\x00\x33\x00\x34\x00\x35\x00\xee\x00\xef\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x3d\x00\x3e\x00\x3f\x00\x40\x00\x00\x00\x00\x00\x42\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf1\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"#

happyReduceArr = Happy_Data_Array.array (12, 738) [
	(12 , happyReduce_12),
	(13 , happyReduce_13),
	(14 , happyReduce_14),
	(15 , happyReduce_15),
	(16 , happyReduce_16),
	(17 , happyReduce_17),
	(18 , happyReduce_18),
	(19 , happyReduce_19),
	(20 , happyReduce_20),
	(21 , happyReduce_21),
	(22 , happyReduce_22),
	(23 , happyReduce_23),
	(24 , happyReduce_24),
	(25 , happyReduce_25),
	(26 , happyReduce_26),
	(27 , happyReduce_27),
	(28 , happyReduce_28),
	(29 , happyReduce_29),
	(30 , happyReduce_30),
	(31 , happyReduce_31),
	(32 , happyReduce_32),
	(33 , happyReduce_33),
	(34 , happyReduce_34),
	(35 , happyReduce_35),
	(36 , happyReduce_36),
	(37 , happyReduce_37),
	(38 , happyReduce_38),
	(39 , happyReduce_39),
	(40 , happyReduce_40),
	(41 , happyReduce_41),
	(42 , happyReduce_42),
	(43 , happyReduce_43),
	(44 , happyReduce_44),
	(45 , happyReduce_45),
	(46 , happyReduce_46),
	(47 , happyReduce_47),
	(48 , happyReduce_48),
	(49 , happyReduce_49),
	(50 , happyReduce_50),
	(51 , happyReduce_51),
	(52 , happyReduce_52),
	(53 , happyReduce_53),
	(54 , happyReduce_54),
	(55 , happyReduce_55),
	(56 , happyReduce_56),
	(57 , happyReduce_57),
	(58 , happyReduce_58),
	(59 , happyReduce_59),
	(60 , happyReduce_60),
	(61 , happyReduce_61),
	(62 , happyReduce_62),
	(63 , happyReduce_63),
	(64 , happyReduce_64),
	(65 , happyReduce_65),
	(66 , happyReduce_66),
	(67 , happyReduce_67),
	(68 , happyReduce_68),
	(69 , happyReduce_69),
	(70 , happyReduce_70),
	(71 , happyReduce_71),
	(72 , happyReduce_72),
	(73 , happyReduce_73),
	(74 , happyReduce_74),
	(75 , happyReduce_75),
	(76 , happyReduce_76),
	(77 , happyReduce_77),
	(78 , happyReduce_78),
	(79 , happyReduce_79),
	(80 , happyReduce_80),
	(81 , happyReduce_81),
	(82 , happyReduce_82),
	(83 , happyReduce_83),
	(84 , happyReduce_84),
	(85 , happyReduce_85),
	(86 , happyReduce_86),
	(87 , happyReduce_87),
	(88 , happyReduce_88),
	(89 , happyReduce_89),
	(90 , happyReduce_90),
	(91 , happyReduce_91),
	(92 , happyReduce_92),
	(93 , happyReduce_93),
	(94 , happyReduce_94),
	(95 , happyReduce_95),
	(96 , happyReduce_96),
	(97 , happyReduce_97),
	(98 , happyReduce_98),
	(99 , happyReduce_99),
	(100 , happyReduce_100),
	(101 , happyReduce_101),
	(102 , happyReduce_102),
	(103 , happyReduce_103),
	(104 , happyReduce_104),
	(105 , happyReduce_105),
	(106 , happyReduce_106),
	(107 , happyReduce_107),
	(108 , happyReduce_108),
	(109 , happyReduce_109),
	(110 , happyReduce_110),
	(111 , happyReduce_111),
	(112 , happyReduce_112),
	(113 , happyReduce_113),
	(114 , happyReduce_114),
	(115 , happyReduce_115),
	(116 , happyReduce_116),
	(117 , happyReduce_117),
	(118 , happyReduce_118),
	(119 , happyReduce_119),
	(120 , happyReduce_120),
	(121 , happyReduce_121),
	(122 , happyReduce_122),
	(123 , happyReduce_123),
	(124 , happyReduce_124),
	(125 , happyReduce_125),
	(126 , happyReduce_126),
	(127 , happyReduce_127),
	(128 , happyReduce_128),
	(129 , happyReduce_129),
	(130 , happyReduce_130),
	(131 , happyReduce_131),
	(132 , happyReduce_132),
	(133 , happyReduce_133),
	(134 , happyReduce_134),
	(135 , happyReduce_135),
	(136 , happyReduce_136),
	(137 , happyReduce_137),
	(138 , happyReduce_138),
	(139 , happyReduce_139),
	(140 , happyReduce_140),
	(141 , happyReduce_141),
	(142 , happyReduce_142),
	(143 , happyReduce_143),
	(144 , happyReduce_144),
	(145 , happyReduce_145),
	(146 , happyReduce_146),
	(147 , happyReduce_147),
	(148 , happyReduce_148),
	(149 , happyReduce_149),
	(150 , happyReduce_150),
	(151 , happyReduce_151),
	(152 , happyReduce_152),
	(153 , happyReduce_153),
	(154 , happyReduce_154),
	(155 , happyReduce_155),
	(156 , happyReduce_156),
	(157 , happyReduce_157),
	(158 , happyReduce_158),
	(159 , happyReduce_159),
	(160 , happyReduce_160),
	(161 , happyReduce_161),
	(162 , happyReduce_162),
	(163 , happyReduce_163),
	(164 , happyReduce_164),
	(165 , happyReduce_165),
	(166 , happyReduce_166),
	(167 , happyReduce_167),
	(168 , happyReduce_168),
	(169 , happyReduce_169),
	(170 , happyReduce_170),
	(171 , happyReduce_171),
	(172 , happyReduce_172),
	(173 , happyReduce_173),
	(174 , happyReduce_174),
	(175 , happyReduce_175),
	(176 , happyReduce_176),
	(177 , happyReduce_177),
	(178 , happyReduce_178),
	(179 , happyReduce_179),
	(180 , happyReduce_180),
	(181 , happyReduce_181),
	(182 , happyReduce_182),
	(183 , happyReduce_183),
	(184 , happyReduce_184),
	(185 , happyReduce_185),
	(186 , happyReduce_186),
	(187 , happyReduce_187),
	(188 , happyReduce_188),
	(189 , happyReduce_189),
	(190 , happyReduce_190),
	(191 , happyReduce_191),
	(192 , happyReduce_192),
	(193 , happyReduce_193),
	(194 , happyReduce_194),
	(195 , happyReduce_195),
	(196 , happyReduce_196),
	(197 , happyReduce_197),
	(198 , happyReduce_198),
	(199 , happyReduce_199),
	(200 , happyReduce_200),
	(201 , happyReduce_201),
	(202 , happyReduce_202),
	(203 , happyReduce_203),
	(204 , happyReduce_204),
	(205 , happyReduce_205),
	(206 , happyReduce_206),
	(207 , happyReduce_207),
	(208 , happyReduce_208),
	(209 , happyReduce_209),
	(210 , happyReduce_210),
	(211 , happyReduce_211),
	(212 , happyReduce_212),
	(213 , happyReduce_213),
	(214 , happyReduce_214),
	(215 , happyReduce_215),
	(216 , happyReduce_216),
	(217 , happyReduce_217),
	(218 , happyReduce_218),
	(219 , happyReduce_219),
	(220 , happyReduce_220),
	(221 , happyReduce_221),
	(222 , happyReduce_222),
	(223 , happyReduce_223),
	(224 , happyReduce_224),
	(225 , happyReduce_225),
	(226 , happyReduce_226),
	(227 , happyReduce_227),
	(228 , happyReduce_228),
	(229 , happyReduce_229),
	(230 , happyReduce_230),
	(231 , happyReduce_231),
	(232 , happyReduce_232),
	(233 , happyReduce_233),
	(234 , happyReduce_234),
	(235 , happyReduce_235),
	(236 , happyReduce_236),
	(237 , happyReduce_237),
	(238 , happyReduce_238),
	(239 , happyReduce_239),
	(240 , happyReduce_240),
	(241 , happyReduce_241),
	(242 , happyReduce_242),
	(243 , happyReduce_243),
	(244 , happyReduce_244),
	(245 , happyReduce_245),
	(246 , happyReduce_246),
	(247 , happyReduce_247),
	(248 , happyReduce_248),
	(249 , happyReduce_249),
	(250 , happyReduce_250),
	(251 , happyReduce_251),
	(252 , happyReduce_252),
	(253 , happyReduce_253),
	(254 , happyReduce_254),
	(255 , happyReduce_255),
	(256 , happyReduce_256),
	(257 , happyReduce_257),
	(258 , happyReduce_258),
	(259 , happyReduce_259),
	(260 , happyReduce_260),
	(261 , happyReduce_261),
	(262 , happyReduce_262),
	(263 , happyReduce_263),
	(264 , happyReduce_264),
	(265 , happyReduce_265),
	(266 , happyReduce_266),
	(267 , happyReduce_267),
	(268 , happyReduce_268),
	(269 , happyReduce_269),
	(270 , happyReduce_270),
	(271 , happyReduce_271),
	(272 , happyReduce_272),
	(273 , happyReduce_273),
	(274 , happyReduce_274),
	(275 , happyReduce_275),
	(276 , happyReduce_276),
	(277 , happyReduce_277),
	(278 , happyReduce_278),
	(279 , happyReduce_279),
	(280 , happyReduce_280),
	(281 , happyReduce_281),
	(282 , happyReduce_282),
	(283 , happyReduce_283),
	(284 , happyReduce_284),
	(285 , happyReduce_285),
	(286 , happyReduce_286),
	(287 , happyReduce_287),
	(288 , happyReduce_288),
	(289 , happyReduce_289),
	(290 , happyReduce_290),
	(291 , happyReduce_291),
	(292 , happyReduce_292),
	(293 , happyReduce_293),
	(294 , happyReduce_294),
	(295 , happyReduce_295),
	(296 , happyReduce_296),
	(297 , happyReduce_297),
	(298 , happyReduce_298),
	(299 , happyReduce_299),
	(300 , happyReduce_300),
	(301 , happyReduce_301),
	(302 , happyReduce_302),
	(303 , happyReduce_303),
	(304 , happyReduce_304),
	(305 , happyReduce_305),
	(306 , happyReduce_306),
	(307 , happyReduce_307),
	(308 , happyReduce_308),
	(309 , happyReduce_309),
	(310 , happyReduce_310),
	(311 , happyReduce_311),
	(312 , happyReduce_312),
	(313 , happyReduce_313),
	(314 , happyReduce_314),
	(315 , happyReduce_315),
	(316 , happyReduce_316),
	(317 , happyReduce_317),
	(318 , happyReduce_318),
	(319 , happyReduce_319),
	(320 , happyReduce_320),
	(321 , happyReduce_321),
	(322 , happyReduce_322),
	(323 , happyReduce_323),
	(324 , happyReduce_324),
	(325 , happyReduce_325),
	(326 , happyReduce_326),
	(327 , happyReduce_327),
	(328 , happyReduce_328),
	(329 , happyReduce_329),
	(330 , happyReduce_330),
	(331 , happyReduce_331),
	(332 , happyReduce_332),
	(333 , happyReduce_333),
	(334 , happyReduce_334),
	(335 , happyReduce_335),
	(336 , happyReduce_336),
	(337 , happyReduce_337),
	(338 , happyReduce_338),
	(339 , happyReduce_339),
	(340 , happyReduce_340),
	(341 , happyReduce_341),
	(342 , happyReduce_342),
	(343 , happyReduce_343),
	(344 , happyReduce_344),
	(345 , happyReduce_345),
	(346 , happyReduce_346),
	(347 , happyReduce_347),
	(348 , happyReduce_348),
	(349 , happyReduce_349),
	(350 , happyReduce_350),
	(351 , happyReduce_351),
	(352 , happyReduce_352),
	(353 , happyReduce_353),
	(354 , happyReduce_354),
	(355 , happyReduce_355),
	(356 , happyReduce_356),
	(357 , happyReduce_357),
	(358 , happyReduce_358),
	(359 , happyReduce_359),
	(360 , happyReduce_360),
	(361 , happyReduce_361),
	(362 , happyReduce_362),
	(363 , happyReduce_363),
	(364 , happyReduce_364),
	(365 , happyReduce_365),
	(366 , happyReduce_366),
	(367 , happyReduce_367),
	(368 , happyReduce_368),
	(369 , happyReduce_369),
	(370 , happyReduce_370),
	(371 , happyReduce_371),
	(372 , happyReduce_372),
	(373 , happyReduce_373),
	(374 , happyReduce_374),
	(375 , happyReduce_375),
	(376 , happyReduce_376),
	(377 , happyReduce_377),
	(378 , happyReduce_378),
	(379 , happyReduce_379),
	(380 , happyReduce_380),
	(381 , happyReduce_381),
	(382 , happyReduce_382),
	(383 , happyReduce_383),
	(384 , happyReduce_384),
	(385 , happyReduce_385),
	(386 , happyReduce_386),
	(387 , happyReduce_387),
	(388 , happyReduce_388),
	(389 , happyReduce_389),
	(390 , happyReduce_390),
	(391 , happyReduce_391),
	(392 , happyReduce_392),
	(393 , happyReduce_393),
	(394 , happyReduce_394),
	(395 , happyReduce_395),
	(396 , happyReduce_396),
	(397 , happyReduce_397),
	(398 , happyReduce_398),
	(399 , happyReduce_399),
	(400 , happyReduce_400),
	(401 , happyReduce_401),
	(402 , happyReduce_402),
	(403 , happyReduce_403),
	(404 , happyReduce_404),
	(405 , happyReduce_405),
	(406 , happyReduce_406),
	(407 , happyReduce_407),
	(408 , happyReduce_408),
	(409 , happyReduce_409),
	(410 , happyReduce_410),
	(411 , happyReduce_411),
	(412 , happyReduce_412),
	(413 , happyReduce_413),
	(414 , happyReduce_414),
	(415 , happyReduce_415),
	(416 , happyReduce_416),
	(417 , happyReduce_417),
	(418 , happyReduce_418),
	(419 , happyReduce_419),
	(420 , happyReduce_420),
	(421 , happyReduce_421),
	(422 , happyReduce_422),
	(423 , happyReduce_423),
	(424 , happyReduce_424),
	(425 , happyReduce_425),
	(426 , happyReduce_426),
	(427 , happyReduce_427),
	(428 , happyReduce_428),
	(429 , happyReduce_429),
	(430 , happyReduce_430),
	(431 , happyReduce_431),
	(432 , happyReduce_432),
	(433 , happyReduce_433),
	(434 , happyReduce_434),
	(435 , happyReduce_435),
	(436 , happyReduce_436),
	(437 , happyReduce_437),
	(438 , happyReduce_438),
	(439 , happyReduce_439),
	(440 , happyReduce_440),
	(441 , happyReduce_441),
	(442 , happyReduce_442),
	(443 , happyReduce_443),
	(444 , happyReduce_444),
	(445 , happyReduce_445),
	(446 , happyReduce_446),
	(447 , happyReduce_447),
	(448 , happyReduce_448),
	(449 , happyReduce_449),
	(450 , happyReduce_450),
	(451 , happyReduce_451),
	(452 , happyReduce_452),
	(453 , happyReduce_453),
	(454 , happyReduce_454),
	(455 , happyReduce_455),
	(456 , happyReduce_456),
	(457 , happyReduce_457),
	(458 , happyReduce_458),
	(459 , happyReduce_459),
	(460 , happyReduce_460),
	(461 , happyReduce_461),
	(462 , happyReduce_462),
	(463 , happyReduce_463),
	(464 , happyReduce_464),
	(465 , happyReduce_465),
	(466 , happyReduce_466),
	(467 , happyReduce_467),
	(468 , happyReduce_468),
	(469 , happyReduce_469),
	(470 , happyReduce_470),
	(471 , happyReduce_471),
	(472 , happyReduce_472),
	(473 , happyReduce_473),
	(474 , happyReduce_474),
	(475 , happyReduce_475),
	(476 , happyReduce_476),
	(477 , happyReduce_477),
	(478 , happyReduce_478),
	(479 , happyReduce_479),
	(480 , happyReduce_480),
	(481 , happyReduce_481),
	(482 , happyReduce_482),
	(483 , happyReduce_483),
	(484 , happyReduce_484),
	(485 , happyReduce_485),
	(486 , happyReduce_486),
	(487 , happyReduce_487),
	(488 , happyReduce_488),
	(489 , happyReduce_489),
	(490 , happyReduce_490),
	(491 , happyReduce_491),
	(492 , happyReduce_492),
	(493 , happyReduce_493),
	(494 , happyReduce_494),
	(495 , happyReduce_495),
	(496 , happyReduce_496),
	(497 , happyReduce_497),
	(498 , happyReduce_498),
	(499 , happyReduce_499),
	(500 , happyReduce_500),
	(501 , happyReduce_501),
	(502 , happyReduce_502),
	(503 , happyReduce_503),
	(504 , happyReduce_504),
	(505 , happyReduce_505),
	(506 , happyReduce_506),
	(507 , happyReduce_507),
	(508 , happyReduce_508),
	(509 , happyReduce_509),
	(510 , happyReduce_510),
	(511 , happyReduce_511),
	(512 , happyReduce_512),
	(513 , happyReduce_513),
	(514 , happyReduce_514),
	(515 , happyReduce_515),
	(516 , happyReduce_516),
	(517 , happyReduce_517),
	(518 , happyReduce_518),
	(519 , happyReduce_519),
	(520 , happyReduce_520),
	(521 , happyReduce_521),
	(522 , happyReduce_522),
	(523 , happyReduce_523),
	(524 , happyReduce_524),
	(525 , happyReduce_525),
	(526 , happyReduce_526),
	(527 , happyReduce_527),
	(528 , happyReduce_528),
	(529 , happyReduce_529),
	(530 , happyReduce_530),
	(531 , happyReduce_531),
	(532 , happyReduce_532),
	(533 , happyReduce_533),
	(534 , happyReduce_534),
	(535 , happyReduce_535),
	(536 , happyReduce_536),
	(537 , happyReduce_537),
	(538 , happyReduce_538),
	(539 , happyReduce_539),
	(540 , happyReduce_540),
	(541 , happyReduce_541),
	(542 , happyReduce_542),
	(543 , happyReduce_543),
	(544 , happyReduce_544),
	(545 , happyReduce_545),
	(546 , happyReduce_546),
	(547 , happyReduce_547),
	(548 , happyReduce_548),
	(549 , happyReduce_549),
	(550 , happyReduce_550),
	(551 , happyReduce_551),
	(552 , happyReduce_552),
	(553 , happyReduce_553),
	(554 , happyReduce_554),
	(555 , happyReduce_555),
	(556 , happyReduce_556),
	(557 , happyReduce_557),
	(558 , happyReduce_558),
	(559 , happyReduce_559),
	(560 , happyReduce_560),
	(561 , happyReduce_561),
	(562 , happyReduce_562),
	(563 , happyReduce_563),
	(564 , happyReduce_564),
	(565 , happyReduce_565),
	(566 , happyReduce_566),
	(567 , happyReduce_567),
	(568 , happyReduce_568),
	(569 , happyReduce_569),
	(570 , happyReduce_570),
	(571 , happyReduce_571),
	(572 , happyReduce_572),
	(573 , happyReduce_573),
	(574 , happyReduce_574),
	(575 , happyReduce_575),
	(576 , happyReduce_576),
	(577 , happyReduce_577),
	(578 , happyReduce_578),
	(579 , happyReduce_579),
	(580 , happyReduce_580),
	(581 , happyReduce_581),
	(582 , happyReduce_582),
	(583 , happyReduce_583),
	(584 , happyReduce_584),
	(585 , happyReduce_585),
	(586 , happyReduce_586),
	(587 , happyReduce_587),
	(588 , happyReduce_588),
	(589 , happyReduce_589),
	(590 , happyReduce_590),
	(591 , happyReduce_591),
	(592 , happyReduce_592),
	(593 , happyReduce_593),
	(594 , happyReduce_594),
	(595 , happyReduce_595),
	(596 , happyReduce_596),
	(597 , happyReduce_597),
	(598 , happyReduce_598),
	(599 , happyReduce_599),
	(600 , happyReduce_600),
	(601 , happyReduce_601),
	(602 , happyReduce_602),
	(603 , happyReduce_603),
	(604 , happyReduce_604),
	(605 , happyReduce_605),
	(606 , happyReduce_606),
	(607 , happyReduce_607),
	(608 , happyReduce_608),
	(609 , happyReduce_609),
	(610 , happyReduce_610),
	(611 , happyReduce_611),
	(612 , happyReduce_612),
	(613 , happyReduce_613),
	(614 , happyReduce_614),
	(615 , happyReduce_615),
	(616 , happyReduce_616),
	(617 , happyReduce_617),
	(618 , happyReduce_618),
	(619 , happyReduce_619),
	(620 , happyReduce_620),
	(621 , happyReduce_621),
	(622 , happyReduce_622),
	(623 , happyReduce_623),
	(624 , happyReduce_624),
	(625 , happyReduce_625),
	(626 , happyReduce_626),
	(627 , happyReduce_627),
	(628 , happyReduce_628),
	(629 , happyReduce_629),
	(630 , happyReduce_630),
	(631 , happyReduce_631),
	(632 , happyReduce_632),
	(633 , happyReduce_633),
	(634 , happyReduce_634),
	(635 , happyReduce_635),
	(636 , happyReduce_636),
	(637 , happyReduce_637),
	(638 , happyReduce_638),
	(639 , happyReduce_639),
	(640 , happyReduce_640),
	(641 , happyReduce_641),
	(642 , happyReduce_642),
	(643 , happyReduce_643),
	(644 , happyReduce_644),
	(645 , happyReduce_645),
	(646 , happyReduce_646),
	(647 , happyReduce_647),
	(648 , happyReduce_648),
	(649 , happyReduce_649),
	(650 , happyReduce_650),
	(651 , happyReduce_651),
	(652 , happyReduce_652),
	(653 , happyReduce_653),
	(654 , happyReduce_654),
	(655 , happyReduce_655),
	(656 , happyReduce_656),
	(657 , happyReduce_657),
	(658 , happyReduce_658),
	(659 , happyReduce_659),
	(660 , happyReduce_660),
	(661 , happyReduce_661),
	(662 , happyReduce_662),
	(663 , happyReduce_663),
	(664 , happyReduce_664),
	(665 , happyReduce_665),
	(666 , happyReduce_666),
	(667 , happyReduce_667),
	(668 , happyReduce_668),
	(669 , happyReduce_669),
	(670 , happyReduce_670),
	(671 , happyReduce_671),
	(672 , happyReduce_672),
	(673 , happyReduce_673),
	(674 , happyReduce_674),
	(675 , happyReduce_675),
	(676 , happyReduce_676),
	(677 , happyReduce_677),
	(678 , happyReduce_678),
	(679 , happyReduce_679),
	(680 , happyReduce_680),
	(681 , happyReduce_681),
	(682 , happyReduce_682),
	(683 , happyReduce_683),
	(684 , happyReduce_684),
	(685 , happyReduce_685),
	(686 , happyReduce_686),
	(687 , happyReduce_687),
	(688 , happyReduce_688),
	(689 , happyReduce_689),
	(690 , happyReduce_690),
	(691 , happyReduce_691),
	(692 , happyReduce_692),
	(693 , happyReduce_693),
	(694 , happyReduce_694),
	(695 , happyReduce_695),
	(696 , happyReduce_696),
	(697 , happyReduce_697),
	(698 , happyReduce_698),
	(699 , happyReduce_699),
	(700 , happyReduce_700),
	(701 , happyReduce_701),
	(702 , happyReduce_702),
	(703 , happyReduce_703),
	(704 , happyReduce_704),
	(705 , happyReduce_705),
	(706 , happyReduce_706),
	(707 , happyReduce_707),
	(708 , happyReduce_708),
	(709 , happyReduce_709),
	(710 , happyReduce_710),
	(711 , happyReduce_711),
	(712 , happyReduce_712),
	(713 , happyReduce_713),
	(714 , happyReduce_714),
	(715 , happyReduce_715),
	(716 , happyReduce_716),
	(717 , happyReduce_717),
	(718 , happyReduce_718),
	(719 , happyReduce_719),
	(720 , happyReduce_720),
	(721 , happyReduce_721),
	(722 , happyReduce_722),
	(723 , happyReduce_723),
	(724 , happyReduce_724),
	(725 , happyReduce_725),
	(726 , happyReduce_726),
	(727 , happyReduce_727),
	(728 , happyReduce_728),
	(729 , happyReduce_729),
	(730 , happyReduce_730),
	(731 , happyReduce_731),
	(732 , happyReduce_732),
	(733 , happyReduce_733),
	(734 , happyReduce_734),
	(735 , happyReduce_735),
	(736 , happyReduce_736),
	(737 , happyReduce_737),
	(738 , happyReduce_738)
	]

happy_n_terms = 151 :: Int
happy_n_nonterms = 255 :: Int

happyReduce_12 = happySpecReduce_1  0# happyReduction_12
happyReduction_12 happy_x_1
	 =  case happyOut157 happy_x_1 of { happy_var_1 -> 
	happyIn15
		 (head (fromOL (unLoc happy_var_1))
	)}

happyReduce_13 = happyMonadReduce 7# 1# happyReduction_13
happyReduction_13 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut19 happy_x_1 of { happy_var_1 -> 
	case happyOut261 happy_x_3 of { happy_var_3 -> 
	case happyOut21 happy_x_4 of { happy_var_4 -> 
	case happyOut29 happy_x_5 of { happy_var_5 -> 
	case happyOut22 happy_x_7 of { happy_var_7 -> 
	( fileSrcSpan >>= \ loc ->
                   let (addAnn, (importDecl, hsDecl)) = happy_var_7
                   in return (L loc (HsModule (Just happy_var_3) happy_var_5 importDecl hsDecl happy_var_4 happy_var_1
                          ) ))}}}}}
	) (\r -> happyReturn (happyIn16 r))

happyReduce_14 = happySpecReduce_1  2# happyReduction_14
happyReduction_14 happy_x_1
	 =  case happyOut245 happy_x_1 of { happy_var_1 -> 
	happyIn17
		 (happy_var_1
	)}

happyReduce_15 = happySpecReduce_1  2# happyReduction_15
happyReduction_15 happy_x_1
	 =  case happyOut221 happy_x_1 of { happy_var_1 -> 
	happyIn17
		 (happy_var_1
	)}

happyReduce_16 = happySpecReduce_1  2# happyReduction_16
happyReduction_16 happy_x_1
	 =  case happyOut239 happy_x_1 of { happy_var_1 -> 
	happyIn17
		 (happy_var_1
	)}

happyReduce_17 = happySpecReduce_1  2# happyReduction_17
happyReduction_17 happy_x_1
	 =  case happyOut226 happy_x_1 of { happy_var_1 -> 
	happyIn17
		 (happy_var_1
	)}

happyReduce_18 = happySpecReduce_3  2# happyReduction_18
happyReduction_18 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn17
		 (sLL happy_var_1 happy_var_3 $ getRdrName funTyCon
	)}}

happyReduce_19 = happyMonadReduce 7# 3# happyReduction_19
happyReduction_19 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut19 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut261 happy_x_3 of { happy_var_3 -> 
	case happyOut21 happy_x_4 of { happy_var_4 -> 
	case happyOut29 happy_x_5 of { happy_var_5 -> 
	case happyOutTok happy_x_6 of { happy_var_6 -> 
	case happyOut22 happy_x_7 of { happy_var_7 -> 
	( fileSrcSpan >>= \ loc ->
                ams (L loc (HsModule (Just happy_var_3) happy_var_5 (fst $ snd happy_var_7)
                              (snd $ snd happy_var_7) happy_var_4 happy_var_1)
                    )
                    ([mj AnnModule happy_var_2, mj AnnWhere happy_var_6] ++ fst happy_var_7))}}}}}}}
	) (\r -> happyReturn (happyIn18 r))

happyReduce_20 = happyMonadReduce 1# 3# happyReduction_20
happyReduction_20 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut23 happy_x_1 of { happy_var_1 -> 
	( fileSrcSpan >>= \ loc ->
                   ams (L loc (HsModule Nothing Nothing
                               (fst $ snd happy_var_1) (snd $ snd happy_var_1) Nothing Nothing))
                       (fst happy_var_1))}
	) (\r -> happyReturn (happyIn18 r))

happyReduce_21 = happySpecReduce_1  4# happyReduction_21
happyReduction_21 happy_x_1
	 =  case happyOut267 happy_x_1 of { happy_var_1 -> 
	happyIn19
		 (happy_var_1
	)}

happyReduce_22 = happySpecReduce_0  4# happyReduction_22
happyReduction_22  =  happyIn19
		 (Nothing
	)

happyReduce_23 = happyMonadReduce 0# 5# happyReduction_23
happyReduction_23 (happyRest) tk
	 = happyThen (( pushCurrentContext)
	) (\r -> happyReturn (happyIn20 r))

happyReduce_24 = happyMonadReduce 3# 6# happyReduction_24
happyReduction_24 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut102 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ajs (Just (sLL happy_var_1 happy_var_3 $ DeprecatedTxt $ snd $ unLoc happy_var_2))
                             (mo happy_var_1:mc happy_var_1: (fst $ unLoc happy_var_2)))}}}
	) (\r -> happyReturn (happyIn21 r))

happyReduce_25 = happyMonadReduce 3# 6# happyReduction_25
happyReduction_25 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut102 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ajs (Just (sLL happy_var_1 happy_var_3 $ WarningTxt $ snd $ unLoc happy_var_2))
                                (mo happy_var_1:mc happy_var_3 : (fst $ unLoc happy_var_2)))}}}
	) (\r -> happyReturn (happyIn21 r))

happyReduce_26 = happySpecReduce_0  6# happyReduction_26
happyReduction_26  =  happyIn21
		 (Nothing
	)

happyReduce_27 = happySpecReduce_3  7# happyReduction_27
happyReduction_27 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut24 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn22
		 ((mo happy_var_1:mc happy_var_3:(fst happy_var_2)
                                         , snd happy_var_2)
	)}}}

happyReduce_28 = happySpecReduce_3  7# happyReduction_28
happyReduction_28 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut24 happy_x_2 of { happy_var_2 -> 
	happyIn22
		 ((fst happy_var_2, snd happy_var_2)
	)}

happyReduce_29 = happySpecReduce_3  8# happyReduction_29
happyReduction_29 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut24 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn23
		 ((mo happy_var_1:mc happy_var_3
                                                   :(fst happy_var_2), snd happy_var_2)
	)}}}

happyReduce_30 = happySpecReduce_3  8# happyReduction_30
happyReduction_30 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut24 happy_x_2 of { happy_var_2 -> 
	happyIn23
		 (([],snd happy_var_2)
	)}

happyReduce_31 = happySpecReduce_1  9# happyReduction_31
happyReduction_31 happy_x_1
	 =  case happyOut39 happy_x_1 of { happy_var_1 -> 
	happyIn24
		 (([]
                                          ,(reverse happy_var_1,[]))
	)}

happyReduce_32 = happySpecReduce_3  9# happyReduction_32
happyReduction_32 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut39 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut25 happy_x_3 of { happy_var_3 -> 
	happyIn24
		 (([mj AnnSemi happy_var_2]
                                          ,(reverse happy_var_1,happy_var_3))
	)}}}

happyReduce_33 = happySpecReduce_1  9# happyReduction_33
happyReduction_33 happy_x_1
	 =  case happyOut25 happy_x_1 of { happy_var_1 -> 
	happyIn24
		 (([],([],happy_var_1))
	)}

happyReduce_34 = happySpecReduce_1  10# happyReduction_34
happyReduction_34 happy_x_1
	 =  case happyOut51 happy_x_1 of { happy_var_1 -> 
	happyIn25
		 (cvTopDecls happy_var_1
	)}

happyReduce_35 = happyMonadReduce 7# 11# happyReduction_35
happyReduction_35 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut19 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut261 happy_x_3 of { happy_var_3 -> 
	case happyOut21 happy_x_4 of { happy_var_4 -> 
	case happyOut29 happy_x_5 of { happy_var_5 -> 
	case happyOutTok happy_x_6 of { happy_var_6 -> 
	case happyOut27 happy_x_7 of { happy_var_7 -> 
	( fileSrcSpan >>= \ loc ->
                   ams (L loc (HsModule (Just happy_var_3) happy_var_5 happy_var_7 [] happy_var_4 happy_var_1
                          )) [mj AnnModule happy_var_2,mj AnnWhere happy_var_6])}}}}}}}
	) (\r -> happyReturn (happyIn26 r))

happyReduce_36 = happyMonadReduce 1# 11# happyReduction_36
happyReduction_36 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut28 happy_x_1 of { happy_var_1 -> 
	( fileSrcSpan >>= \ loc ->
                   return (L loc (HsModule Nothing Nothing happy_var_1 [] Nothing
                          Nothing)))}
	) (\r -> happyReturn (happyIn26 r))

happyReduce_37 = happySpecReduce_2  12# happyReduction_37
happyReduction_37 happy_x_2
	happy_x_1
	 =  case happyOut39 happy_x_2 of { happy_var_2 -> 
	happyIn27
		 (happy_var_2
	)}

happyReduce_38 = happySpecReduce_2  12# happyReduction_38
happyReduction_38 happy_x_2
	happy_x_1
	 =  case happyOut39 happy_x_2 of { happy_var_2 -> 
	happyIn27
		 (happy_var_2
	)}

happyReduce_39 = happySpecReduce_2  13# happyReduction_39
happyReduction_39 happy_x_2
	happy_x_1
	 =  case happyOut39 happy_x_2 of { happy_var_2 -> 
	happyIn28
		 (happy_var_2
	)}

happyReduce_40 = happySpecReduce_2  13# happyReduction_40
happyReduction_40 happy_x_2
	happy_x_1
	 =  case happyOut39 happy_x_2 of { happy_var_2 -> 
	happyIn28
		 (happy_var_2
	)}

happyReduce_41 = happyMonadReduce 3# 14# happyReduction_41
happyReduction_41 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut30 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 ()) [mo happy_var_1,mc happy_var_3] >>
                                       return (Just (sLL happy_var_1 happy_var_3 (fromOL happy_var_2))))}}}
	) (\r -> happyReturn (happyIn29 r))

happyReduce_42 = happySpecReduce_0  14# happyReduction_42
happyReduction_42  =  happyIn29
		 (Nothing
	)

happyReduce_43 = happyMonadReduce 3# 15# happyReduction_43
happyReduction_43 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut32 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut32 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (oll happy_var_1) AnnComma (gl happy_var_2)
                                         >> return (happy_var_1 `appOL` happy_var_3))}}}
	) (\r -> happyReturn (happyIn30 r))

happyReduce_44 = happySpecReduce_1  15# happyReduction_44
happyReduction_44 happy_x_1
	 =  case happyOut31 happy_x_1 of { happy_var_1 -> 
	happyIn30
		 (happy_var_1
	)}

happyReduce_45 = happyMonadReduce 5# 16# happyReduction_45
happyReduction_45 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut32 happy_x_1 of { happy_var_1 -> 
	case happyOut34 happy_x_2 of { happy_var_2 -> 
	case happyOut32 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut31 happy_x_5 of { happy_var_5 -> 
	( (addAnnotation (oll (happy_var_1 `appOL` happy_var_2 `appOL` happy_var_3))
                                            AnnComma (gl happy_var_4) ) >>
                              return (happy_var_1 `appOL` happy_var_2 `appOL` happy_var_3 `appOL` happy_var_5))}}}}}
	) (\r -> happyReturn (happyIn31 r))

happyReduce_46 = happySpecReduce_3  16# happyReduction_46
happyReduction_46 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut32 happy_x_1 of { happy_var_1 -> 
	case happyOut34 happy_x_2 of { happy_var_2 -> 
	case happyOut32 happy_x_3 of { happy_var_3 -> 
	happyIn31
		 (happy_var_1 `appOL` happy_var_2 `appOL` happy_var_3
	)}}}

happyReduce_47 = happySpecReduce_1  16# happyReduction_47
happyReduction_47 happy_x_1
	 =  case happyOut32 happy_x_1 of { happy_var_1 -> 
	happyIn31
		 (happy_var_1
	)}

happyReduce_48 = happySpecReduce_2  17# happyReduction_48
happyReduction_48 happy_x_2
	happy_x_1
	 =  case happyOut33 happy_x_1 of { happy_var_1 -> 
	case happyOut32 happy_x_2 of { happy_var_2 -> 
	happyIn32
		 (happy_var_1 `appOL` happy_var_2
	)}}

happyReduce_49 = happySpecReduce_0  17# happyReduction_49
happyReduction_49  =  happyIn32
		 (nilOL
	)

happyReduce_50 = happySpecReduce_1  18# happyReduction_50
happyReduction_50 happy_x_1
	 =  case happyOut266 happy_x_1 of { happy_var_1 -> 
	happyIn33
		 (unitOL (sL1 happy_var_1 (case (unLoc happy_var_1) of (n, doc) -> IEGroup n doc))
	)}

happyReduce_51 = happySpecReduce_1  18# happyReduction_51
happyReduction_51 happy_x_1
	 =  case happyOut265 happy_x_1 of { happy_var_1 -> 
	happyIn33
		 (unitOL (sL1 happy_var_1 (IEDocNamed ((fst . unLoc) happy_var_1)))
	)}

happyReduce_52 = happySpecReduce_1  18# happyReduction_52
happyReduction_52 happy_x_1
	 =  case happyOut263 happy_x_1 of { happy_var_1 -> 
	happyIn33
		 (unitOL (sL1 happy_var_1 (IEDoc (unLoc happy_var_1)))
	)}

happyReduce_53 = happyMonadReduce 2# 19# happyReduction_53
happyReduction_53 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut37 happy_x_1 of { happy_var_1 -> 
	case happyOut35 happy_x_2 of { happy_var_2 -> 
	( amsu (sLL happy_var_1 happy_var_2 (mkModuleImpExp happy_var_1
                                                    (snd $ unLoc happy_var_2)))
                                             (fst $ unLoc happy_var_2))}}
	) (\r -> happyReturn (happyIn34 r))

happyReduce_54 = happyMonadReduce 2# 19# happyReduction_54
happyReduction_54 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut261 happy_x_2 of { happy_var_2 -> 
	( amsu (sLL happy_var_1 happy_var_2 (IEModuleContents happy_var_2))
                                             [mj AnnModule happy_var_1])}}
	) (\r -> happyReturn (happyIn34 r))

happyReduce_55 = happyMonadReduce 2# 19# happyReduction_55
happyReduction_55 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut221 happy_x_2 of { happy_var_2 -> 
	( amsu (sLL happy_var_1 happy_var_2 (IEVar happy_var_2))
                                             [mj AnnPattern happy_var_1])}}
	) (\r -> happyReturn (happyIn34 r))

happyReduce_56 = happySpecReduce_0  20# happyReduction_56
happyReduction_56  =  happyIn35
		 (sL0 ([],ImpExpAbs)
	)

happyReduce_57 = happySpecReduce_3  20# happyReduction_57
happyReduction_57 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn35
		 (sLL happy_var_1 happy_var_3 ([mo happy_var_1,mc happy_var_3,mj AnnDotdot happy_var_2]
                                       , ImpExpAll)
	)}}}

happyReduce_58 = happySpecReduce_2  20# happyReduction_58
happyReduction_58 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn35
		 (sLL happy_var_1 happy_var_2 ([mo happy_var_1,mc happy_var_2],ImpExpList [])
	)}}

happyReduce_59 = happySpecReduce_3  20# happyReduction_59
happyReduction_59 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut36 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn35
		 (sLL happy_var_1 happy_var_3 ([mo happy_var_1,mc happy_var_3],ImpExpList (reverse happy_var_2))
	)}}}

happyReduce_60 = happyMonadReduce 3# 21# happyReduction_60
happyReduction_60 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut36 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut37 happy_x_3 of { happy_var_3 -> 
	( (aa (head happy_var_1) (AnnComma, happy_var_2)) >>
                                           return (happy_var_3  : happy_var_1))}}}
	) (\r -> happyReturn (happyIn36 r))

happyReduce_61 = happySpecReduce_1  21# happyReduction_61
happyReduction_61 happy_x_1
	 =  case happyOut37 happy_x_1 of { happy_var_1 -> 
	happyIn36
		 ([happy_var_1]
	)}

happyReduce_62 = happyMonadReduce 1# 22# happyReduction_62
happyReduction_62 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut38 happy_x_1 of { happy_var_1 -> 
	( ams happy_var_1 [mj AnnVal happy_var_1])}
	) (\r -> happyReturn (happyIn37 r))

happyReduce_63 = happyMonadReduce 2# 22# happyReduction_63
happyReduction_63 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut38 happy_x_2 of { happy_var_2 -> 
	( amms (mkTypeImpExp (sLL happy_var_1 happy_var_2 (unLoc happy_var_2)))
                                            [mj AnnType happy_var_1,mj AnnVal happy_var_2])}}
	) (\r -> happyReturn (happyIn37 r))

happyReduce_64 = happySpecReduce_1  23# happyReduction_64
happyReduction_64 happy_x_1
	 =  case happyOut245 happy_x_1 of { happy_var_1 -> 
	happyIn38
		 (happy_var_1
	)}

happyReduce_65 = happySpecReduce_1  23# happyReduction_65
happyReduction_65 happy_x_1
	 =  case happyOut221 happy_x_1 of { happy_var_1 -> 
	happyIn38
		 (happy_var_1
	)}

happyReduce_66 = happyMonadReduce 3# 24# happyReduction_66
happyReduction_66 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut39 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut40 happy_x_3 of { happy_var_3 -> 
	( (asl happy_var_1 happy_var_2 happy_var_3) >>
                                         return (happy_var_3 : happy_var_1))}}}
	) (\r -> happyReturn (happyIn39 r))

happyReduce_67 = happyMonadReduce 2# 24# happyReduction_67
happyReduction_67 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut39 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( addAnnotation (gl $ head happy_var_1) AnnSemi (gl happy_var_2)
              -- AZ: can happy_var_1 above ever be [] due to the {- empty -} production?
                                    >> return happy_var_1)}}
	) (\r -> happyReturn (happyIn39 r))

happyReduce_68 = happySpecReduce_1  24# happyReduction_68
happyReduction_68 happy_x_1
	 =  case happyOut40 happy_x_1 of { happy_var_1 -> 
	happyIn39
		 ([happy_var_1]
	)}

happyReduce_69 = happySpecReduce_0  24# happyReduction_69
happyReduction_69  =  happyIn39
		 ([]
	)

happyReduce_70 = happyMonadReduce 8# 25# happyReduction_70
happyReduction_70 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut41 happy_x_2 of { happy_var_2 -> 
	case happyOut42 happy_x_3 of { happy_var_3 -> 
	case happyOut44 happy_x_4 of { happy_var_4 -> 
	case happyOut43 happy_x_5 of { happy_var_5 -> 
	case happyOut261 happy_x_6 of { happy_var_6 -> 
	case happyOut45 happy_x_7 of { happy_var_7 -> 
	case happyOut46 happy_x_8 of { happy_var_8 -> 
	( ams (L (comb4 happy_var_1 happy_var_6 (snd happy_var_7) happy_var_8) $
                  ImportDecl { ideclName = happy_var_6, ideclPkgQual = snd happy_var_5
                             , ideclSource = snd happy_var_2, ideclSafe = snd happy_var_3
                             , ideclQualified = snd happy_var_4, ideclImplicit = False
                             , ideclAs = unLoc (snd happy_var_7)
                             , ideclHiding = unLoc happy_var_8 })
                   ((mj AnnImport happy_var_1 : fst happy_var_2 ++ fst happy_var_3 ++ fst happy_var_4
                                    ++ fst happy_var_5 ++ fst happy_var_7)))}}}}}}}}
	) (\r -> happyReturn (happyIn40 r))

happyReduce_71 = happySpecReduce_2  26# happyReduction_71
happyReduction_71 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn41
		 (([mo happy_var_1,mc happy_var_2],True)
	)}}

happyReduce_72 = happySpecReduce_0  26# happyReduction_72
happyReduction_72  =  happyIn41
		 (([],False)
	)

happyReduce_73 = happySpecReduce_1  27# happyReduction_73
happyReduction_73 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn42
		 (([mj AnnSafe happy_var_1],True)
	)}

happyReduce_74 = happySpecReduce_0  27# happyReduction_74
happyReduction_74  =  happyIn42
		 (([],False)
	)

happyReduce_75 = happySpecReduce_1  28# happyReduction_75
happyReduction_75 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn43
		 (([mj AnnPackageName happy_var_1]
                                                  ,Just (getSTRING happy_var_1))
	)}

happyReduce_76 = happySpecReduce_0  28# happyReduction_76
happyReduction_76  =  happyIn43
		 (([],Nothing)
	)

happyReduce_77 = happySpecReduce_1  29# happyReduction_77
happyReduction_77 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn44
		 (([mj AnnQualified happy_var_1],True)
	)}

happyReduce_78 = happySpecReduce_0  29# happyReduction_78
happyReduction_78  =  happyIn44
		 (([],False)
	)

happyReduce_79 = happySpecReduce_2  30# happyReduction_79
happyReduction_79 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut261 happy_x_2 of { happy_var_2 -> 
	happyIn45
		 (([mj AnnAs happy_var_1,mj AnnVal happy_var_2]
                                                 ,sLL happy_var_1 happy_var_2 (Just (unLoc happy_var_2)))
	)}}

happyReduce_80 = happySpecReduce_0  30# happyReduction_80
happyReduction_80  =  happyIn45
		 (([],noLoc Nothing)
	)

happyReduce_81 = happySpecReduce_1  31# happyReduction_81
happyReduction_81 happy_x_1
	 =  case happyOut47 happy_x_1 of { happy_var_1 -> 
	happyIn46
		 (L (gl happy_var_1) (Just (unLoc happy_var_1))
	)}

happyReduce_82 = happySpecReduce_0  31# happyReduction_82
happyReduction_82  =  happyIn46
		 (noLoc Nothing
	)

happyReduce_83 = happyMonadReduce 3# 32# happyReduction_83
happyReduction_83 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut30 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (False,
                                                        sLL happy_var_1 happy_var_3 $ fromOL happy_var_2))
                                                      [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn47 r))

happyReduce_84 = happyMonadReduce 4# 32# happyReduction_84
happyReduction_84 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut30 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( ams (sLL happy_var_1 happy_var_4 (True,
                                                        sLL happy_var_1 happy_var_4 $ fromOL happy_var_3))
                                                 [mj AnnHiding happy_var_1,mo happy_var_2,mc happy_var_4])}}}}
	) (\r -> happyReturn (happyIn47 r))

happyReduce_85 = happySpecReduce_0  33# happyReduction_85
happyReduction_85  =  happyIn48
		 (noLoc 9
	)

happyReduce_86 = happyMonadReduce 1# 33# happyReduction_86
happyReduction_86 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( checkPrecP (sL1 happy_var_1 (fromInteger (getINTEGER happy_var_1))))}
	) (\r -> happyReturn (happyIn48 r))

happyReduce_87 = happySpecReduce_1  34# happyReduction_87
happyReduction_87 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn49
		 (sL1 happy_var_1 InfixN
	)}

happyReduce_88 = happySpecReduce_1  34# happyReduction_88
happyReduction_88 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn49
		 (sL1 happy_var_1 InfixL
	)}

happyReduce_89 = happySpecReduce_1  34# happyReduction_89
happyReduction_89 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn49
		 (sL1 happy_var_1 InfixR
	)}

happyReduce_90 = happyMonadReduce 3# 35# happyReduction_90
happyReduction_90 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut50 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut235 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl happy_var_3) AnnComma (gl happy_var_2) >>
                                     return (sLL happy_var_1 happy_var_3 (unitOL happy_var_3 `appOL` (unLoc happy_var_1))))}}}
	) (\r -> happyReturn (happyIn50 r))

happyReduce_91 = happySpecReduce_1  35# happyReduction_91
happyReduction_91 happy_x_1
	 =  case happyOut235 happy_x_1 of { happy_var_1 -> 
	happyIn50
		 (sL1 happy_var_1 (unitOL happy_var_1)
	)}

happyReduce_92 = happyMonadReduce 3# 36# happyReduction_92
happyReduction_92 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut51 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut52 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (oll happy_var_1) AnnSemi (gl happy_var_2)
                                         >> return (happy_var_1 `appOL` happy_var_3))}}}
	) (\r -> happyReturn (happyIn51 r))

happyReduce_93 = happyMonadReduce 2# 36# happyReduction_93
happyReduction_93 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut51 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( addAnnotation (oll happy_var_1) AnnSemi (gl happy_var_2)
                                         >> return happy_var_1)}}
	) (\r -> happyReturn (happyIn51 r))

happyReduce_94 = happySpecReduce_1  36# happyReduction_94
happyReduction_94 happy_x_1
	 =  case happyOut52 happy_x_1 of { happy_var_1 -> 
	happyIn51
		 (happy_var_1
	)}

happyReduce_95 = happySpecReduce_1  37# happyReduction_95
happyReduction_95 happy_x_1
	 =  case happyOut53 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (unitOL (sL1 happy_var_1 (TyClD (unLoc happy_var_1)))
	)}

happyReduce_96 = happySpecReduce_1  37# happyReduction_96
happyReduction_96 happy_x_1
	 =  case happyOut54 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (unitOL (sL1 happy_var_1 (TyClD (unLoc happy_var_1)))
	)}

happyReduce_97 = happySpecReduce_1  37# happyReduction_97
happyReduction_97 happy_x_1
	 =  case happyOut55 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (unitOL (sL1 happy_var_1 (InstD (unLoc happy_var_1)))
	)}

happyReduce_98 = happySpecReduce_1  37# happyReduction_98
happyReduction_98 happy_x_1
	 =  case happyOut68 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (unitOL (sLL happy_var_1 happy_var_1 (DerivD (unLoc happy_var_1)))
	)}

happyReduce_99 = happySpecReduce_1  37# happyReduction_99
happyReduction_99 happy_x_1
	 =  case happyOut69 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (unitOL (sL1 happy_var_1 (RoleAnnotD (unLoc happy_var_1)))
	)}

happyReduce_100 = happyMonadReduce 4# 37# happyReduction_100
happyReduction_100 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut125 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( do { def <- checkValidDefaults happy_var_3
                                                  ; amsu (sLL happy_var_1 happy_var_4 (DefD def))
                                                         [mj AnnDefault happy_var_1
                                                         ,mo happy_var_2,mc happy_var_4] })}}}}
	) (\r -> happyReturn (happyIn52 r))

happyReduce_101 = happyMonadReduce 2# 37# happyReduction_101
happyReduction_101 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut105 happy_x_2 of { happy_var_2 -> 
	( amsu (sLL happy_var_1 happy_var_2 (unLoc happy_var_2))
                                                        [mj AnnForeign happy_var_1])}}
	) (\r -> happyReturn (happyIn52 r))

happyReduce_102 = happySpecReduce_3  37# happyReduction_102
happyReduction_102 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut100 happy_x_2 of { happy_var_2 -> 
	happyIn52
		 (happy_var_2
	)}

happyReduce_103 = happySpecReduce_3  37# happyReduction_103
happyReduction_103 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut98 happy_x_2 of { happy_var_2 -> 
	happyIn52
		 (happy_var_2
	)}

happyReduce_104 = happySpecReduce_3  37# happyReduction_104
happyReduction_104 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut91 happy_x_2 of { happy_var_2 -> 
	happyIn52
		 (happy_var_2
	)}

happyReduce_105 = happyMonadReduce 5# 37# happyReduction_105
happyReduction_105 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut245 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut161 happy_x_4 of { happy_var_4 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	( amsu (sLL happy_var_1 happy_var_5 $ VectD (HsVect happy_var_2 happy_var_4))
                                                    [mo happy_var_1,mj AnnEqual happy_var_3
                                                    ,mc happy_var_5])}}}}}
	) (\r -> happyReturn (happyIn52 r))

happyReduce_106 = happyMonadReduce 3# 37# happyReduction_106
happyReduction_106 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut245 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( amsu (sLL happy_var_1 happy_var_3 $ VectD (HsNoVect happy_var_2))
                                                     [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn52 r))

happyReduce_107 = happyMonadReduce 4# 37# happyReduction_107
happyReduction_107 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut227 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( amsu (sLL happy_var_1 happy_var_4 $
                                    VectD (HsVectTypeIn False happy_var_3 Nothing))
                                    [mo happy_var_1,mj AnnType happy_var_2,mc happy_var_4])}}}}
	) (\r -> happyReturn (happyIn52 r))

happyReduce_108 = happyMonadReduce 4# 37# happyReduction_108
happyReduction_108 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut227 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( amsu (sLL happy_var_1 happy_var_4 $
                                    VectD (HsVectTypeIn True happy_var_3 Nothing))
                                    [mo happy_var_1,mj AnnType happy_var_2,mc happy_var_4])}}}}
	) (\r -> happyReturn (happyIn52 r))

happyReduce_109 = happyMonadReduce 6# 37# happyReduction_109
happyReduction_109 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut227 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut227 happy_x_5 of { happy_var_5 -> 
	case happyOutTok happy_x_6 of { happy_var_6 -> 
	( amsu (sLL happy_var_1 happy_var_6 $
                                    VectD (HsVectTypeIn False happy_var_3 (Just happy_var_5)))
                                    [mo happy_var_1,mj AnnType happy_var_2,mj AnnEqual happy_var_4,mc happy_var_6])}}}}}}
	) (\r -> happyReturn (happyIn52 r))

happyReduce_110 = happyMonadReduce 6# 37# happyReduction_110
happyReduction_110 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut227 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut227 happy_x_5 of { happy_var_5 -> 
	case happyOutTok happy_x_6 of { happy_var_6 -> 
	( amsu (sLL happy_var_1 happy_var_6 $
                                    VectD (HsVectTypeIn True happy_var_3 (Just happy_var_5)))
                                    [mo happy_var_1,mj AnnType happy_var_2,mj AnnEqual happy_var_4,mc happy_var_6])}}}}}}
	) (\r -> happyReturn (happyIn52 r))

happyReduce_111 = happyMonadReduce 4# 37# happyReduction_111
happyReduction_111 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut227 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( amsu (sLL happy_var_1 happy_var_4  $ VectD (HsVectClassIn happy_var_3))
                                                 [mo happy_var_1,mj AnnClass happy_var_2,mc happy_var_4])}}}}
	) (\r -> happyReturn (happyIn52 r))

happyReduce_112 = happySpecReduce_1  37# happyReduction_112
happyReduction_112 happy_x_1
	 =  case happyOut104 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (unitOL happy_var_1
	)}

happyReduce_113 = happySpecReduce_1  37# happyReduction_113
happyReduction_113 happy_x_1
	 =  case happyOut152 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (unLoc happy_var_1
	)}

happyReduce_114 = happySpecReduce_1  37# happyReduction_114
happyReduction_114 happy_x_1
	 =  case happyOut162 happy_x_1 of { happy_var_1 -> 
	happyIn52
		 (unitOL (sLL happy_var_1 happy_var_1 $ mkSpliceDecl happy_var_1)
	)}

happyReduce_115 = happyMonadReduce 4# 38# happyReduction_115
happyReduction_115 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut66 happy_x_2 of { happy_var_2 -> 
	case happyOut129 happy_x_3 of { happy_var_3 -> 
	case happyOut82 happy_x_4 of { happy_var_4 -> 
	( amms (mkClassDecl (comb4 happy_var_1 happy_var_2 happy_var_3 happy_var_4) happy_var_2 happy_var_3 (snd $ unLoc happy_var_4))
                        (mj AnnClass happy_var_1: (fst $ unLoc happy_var_4)))}}}}
	) (\r -> happyReturn (happyIn53 r))

happyReduce_116 = happyMonadReduce 4# 39# happyReduction_116
happyReduction_116 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut119 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut117 happy_x_4 of { happy_var_4 -> 
	( amms (mkTySynonym (comb2 happy_var_1 happy_var_4) happy_var_2 happy_var_4)
                        [mj AnnType happy_var_1,mj AnnEqual happy_var_3])}}}}
	) (\r -> happyReturn (happyIn54 r))

happyReduce_117 = happyMonadReduce 5# 39# happyReduction_117
happyReduction_117 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	case happyOut65 happy_x_4 of { happy_var_4 -> 
	case happyOut57 happy_x_5 of { happy_var_5 -> 
	( amms (mkFamDecl (comb4 happy_var_1 happy_var_3 happy_var_4 happy_var_5) (snd $ unLoc happy_var_5) happy_var_3
                                   (unLoc happy_var_4))
                        (mj AnnType happy_var_1:mj AnnFamily happy_var_2:(fst $ unLoc happy_var_5)))}}}}}
	) (\r -> happyReturn (happyIn54 r))

happyReduce_118 = happyMonadReduce 5# 39# happyReduction_118
happyReduction_118 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut64 happy_x_1 of { happy_var_1 -> 
	case happyOut67 happy_x_2 of { happy_var_2 -> 
	case happyOut66 happy_x_3 of { happy_var_3 -> 
	case happyOut141 happy_x_4 of { happy_var_4 -> 
	case happyOut149 happy_x_5 of { happy_var_5 -> 
	( amms (mkTyData (comb4 happy_var_1 happy_var_3 happy_var_4 happy_var_5) (snd $ unLoc happy_var_1) happy_var_2 happy_var_3
                           Nothing (reverse (snd $ unLoc happy_var_4))
                                   (unLoc happy_var_5))
                                   -- We need the location on tycl_hdr in case
                                   -- constrs and deriving are both empty
                        ((fst $ unLoc happy_var_1):(fst $ unLoc happy_var_4)))}}}}}
	) (\r -> happyReturn (happyIn54 r))

happyReduce_119 = happyMonadReduce 6# 39# happyReduction_119
happyReduction_119 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut64 happy_x_1 of { happy_var_1 -> 
	case happyOut67 happy_x_2 of { happy_var_2 -> 
	case happyOut66 happy_x_3 of { happy_var_3 -> 
	case happyOut65 happy_x_4 of { happy_var_4 -> 
	case happyOut138 happy_x_5 of { happy_var_5 -> 
	case happyOut149 happy_x_6 of { happy_var_6 -> 
	( amms (mkTyData (comb4 happy_var_1 happy_var_3 happy_var_5 happy_var_6) (snd $ unLoc happy_var_1) happy_var_2 happy_var_3
                            (unLoc happy_var_4) (snd $ unLoc happy_var_5) (unLoc happy_var_6) )
                                   -- We need the location on tycl_hdr in case
                                   -- constrs and deriving are both empty
                    ((fst $ unLoc happy_var_1):(fst $ unLoc happy_var_5)))}}}}}}
	) (\r -> happyReturn (happyIn54 r))

happyReduce_120 = happyMonadReduce 4# 39# happyReduction_120
happyReduction_120 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	case happyOut65 happy_x_4 of { happy_var_4 -> 
	( amms (mkFamDecl (comb3 happy_var_1 happy_var_2 happy_var_4) DataFamily happy_var_3 (unLoc happy_var_4))
                        [mj AnnData happy_var_1,mj AnnFamily happy_var_2])}}}}
	) (\r -> happyReturn (happyIn54 r))

happyReduce_121 = happyMonadReduce 4# 40# happyReduction_121
happyReduction_121 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut56 happy_x_2 of { happy_var_2 -> 
	case happyOut123 happy_x_3 of { happy_var_3 -> 
	case happyOut86 happy_x_4 of { happy_var_4 -> 
	( do { (binds, sigs, _, ats, adts, _) <- cvBindsAndSigs (snd $ unLoc happy_var_4)
             ; let cid = ClsInstDecl { cid_poly_ty = happy_var_3, cid_binds = binds
                                     , cid_sigs = sigs, cid_tyfam_insts = ats
                                     , cid_overlap_mode = happy_var_2
                                     , cid_datafam_insts = adts }
             ; let err = text "In instance head:" <+> ppr happy_var_3
             ; checkNoPartialType err happy_var_3
             ; sequence_ [ checkNoPartialType err ty
                         | sig@(L _ (TypeSig _ ty _ )) <- sigs
                         , let err = text "in instance signature" <> colon
                                     <+> quotes (ppr sig) ]
             ; ams (L (comb3 happy_var_1 happy_var_3 happy_var_4) (ClsInstD { cid_inst = cid }))
                   (mj AnnInstance happy_var_1 : (fst $ unLoc happy_var_4)) })}}}}
	) (\r -> happyReturn (happyIn55 r))

happyReduce_122 = happyMonadReduce 3# 40# happyReduction_122
happyReduction_122 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut60 happy_x_3 of { happy_var_3 -> 
	( amms (mkTyFamInst (comb2 happy_var_1 happy_var_3) happy_var_3)
                    [mj AnnType happy_var_1,mj AnnInstance happy_var_2])}}}
	) (\r -> happyReturn (happyIn55 r))

happyReduce_123 = happyMonadReduce 6# 40# happyReduction_123
happyReduction_123 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut64 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut67 happy_x_3 of { happy_var_3 -> 
	case happyOut66 happy_x_4 of { happy_var_4 -> 
	case happyOut141 happy_x_5 of { happy_var_5 -> 
	case happyOut149 happy_x_6 of { happy_var_6 -> 
	( amms (mkDataFamInst (comb4 happy_var_1 happy_var_4 happy_var_5 happy_var_6) (snd $ unLoc happy_var_1) happy_var_3 happy_var_4
                                      Nothing (reverse (snd  $ unLoc happy_var_5))
                                              (unLoc happy_var_6))
                    ((fst $ unLoc happy_var_1):mj AnnInstance happy_var_2:(fst $ unLoc happy_var_5)))}}}}}}
	) (\r -> happyReturn (happyIn55 r))

happyReduce_124 = happyMonadReduce 7# 40# happyReduction_124
happyReduction_124 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut64 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut67 happy_x_3 of { happy_var_3 -> 
	case happyOut66 happy_x_4 of { happy_var_4 -> 
	case happyOut65 happy_x_5 of { happy_var_5 -> 
	case happyOut138 happy_x_6 of { happy_var_6 -> 
	case happyOut149 happy_x_7 of { happy_var_7 -> 
	( amms (mkDataFamInst (comb4 happy_var_1 happy_var_4 happy_var_6 happy_var_7) (snd $ unLoc happy_var_1) happy_var_3 happy_var_4
                                   (unLoc happy_var_5) (snd $ unLoc happy_var_6) (unLoc happy_var_7))
                    ((fst $ unLoc happy_var_1):mj AnnInstance happy_var_2
                       :(fst $ unLoc happy_var_6)))}}}}}}}
	) (\r -> happyReturn (happyIn55 r))

happyReduce_125 = happyMonadReduce 2# 41# happyReduction_125
happyReduction_125 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ajs (Just (sLL happy_var_1 happy_var_2 Overlappable))
                                       [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn56 r))

happyReduce_126 = happyMonadReduce 2# 41# happyReduction_126
happyReduction_126 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ajs (Just (sLL happy_var_1 happy_var_2 Overlapping))
                                       [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn56 r))

happyReduce_127 = happyMonadReduce 2# 41# happyReduction_127
happyReduction_127 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ajs (Just (sLL happy_var_1 happy_var_2 Overlaps))
                                       [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn56 r))

happyReduce_128 = happyMonadReduce 2# 41# happyReduction_128
happyReduction_128 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ajs (Just (sLL happy_var_1 happy_var_2 Incoherent))
                                       [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn56 r))

happyReduce_129 = happySpecReduce_0  41# happyReduction_129
happyReduction_129  =  happyIn56
		 (Nothing
	)

happyReduce_130 = happySpecReduce_0  42# happyReduction_130
happyReduction_130  =  happyIn57
		 (noLoc ([],OpenTypeFamily)
	)

happyReduce_131 = happySpecReduce_2  42# happyReduction_131
happyReduction_131 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut58 happy_x_2 of { happy_var_2 -> 
	happyIn57
		 (sLL happy_var_1 happy_var_2 (mj AnnWhere happy_var_1:(fst $ unLoc happy_var_2)
                    ,ClosedTypeFamily (reverse (snd $ unLoc happy_var_2)))
	)}}

happyReduce_132 = happySpecReduce_3  43# happyReduction_132
happyReduction_132 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut59 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn58
		 (sLL happy_var_1 happy_var_3 ([mo happy_var_1,mc happy_var_3]
                                                ,unLoc happy_var_2)
	)}}}

happyReduce_133 = happySpecReduce_3  43# happyReduction_133
happyReduction_133 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut59 happy_x_2 of { happy_var_2 -> 
	happyIn58
		 (let L loc _ = happy_var_2 in
                                             L loc ([],unLoc happy_var_2)
	)}

happyReduce_134 = happySpecReduce_3  43# happyReduction_134
happyReduction_134 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn58
		 (sLL happy_var_1 happy_var_3 ([mo happy_var_1,mj AnnDotdot happy_var_2
                                                 ,mc happy_var_3],[])
	)}}}

happyReduce_135 = happySpecReduce_3  43# happyReduction_135
happyReduction_135 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn58
		 (let L loc _ = happy_var_2 in
                                             L loc ([mj AnnDotdot happy_var_2],[])
	)}

happyReduce_136 = happyMonadReduce 3# 44# happyReduction_136
happyReduction_136 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut59 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut60 happy_x_3 of { happy_var_3 -> 
	( asl (unLoc happy_var_1) happy_var_2 happy_var_3
                                         >> return (sLL happy_var_1 happy_var_3 (happy_var_3 : unLoc happy_var_1)))}}}
	) (\r -> happyReturn (happyIn59 r))

happyReduce_137 = happyMonadReduce 2# 44# happyReduction_137
happyReduction_137 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut59 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( addAnnotation (gl happy_var_1) AnnSemi (gl happy_var_2)
                                         >> return (sLL happy_var_1 happy_var_2  (unLoc happy_var_1)))}}
	) (\r -> happyReturn (happyIn59 r))

happyReduce_138 = happySpecReduce_1  44# happyReduction_138
happyReduction_138 happy_x_1
	 =  case happyOut60 happy_x_1 of { happy_var_1 -> 
	happyIn59
		 (sLL happy_var_1 happy_var_1 [happy_var_1]
	)}

happyReduce_139 = happyMonadReduce 3# 45# happyReduction_139
happyReduction_139 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut119 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut116 happy_x_3 of { happy_var_3 -> 
	( do { eqn <- mkTyFamInstEqn happy_var_1 happy_var_3
                    ; aa (sLL happy_var_1 happy_var_3 eqn) (AnnEqual, happy_var_2) })}}}
	) (\r -> happyReturn (happyIn60 r))

happyReduce_140 = happyMonadReduce 4# 46# happyReduction_140
happyReduction_140 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut62 happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	case happyOut65 happy_x_4 of { happy_var_4 -> 
	( amms (liftM mkTyClD (mkFamDecl (comb3 happy_var_1 happy_var_3 happy_var_4) DataFamily happy_var_3
                                                  (unLoc happy_var_4)))
                        (mj AnnData happy_var_1:happy_var_2))}}}}
	) (\r -> happyReturn (happyIn61 r))

happyReduce_141 = happyMonadReduce 3# 46# happyReduction_141
happyReduction_141 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut119 happy_x_2 of { happy_var_2 -> 
	case happyOut65 happy_x_3 of { happy_var_3 -> 
	( amms (liftM mkTyClD (mkFamDecl (comb3 happy_var_1 happy_var_2 happy_var_3)
                                                  OpenTypeFamily happy_var_2 (unLoc happy_var_3)))
                       [mj AnnType happy_var_1])}}}
	) (\r -> happyReturn (happyIn61 r))

happyReduce_142 = happyMonadReduce 4# 46# happyReduction_142
happyReduction_142 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	case happyOut65 happy_x_4 of { happy_var_4 -> 
	( amms (liftM mkTyClD (mkFamDecl (comb3 happy_var_1 happy_var_3 happy_var_4)
                                                  OpenTypeFamily happy_var_3 (unLoc happy_var_4)))
                       [mj AnnType happy_var_1,mj AnnFamily happy_var_2])}}}}
	) (\r -> happyReturn (happyIn61 r))

happyReduce_143 = happyMonadReduce 2# 46# happyReduction_143
happyReduction_143 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut60 happy_x_2 of { happy_var_2 -> 
	( amms (liftM mkInstD (mkTyFamInst (comb2 happy_var_1 happy_var_2) happy_var_2))
                        [mj AnnType happy_var_1])}}
	) (\r -> happyReturn (happyIn61 r))

happyReduce_144 = happyMonadReduce 3# 46# happyReduction_144
happyReduction_144 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut60 happy_x_3 of { happy_var_3 -> 
	( amms (liftM mkInstD (mkTyFamInst (comb2 happy_var_1 happy_var_3) happy_var_3))
                        [mj AnnType happy_var_1,mj AnnInstance happy_var_2])}}}
	) (\r -> happyReturn (happyIn61 r))

happyReduce_145 = happySpecReduce_0  47# happyReduction_145
happyReduction_145  =  happyIn62
		 ([]
	)

happyReduce_146 = happySpecReduce_1  47# happyReduction_146
happyReduction_146 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn62
		 ([mj AnnFamily happy_var_1]
	)}

happyReduce_147 = happyMonadReduce 2# 48# happyReduction_147
happyReduction_147 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut60 happy_x_2 of { happy_var_2 -> 
	( amms (mkTyFamInst (comb2 happy_var_1 happy_var_2) happy_var_2)
                        [mj AnnType happy_var_1])}}
	) (\r -> happyReturn (happyIn63 r))

happyReduce_148 = happyMonadReduce 5# 48# happyReduction_148
happyReduction_148 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut64 happy_x_1 of { happy_var_1 -> 
	case happyOut67 happy_x_2 of { happy_var_2 -> 
	case happyOut66 happy_x_3 of { happy_var_3 -> 
	case happyOut141 happy_x_4 of { happy_var_4 -> 
	case happyOut149 happy_x_5 of { happy_var_5 -> 
	( amms (mkDataFamInst (comb4 happy_var_1 happy_var_3 happy_var_4 happy_var_5) (snd $ unLoc happy_var_1) happy_var_2 happy_var_3
                                    Nothing (reverse (snd $ unLoc happy_var_4))
                                            (unLoc happy_var_5))
                       ((fst $ unLoc happy_var_1):(fst $ unLoc happy_var_4)))}}}}}
	) (\r -> happyReturn (happyIn63 r))

happyReduce_149 = happyMonadReduce 6# 48# happyReduction_149
happyReduction_149 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut64 happy_x_1 of { happy_var_1 -> 
	case happyOut67 happy_x_2 of { happy_var_2 -> 
	case happyOut66 happy_x_3 of { happy_var_3 -> 
	case happyOut65 happy_x_4 of { happy_var_4 -> 
	case happyOut138 happy_x_5 of { happy_var_5 -> 
	case happyOut149 happy_x_6 of { happy_var_6 -> 
	( amms (mkDataFamInst (comb4 happy_var_1 happy_var_3 happy_var_5 happy_var_6) (snd $ unLoc happy_var_1) happy_var_2
                                happy_var_3 (unLoc happy_var_4) (snd $ unLoc happy_var_5) (unLoc happy_var_6))
                        ((fst $ unLoc happy_var_1):(fst $ unLoc happy_var_5)))}}}}}}
	) (\r -> happyReturn (happyIn63 r))

happyReduce_150 = happySpecReduce_1  49# happyReduction_150
happyReduction_150 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn64
		 (sL1 happy_var_1 (mj AnnData    happy_var_1,DataType)
	)}

happyReduce_151 = happySpecReduce_1  49# happyReduction_151
happyReduction_151 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn64
		 (sL1 happy_var_1 (mj AnnNewtype happy_var_1,NewType)
	)}

happyReduce_152 = happySpecReduce_0  50# happyReduction_152
happyReduction_152  =  happyIn65
		 (noLoc Nothing
	)

happyReduce_153 = happyMonadReduce 2# 50# happyReduction_153
happyReduction_153 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut133 happy_x_2 of { happy_var_2 -> 
	( ajl (sLL happy_var_1 happy_var_2 (Just happy_var_2)) AnnDcolon (gl happy_var_1))}}
	) (\r -> happyReturn (happyIn65 r))

happyReduce_154 = happyMonadReduce 3# 51# happyReduction_154
happyReduction_154 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut118 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	( return (L (comb2 happy_var_1 happy_var_2) (unLoc happy_var_1))
                                       >>= \c@(L l _) ->
                                         (addAnnotation l AnnDarrow (gl happy_var_2))
                                       >> (return (sLL happy_var_1 happy_var_3 (Just c, happy_var_3))))}}}
	) (\r -> happyReturn (happyIn66 r))

happyReduce_155 = happySpecReduce_1  51# happyReduction_155
happyReduction_155 happy_x_1
	 =  case happyOut119 happy_x_1 of { happy_var_1 -> 
	happyIn66
		 (sL1 happy_var_1 (Nothing, happy_var_1)
	)}

happyReduce_156 = happyMonadReduce 4# 52# happyReduction_156
happyReduction_156 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( ajs (Just (sLL happy_var_1 happy_var_4 (CType (Just (Header (getSTRING happy_var_2)))
                                        (getSTRING happy_var_3))))
                              [mo happy_var_1,mj AnnHeader happy_var_2,mj AnnVal happy_var_3,mc happy_var_4])}}}}
	) (\r -> happyReturn (happyIn67 r))

happyReduce_157 = happyMonadReduce 3# 52# happyReduction_157
happyReduction_157 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ajs (Just (sLL happy_var_1 happy_var_3 (CType Nothing  (getSTRING happy_var_2))))
                              [mo happy_var_1,mj AnnVal happy_var_2,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn67 r))

happyReduce_158 = happySpecReduce_0  52# happyReduction_158
happyReduction_158  =  happyIn67
		 (Nothing
	)

happyReduce_159 = happyMonadReduce 4# 53# happyReduction_159
happyReduction_159 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut56 happy_x_3 of { happy_var_3 -> 
	case happyOut123 happy_x_4 of { happy_var_4 -> 
	( do {
                                 let err = text "in the stand-alone deriving instance"
                                            <> colon <+> quotes (ppr happy_var_4)
                               ; checkNoPartialType err happy_var_4
                               ; ams (sLL happy_var_1 happy_var_4 (DerivDecl happy_var_4 happy_var_3))
                                     [mj AnnDeriving happy_var_1,mj AnnInstance happy_var_2] })}}}}
	) (\r -> happyReturn (happyIn68 r))

happyReduce_160 = happyMonadReduce 4# 54# happyReduction_160
happyReduction_160 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut229 happy_x_3 of { happy_var_3 -> 
	case happyOut70 happy_x_4 of { happy_var_4 -> 
	( amms (mkRoleAnnotDecl (comb3 happy_var_1 happy_var_3 happy_var_4) happy_var_3 (reverse (unLoc happy_var_4)))
                  [mj AnnType happy_var_1,mj AnnRole happy_var_2])}}}}
	) (\r -> happyReturn (happyIn69 r))

happyReduce_161 = happySpecReduce_0  55# happyReduction_161
happyReduction_161  =  happyIn70
		 (noLoc []
	)

happyReduce_162 = happySpecReduce_1  55# happyReduction_162
happyReduction_162 happy_x_1
	 =  case happyOut71 happy_x_1 of { happy_var_1 -> 
	happyIn70
		 (happy_var_1
	)}

happyReduce_163 = happySpecReduce_1  56# happyReduction_163
happyReduction_163 happy_x_1
	 =  case happyOut72 happy_x_1 of { happy_var_1 -> 
	happyIn71
		 (sLL happy_var_1 happy_var_1 [happy_var_1]
	)}

happyReduce_164 = happySpecReduce_2  56# happyReduction_164
happyReduction_164 happy_x_2
	happy_x_1
	 =  case happyOut71 happy_x_1 of { happy_var_1 -> 
	case happyOut72 happy_x_2 of { happy_var_2 -> 
	happyIn71
		 (sLL happy_var_1 happy_var_2 $ happy_var_2 : unLoc happy_var_1
	)}}

happyReduce_165 = happySpecReduce_1  57# happyReduction_165
happyReduction_165 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn72
		 (sL1 happy_var_1 $ Just $ getVARID happy_var_1
	)}

happyReduce_166 = happySpecReduce_1  57# happyReduction_166
happyReduction_166 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn72
		 (sL1 happy_var_1 Nothing
	)}

happyReduce_167 = happyMonadReduce 4# 58# happyReduction_167
happyReduction_167 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut74 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut199 happy_x_4 of { happy_var_4 -> 
	(ams ( let (name, args) = happy_var_2
                 in sLL happy_var_1 happy_var_4 . ValD $ mkPatSynBind name args happy_var_4
                                                    ImplicitBidirectional)
               [mj AnnPattern happy_var_1,mj AnnEqual happy_var_3])}}}}
	) (\r -> happyReturn (happyIn73 r))

happyReduce_168 = happyMonadReduce 4# 58# happyReduction_168
happyReduction_168 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut74 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut199 happy_x_4 of { happy_var_4 -> 
	(ams (let (name, args) = happy_var_2
                in sLL happy_var_1 happy_var_4 . ValD $ mkPatSynBind name args happy_var_4 Unidirectional)
               [mj AnnPattern happy_var_1,mj AnnLarrow happy_var_3])}}}}
	) (\r -> happyReturn (happyIn73 r))

happyReduce_169 = happyMonadReduce 5# 58# happyReduction_169
happyReduction_169 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut74 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut199 happy_x_4 of { happy_var_4 -> 
	case happyOut76 happy_x_5 of { happy_var_5 -> 
	( do { let (name, args) = happy_var_2
                  ; mg <- mkPatSynMatchGroup name (snd $ unLoc happy_var_5)
                  ; ams (sLL happy_var_1 happy_var_5 . ValD $
                           mkPatSynBind name args happy_var_4 (ExplicitBidirectional mg))
                        (mj AnnPattern happy_var_1:mj AnnLarrow happy_var_3:(fst $ unLoc happy_var_5))
                   })}}}}}
	) (\r -> happyReturn (happyIn73 r))

happyReduce_170 = happySpecReduce_2  59# happyReduction_170
happyReduction_170 happy_x_2
	happy_x_1
	 =  case happyOut222 happy_x_1 of { happy_var_1 -> 
	case happyOut75 happy_x_2 of { happy_var_2 -> 
	happyIn74
		 ((happy_var_1, PrefixPatSyn happy_var_2)
	)}}

happyReduce_171 = happySpecReduce_3  59# happyReduction_171
happyReduction_171 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut247 happy_x_1 of { happy_var_1 -> 
	case happyOut258 happy_x_2 of { happy_var_2 -> 
	case happyOut247 happy_x_3 of { happy_var_3 -> 
	happyIn74
		 ((happy_var_2, InfixPatSyn happy_var_1 happy_var_3)
	)}}}

happyReduce_172 = happySpecReduce_0  60# happyReduction_172
happyReduction_172  =  happyIn75
		 ([]
	)

happyReduce_173 = happySpecReduce_2  60# happyReduction_173
happyReduction_173 happy_x_2
	happy_x_1
	 =  case happyOut247 happy_x_1 of { happy_var_1 -> 
	case happyOut75 happy_x_2 of { happy_var_2 -> 
	happyIn75
		 (happy_var_1 : happy_var_2
	)}}

happyReduce_174 = happyReduce 4# 61# happyReduction_174
happyReduction_174 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut87 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	happyIn76
		 (sLL happy_var_1 happy_var_4 ([mj AnnWhere happy_var_1,mo happy_var_2
                                            ,mc happy_var_4],happy_var_3)
	) `HappyStk` happyRest}}}}

happyReduce_175 = happyReduce 4# 61# happyReduction_175
happyReduction_175 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut87 happy_x_3 of { happy_var_3 -> 
	happyIn76
		 (L (comb2 happy_var_1 happy_var_3) ([mj AnnWhere happy_var_1]
                                          ,happy_var_3)
	) `HappyStk` happyRest}}

happyReduce_176 = happyMonadReduce 4# 62# happyReduction_176
happyReduction_176 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut222 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut78 happy_x_4 of { happy_var_4 -> 
	( do { let (flag, qtvs, prov, req, ty) = snd $ unLoc happy_var_4
                  ; let sig = PatSynSig happy_var_2 (flag, mkHsQTvs qtvs) prov req ty
                  ; checkValidPatSynSig sig
                  ; ams (sLL happy_var_1 happy_var_4 $ sig)
                        (mj AnnPattern happy_var_1:mj AnnDcolon happy_var_3:(fst $ unLoc happy_var_4)) })}}}}
	) (\r -> happyReturn (happyIn77 r))

happyReduce_177 = happyMonadReduce 4# 63# happyReduction_177
happyReduction_177 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut127 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut78 happy_x_4 of { happy_var_4 -> 
	( do { hintExplicitForall (getLoc happy_var_1)
                  ; let (_, qtvs', prov, req, ty) = snd $ unLoc happy_var_4
                  ; return $ sLL happy_var_1 happy_var_4
                                ((mj AnnForall happy_var_1:mj AnnDot happy_var_3:(fst $ unLoc happy_var_4))
                                ,(Explicit, happy_var_2 ++ qtvs', prov, req ,ty)) })}}}}
	) (\r -> happyReturn (happyIn78 r))

happyReduce_178 = happyReduce 5# 63# happyReduction_178
happyReduction_178 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut118 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut118 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut119 happy_x_5 of { happy_var_5 -> 
	happyIn78
		 (sLL happy_var_1 happy_var_5 ([mj AnnDarrow happy_var_2,mj AnnDarrow happy_var_4]
                        ,(Implicit, [], happy_var_1, happy_var_3, happy_var_5))
	) `HappyStk` happyRest}}}}}

happyReduce_179 = happySpecReduce_3  63# happyReduction_179
happyReduction_179 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut118 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	happyIn78
		 (sLL happy_var_1 happy_var_3 ([mj AnnDarrow happy_var_2],(Implicit, [], happy_var_1, noLoc [], happy_var_3))
	)}}}

happyReduce_180 = happySpecReduce_1  63# happyReduction_180
happyReduction_180 happy_x_1
	 =  case happyOut119 happy_x_1 of { happy_var_1 -> 
	happyIn78
		 (sL1 happy_var_1 ([],(Implicit, [], noLoc [], noLoc [], happy_var_1))
	)}

happyReduce_181 = happySpecReduce_1  64# happyReduction_181
happyReduction_181 happy_x_1
	 =  case happyOut61 happy_x_1 of { happy_var_1 -> 
	happyIn79
		 (sLL happy_var_1 happy_var_1 (unitOL happy_var_1)
	)}

happyReduce_182 = happySpecReduce_1  64# happyReduction_182
happyReduction_182 happy_x_1
	 =  case happyOut153 happy_x_1 of { happy_var_1 -> 
	happyIn79
		 (happy_var_1
	)}

happyReduce_183 = happyMonadReduce 4# 64# happyReduction_183
happyReduction_183 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut162 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut112 happy_x_4 of { happy_var_4 -> 
	( do { (TypeSig l ty _) <- checkValSig happy_var_2 happy_var_4
                          ; let err = text "in default signature" <> colon <+>
                                      quotes (ppr ty)
                          ; checkNoPartialType err ty
                          ; ams (sLL happy_var_1 happy_var_4 $ unitOL (sLL happy_var_1 happy_var_4 $ SigD (GenericSig l ty)))
                                [mj AnnDefault happy_var_1,mj AnnDcolon happy_var_3] })}}}}
	) (\r -> happyReturn (happyIn79 r))

happyReduce_184 = happyMonadReduce 3# 65# happyReduction_184
happyReduction_184 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut80 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut79 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (oll (unLoc happy_var_1)) AnnSemi (gl happy_var_2)
                                           >> return (sLL happy_var_1 happy_var_3 ((unLoc happy_var_1) `appOL`
                                                                    unLoc happy_var_3)))}}}
	) (\r -> happyReturn (happyIn80 r))

happyReduce_185 = happyMonadReduce 2# 65# happyReduction_185
happyReduction_185 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut80 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( addAnnotation (oll (unLoc happy_var_1)) AnnSemi (gl happy_var_2)
                                           >> return (sLL happy_var_1 happy_var_2  (unLoc happy_var_1)))}}
	) (\r -> happyReturn (happyIn80 r))

happyReduce_186 = happySpecReduce_1  65# happyReduction_186
happyReduction_186 happy_x_1
	 =  case happyOut79 happy_x_1 of { happy_var_1 -> 
	happyIn80
		 (happy_var_1
	)}

happyReduce_187 = happySpecReduce_0  65# happyReduction_187
happyReduction_187  =  happyIn80
		 (noLoc nilOL
	)

happyReduce_188 = happySpecReduce_3  66# happyReduction_188
happyReduction_188 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut80 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn81
		 (sLL happy_var_1 happy_var_3  ([mo happy_var_1,mc happy_var_3]
                                             ,unLoc happy_var_2)
	)}}}

happyReduce_189 = happySpecReduce_3  66# happyReduction_189
happyReduction_189 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut80 happy_x_2 of { happy_var_2 -> 
	happyIn81
		 (L (gl happy_var_2) ([],unLoc happy_var_2)
	)}

happyReduce_190 = happySpecReduce_2  67# happyReduction_190
happyReduction_190 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut81 happy_x_2 of { happy_var_2 -> 
	happyIn82
		 (sLL happy_var_1 happy_var_2 (mj AnnWhere happy_var_1:(fst $ unLoc happy_var_2)
                                             ,snd $ unLoc happy_var_2)
	)}}

happyReduce_191 = happySpecReduce_0  67# happyReduction_191
happyReduction_191  =  happyIn82
		 (noLoc ([],nilOL)
	)

happyReduce_192 = happySpecReduce_1  68# happyReduction_192
happyReduction_192 happy_x_1
	 =  case happyOut63 happy_x_1 of { happy_var_1 -> 
	happyIn83
		 (sLL happy_var_1 happy_var_1 (unitOL (sL1 happy_var_1 (InstD (unLoc happy_var_1))))
	)}

happyReduce_193 = happySpecReduce_1  68# happyReduction_193
happyReduction_193 happy_x_1
	 =  case happyOut153 happy_x_1 of { happy_var_1 -> 
	happyIn83
		 (happy_var_1
	)}

happyReduce_194 = happyMonadReduce 3# 69# happyReduction_194
happyReduction_194 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut84 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut83 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (oll $ unLoc happy_var_1) AnnSemi (gl happy_var_2)
                                           >> return
                                            (sLL happy_var_1 happy_var_3 ((unLoc happy_var_1) `appOL` unLoc happy_var_3)))}}}
	) (\r -> happyReturn (happyIn84 r))

happyReduce_195 = happyMonadReduce 2# 69# happyReduction_195
happyReduction_195 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut84 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( addAnnotation (oll $ unLoc happy_var_1) AnnSemi (gl happy_var_2)
                                           >> return (sLL happy_var_1 happy_var_2 (unLoc happy_var_1)))}}
	) (\r -> happyReturn (happyIn84 r))

happyReduce_196 = happySpecReduce_1  69# happyReduction_196
happyReduction_196 happy_x_1
	 =  case happyOut83 happy_x_1 of { happy_var_1 -> 
	happyIn84
		 (happy_var_1
	)}

happyReduce_197 = happySpecReduce_0  69# happyReduction_197
happyReduction_197  =  happyIn84
		 (noLoc nilOL
	)

happyReduce_198 = happySpecReduce_3  70# happyReduction_198
happyReduction_198 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut84 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn85
		 (sLL happy_var_1 happy_var_3 ([mo happy_var_1,mc happy_var_3],unLoc happy_var_2)
	)}}}

happyReduce_199 = happySpecReduce_3  70# happyReduction_199
happyReduction_199 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut84 happy_x_2 of { happy_var_2 -> 
	happyIn85
		 (L (gl happy_var_2) ([],unLoc happy_var_2)
	)}

happyReduce_200 = happySpecReduce_2  71# happyReduction_200
happyReduction_200 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut85 happy_x_2 of { happy_var_2 -> 
	happyIn86
		 (sLL happy_var_1 happy_var_2 (mj AnnWhere happy_var_1:(fst $ unLoc happy_var_2)
                                             ,(snd $ unLoc happy_var_2))
	)}}

happyReduce_201 = happySpecReduce_0  71# happyReduction_201
happyReduction_201  =  happyIn86
		 (noLoc ([],nilOL)
	)

happyReduce_202 = happyMonadReduce 3# 72# happyReduction_202
happyReduction_202 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut87 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut153 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (oll $ unLoc happy_var_1) AnnSemi (gl happy_var_2)
                                           >> return (
                                          let { this = unLoc happy_var_3;
                                    rest = unLoc happy_var_1;
                                    these = rest `appOL` this }
                              in rest `seq` this `seq` these `seq`
                                    sLL happy_var_1 happy_var_3 these))}}}
	) (\r -> happyReturn (happyIn87 r))

happyReduce_203 = happyMonadReduce 2# 72# happyReduction_203
happyReduction_203 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut87 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( addAnnotation (oll $ unLoc happy_var_1) AnnSemi (gl happy_var_2)
                                           >> return (sLL happy_var_1 happy_var_2 (unLoc happy_var_1)))}}
	) (\r -> happyReturn (happyIn87 r))

happyReduce_204 = happySpecReduce_1  72# happyReduction_204
happyReduction_204 happy_x_1
	 =  case happyOut153 happy_x_1 of { happy_var_1 -> 
	happyIn87
		 (happy_var_1
	)}

happyReduce_205 = happySpecReduce_0  72# happyReduction_205
happyReduction_205  =  happyIn87
		 (noLoc nilOL
	)

happyReduce_206 = happySpecReduce_3  73# happyReduction_206
happyReduction_206 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut87 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn88
		 (sLL happy_var_1 happy_var_3 ([mo happy_var_1,mc happy_var_3],unLoc happy_var_2)
	)}}}

happyReduce_207 = happySpecReduce_3  73# happyReduction_207
happyReduction_207 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut87 happy_x_2 of { happy_var_2 -> 
	happyIn88
		 (L (gl happy_var_2) ([],unLoc happy_var_2)
	)}

happyReduce_208 = happyMonadReduce 1# 74# happyReduction_208
happyReduction_208 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut88 happy_x_1 of { happy_var_1 -> 
	( do { val_binds <- cvBindGroup (snd $ unLoc happy_var_1)
                                  ; return (sL1 happy_var_1 (fst $ unLoc happy_var_1
                                                    ,HsValBinds val_binds)) })}
	) (\r -> happyReturn (happyIn89 r))

happyReduce_209 = happySpecReduce_3  74# happyReduction_209
happyReduction_209 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut212 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn89
		 (sLL happy_var_1 happy_var_3 ([mo happy_var_1,mc happy_var_3]
                                             ,HsIPBinds (IPBinds (unLoc happy_var_2)
                                                         emptyTcEvBinds))
	)}}}

happyReduce_210 = happySpecReduce_3  74# happyReduction_210
happyReduction_210 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut212 happy_x_2 of { happy_var_2 -> 
	happyIn89
		 (L (getLoc happy_var_2) ([]
                                            ,HsIPBinds (IPBinds (unLoc happy_var_2)
                                                        emptyTcEvBinds))
	)}

happyReduce_211 = happySpecReduce_2  75# happyReduction_211
happyReduction_211 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut89 happy_x_2 of { happy_var_2 -> 
	happyIn90
		 (sLL happy_var_1 happy_var_2 (mj AnnWhere happy_var_1 : (fst $ unLoc happy_var_2)
                                             ,snd $ unLoc happy_var_2)
	)}}

happyReduce_212 = happySpecReduce_0  75# happyReduction_212
happyReduction_212  =  happyIn90
		 (noLoc ([],emptyLocalBinds)
	)

happyReduce_213 = happyMonadReduce 3# 76# happyReduction_213
happyReduction_213 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut91 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut92 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (oll happy_var_1) AnnSemi (gl happy_var_2)
                                          >> return (happy_var_1 `snocOL` happy_var_3))}}}
	) (\r -> happyReturn (happyIn91 r))

happyReduce_214 = happyMonadReduce 2# 76# happyReduction_214
happyReduction_214 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut91 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( addAnnotation (oll happy_var_1) AnnSemi (gl happy_var_2)
                                          >> return happy_var_1)}}
	) (\r -> happyReturn (happyIn91 r))

happyReduce_215 = happySpecReduce_1  76# happyReduction_215
happyReduction_215 happy_x_1
	 =  case happyOut92 happy_x_1 of { happy_var_1 -> 
	happyIn91
		 (unitOL happy_var_1
	)}

happyReduce_216 = happySpecReduce_0  76# happyReduction_216
happyReduction_216  =  happyIn91
		 (nilOL
	)

happyReduce_217 = happyMonadReduce 6# 77# happyReduction_217
happyReduction_217 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut93 happy_x_2 of { happy_var_2 -> 
	case happyOut95 happy_x_3 of { happy_var_3 -> 
	case happyOut162 happy_x_4 of { happy_var_4 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	case happyOut161 happy_x_6 of { happy_var_6 -> 
	(ams (sLL happy_var_1 happy_var_6 $ RuleD (HsRule (L (gl happy_var_1) (getSTRING happy_var_1))
                                  ((snd happy_var_2) `orElse` AlwaysActive)
                                  (snd happy_var_3) happy_var_4 placeHolderNames happy_var_6
                                  placeHolderNames))
               (mj AnnEqual happy_var_5 : (fst happy_var_2) ++ (fst happy_var_3)))}}}}}}
	) (\r -> happyReturn (happyIn92 r))

happyReduce_218 = happySpecReduce_0  78# happyReduction_218
happyReduction_218  =  happyIn93
		 (([],Nothing)
	)

happyReduce_219 = happySpecReduce_1  78# happyReduction_219
happyReduction_219 happy_x_1
	 =  case happyOut94 happy_x_1 of { happy_var_1 -> 
	happyIn93
		 ((fst happy_var_1,Just (snd happy_var_1))
	)}

happyReduce_220 = happySpecReduce_3  79# happyReduction_220
happyReduction_220 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn94
		 (([mo happy_var_1,mj AnnVal happy_var_2,mc happy_var_3]
                                  ,ActiveAfter  (fromInteger (getINTEGER happy_var_2)))
	)}}}

happyReduce_221 = happyReduce 4# 79# happyReduction_221
happyReduction_221 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	happyIn94
		 (([mo happy_var_1,mj AnnTilde happy_var_2,mj AnnVal happy_var_3,mc happy_var_4]
                                  ,ActiveBefore (fromInteger (getINTEGER happy_var_3)))
	) `HappyStk` happyRest}}}}

happyReduce_222 = happySpecReduce_3  79# happyReduction_222
happyReduction_222 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn94
		 (([mo happy_var_1,mj AnnTilde happy_var_2,mc happy_var_3]
                                  ,NeverActive)
	)}}}

happyReduce_223 = happySpecReduce_3  80# happyReduction_223
happyReduction_223 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut96 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn95
		 (([mj AnnForall happy_var_1,mj AnnDot happy_var_3],happy_var_2)
	)}}}

happyReduce_224 = happySpecReduce_0  80# happyReduction_224
happyReduction_224  =  happyIn95
		 (([],[])
	)

happyReduce_225 = happySpecReduce_1  81# happyReduction_225
happyReduction_225 happy_x_1
	 =  case happyOut97 happy_x_1 of { happy_var_1 -> 
	happyIn96
		 ([happy_var_1]
	)}

happyReduce_226 = happySpecReduce_2  81# happyReduction_226
happyReduction_226 happy_x_2
	happy_x_1
	 =  case happyOut97 happy_x_1 of { happy_var_1 -> 
	case happyOut96 happy_x_2 of { happy_var_2 -> 
	happyIn96
		 (happy_var_1 : happy_var_2
	)}}

happyReduce_227 = happySpecReduce_1  82# happyReduction_227
happyReduction_227 happy_x_1
	 =  case happyOut247 happy_x_1 of { happy_var_1 -> 
	happyIn97
		 (sLL happy_var_1 happy_var_1 (RuleBndr happy_var_1)
	)}

happyReduce_228 = happyMonadReduce 5# 82# happyReduction_228
happyReduction_228 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut247 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut116 happy_x_4 of { happy_var_4 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	( ams (sLL happy_var_1 happy_var_5 (RuleBndrSig happy_var_2
                                                         (mkHsWithBndrs happy_var_4)))
                                                 [mo happy_var_1,mj AnnDcolon happy_var_3,mc happy_var_5])}}}}}
	) (\r -> happyReturn (happyIn97 r))

happyReduce_229 = happyMonadReduce 3# 83# happyReduction_229
happyReduction_229 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut98 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut99 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (oll happy_var_1) AnnSemi (gl happy_var_2)
                                          >> return (happy_var_1 `appOL` happy_var_3))}}}
	) (\r -> happyReturn (happyIn98 r))

happyReduce_230 = happyMonadReduce 2# 83# happyReduction_230
happyReduction_230 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut98 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( addAnnotation (oll happy_var_1) AnnSemi (gl happy_var_2)
                                          >> return happy_var_1)}}
	) (\r -> happyReturn (happyIn98 r))

happyReduce_231 = happySpecReduce_1  83# happyReduction_231
happyReduction_231 happy_x_1
	 =  case happyOut99 happy_x_1 of { happy_var_1 -> 
	happyIn98
		 (happy_var_1
	)}

happyReduce_232 = happySpecReduce_0  83# happyReduction_232
happyReduction_232  =  happyIn98
		 (nilOL
	)

happyReduce_233 = happySpecReduce_2  84# happyReduction_233
happyReduction_233 happy_x_2
	happy_x_1
	 =  case happyOut219 happy_x_1 of { happy_var_1 -> 
	case happyOut102 happy_x_2 of { happy_var_2 -> 
	happyIn99
		 (toOL [ sLL happy_var_1 happy_var_2 $ WarningD (Warning n (WarningTxt $ snd $ unLoc happy_var_2))
                       | n <- unLoc happy_var_1 ]
	)}}

happyReduce_234 = happyMonadReduce 3# 85# happyReduction_234
happyReduction_234 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut100 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut101 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (oll happy_var_1) AnnSemi (gl happy_var_2)
                                          >> return (happy_var_1 `appOL` happy_var_3))}}}
	) (\r -> happyReturn (happyIn100 r))

happyReduce_235 = happyMonadReduce 2# 85# happyReduction_235
happyReduction_235 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut100 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( addAnnotation (oll happy_var_1) AnnSemi (gl happy_var_2)
                                          >> return happy_var_1)}}
	) (\r -> happyReturn (happyIn100 r))

happyReduce_236 = happySpecReduce_1  85# happyReduction_236
happyReduction_236 happy_x_1
	 =  case happyOut101 happy_x_1 of { happy_var_1 -> 
	happyIn100
		 (happy_var_1
	)}

happyReduce_237 = happySpecReduce_0  85# happyReduction_237
happyReduction_237  =  happyIn100
		 (nilOL
	)

happyReduce_238 = happySpecReduce_2  86# happyReduction_238
happyReduction_238 happy_x_2
	happy_x_1
	 =  case happyOut219 happy_x_1 of { happy_var_1 -> 
	case happyOut102 happy_x_2 of { happy_var_2 -> 
	happyIn101
		 (toOL [ sLL happy_var_1 happy_var_2 $ WarningD (Warning n (DeprecatedTxt $ snd $ unLoc happy_var_2))
                    | n <- unLoc happy_var_1 ]
	)}}

happyReduce_239 = happySpecReduce_1  87# happyReduction_239
happyReduction_239 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn102
		 (sL1 happy_var_1 ([],[L (gl happy_var_1) (getSTRING happy_var_1)])
	)}

happyReduce_240 = happySpecReduce_3  87# happyReduction_240
happyReduction_240 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut103 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn102
		 (sLL happy_var_1 happy_var_3 $ ([mo happy_var_1,mc happy_var_3],fromOL (unLoc happy_var_2))
	)}}}

happyReduce_241 = happyMonadReduce 3# 88# happyReduction_241
happyReduction_241 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut103 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl happy_var_3) AnnComma (gl happy_var_2) >>
                               return (sLL happy_var_1 happy_var_3 (unLoc happy_var_1 `snocOL`
                                                  (L (gl happy_var_3) (getSTRING happy_var_3)))))}}}
	) (\r -> happyReturn (happyIn103 r))

happyReduce_242 = happySpecReduce_1  88# happyReduction_242
happyReduction_242 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn103
		 (sLL happy_var_1 happy_var_1 (unitOL (L (gl happy_var_1) (getSTRING happy_var_1)))
	)}

happyReduce_243 = happyMonadReduce 4# 89# happyReduction_243
happyReduction_243 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut220 happy_x_2 of { happy_var_2 -> 
	case happyOut168 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( ams (sLL happy_var_1 happy_var_4 (AnnD $ HsAnnotation
                                            (ValueAnnProvenance (unLoc happy_var_2)) happy_var_3))
                                            [mo happy_var_1,mc happy_var_4])}}}}
	) (\r -> happyReturn (happyIn104 r))

happyReduce_244 = happyMonadReduce 5# 89# happyReduction_244
happyReduction_244 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut232 happy_x_3 of { happy_var_3 -> 
	case happyOut168 happy_x_4 of { happy_var_4 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	( ams (sLL happy_var_1 happy_var_5 (AnnD $ HsAnnotation
                                            (TypeAnnProvenance (unLoc happy_var_3)) happy_var_4))
                                            [mo happy_var_1,mj AnnType happy_var_2,mc happy_var_5])}}}}}
	) (\r -> happyReturn (happyIn104 r))

happyReduce_245 = happyMonadReduce 4# 89# happyReduction_245
happyReduction_245 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut168 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( ams (sLL happy_var_1 happy_var_4 (AnnD $ HsAnnotation
                                                 ModuleAnnProvenance happy_var_3))
                                                [mo happy_var_1,mj AnnModule happy_var_2,mc happy_var_4])}}}}
	) (\r -> happyReturn (happyIn104 r))

happyReduce_246 = happyMonadReduce 4# 90# happyReduction_246
happyReduction_246 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut106 happy_x_2 of { happy_var_2 -> 
	case happyOut107 happy_x_3 of { happy_var_3 -> 
	case happyOut108 happy_x_4 of { happy_var_4 -> 
	( mkImport happy_var_2 happy_var_3 (snd $ unLoc happy_var_4) >>= \i ->
                  ams (sLL happy_var_1 happy_var_4 i) (mj AnnImport happy_var_1 : (fst $ unLoc happy_var_4)))}}}}
	) (\r -> happyReturn (happyIn105 r))

happyReduce_247 = happyMonadReduce 3# 90# happyReduction_247
happyReduction_247 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut106 happy_x_2 of { happy_var_2 -> 
	case happyOut108 happy_x_3 of { happy_var_3 -> 
	( do { d <- mkImport happy_var_2 (noLoc PlaySafe) (snd $ unLoc happy_var_3);
                        ams (sLL happy_var_1 happy_var_3 d) (mj AnnImport happy_var_1 : (fst $ unLoc happy_var_3)) })}}}
	) (\r -> happyReturn (happyIn105 r))

happyReduce_248 = happyMonadReduce 3# 90# happyReduction_248
happyReduction_248 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut106 happy_x_2 of { happy_var_2 -> 
	case happyOut108 happy_x_3 of { happy_var_3 -> 
	( mkExport happy_var_2 (snd $ unLoc happy_var_3) >>= \i ->
                   ams (sLL happy_var_1 happy_var_3 i) (mj AnnExport happy_var_1 : (fst $ unLoc happy_var_3)))}}}
	) (\r -> happyReturn (happyIn105 r))

happyReduce_249 = happySpecReduce_1  91# happyReduction_249
happyReduction_249 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn106
		 (sLL happy_var_1 happy_var_1 StdCallConv
	)}

happyReduce_250 = happySpecReduce_1  91# happyReduction_250
happyReduction_250 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn106
		 (sLL happy_var_1 happy_var_1 CCallConv
	)}

happyReduce_251 = happySpecReduce_1  91# happyReduction_251
happyReduction_251 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn106
		 (sLL happy_var_1 happy_var_1 CApiConv
	)}

happyReduce_252 = happySpecReduce_1  91# happyReduction_252
happyReduction_252 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn106
		 (sLL happy_var_1 happy_var_1 PrimCallConv
	)}

happyReduce_253 = happySpecReduce_1  91# happyReduction_253
happyReduction_253 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn106
		 (sLL happy_var_1 happy_var_1 JavaScriptCallConv
	)}

happyReduce_254 = happySpecReduce_1  92# happyReduction_254
happyReduction_254 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn107
		 (sLL happy_var_1 happy_var_1 PlayRisky
	)}

happyReduce_255 = happySpecReduce_1  92# happyReduction_255
happyReduction_255 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn107
		 (sLL happy_var_1 happy_var_1 PlaySafe
	)}

happyReduce_256 = happySpecReduce_1  92# happyReduction_256
happyReduction_256 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn107
		 (sLL happy_var_1 happy_var_1 PlayInterruptible
	)}

happyReduce_257 = happyReduce 4# 93# happyReduction_257
happyReduction_257 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut244 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut112 happy_x_4 of { happy_var_4 -> 
	happyIn108
		 (sLL happy_var_1 happy_var_4 ([mj AnnDcolon happy_var_3]
                                             ,(L (getLoc happy_var_1)
                                                    (getSTRING happy_var_1), happy_var_2, happy_var_4))
	) `HappyStk` happyRest}}}}

happyReduce_258 = happySpecReduce_3  93# happyReduction_258
happyReduction_258 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut244 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut112 happy_x_3 of { happy_var_3 -> 
	happyIn108
		 (sLL happy_var_1 happy_var_3 ([mj AnnDcolon happy_var_2]
                                             ,(noLoc nilFS, happy_var_1, happy_var_3))
	)}}}

happyReduce_259 = happySpecReduce_0  94# happyReduction_259
happyReduction_259  =  happyIn109
		 (([],Nothing)
	)

happyReduce_260 = happySpecReduce_2  94# happyReduction_260
happyReduction_260 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut111 happy_x_2 of { happy_var_2 -> 
	happyIn109
		 (([mj AnnDcolon happy_var_1],Just happy_var_2)
	)}}

happyReduce_261 = happySpecReduce_0  95# happyReduction_261
happyReduction_261  =  happyIn110
		 (([],Nothing)
	)

happyReduce_262 = happySpecReduce_2  95# happyReduction_262
happyReduction_262 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut122 happy_x_2 of { happy_var_2 -> 
	happyIn110
		 (([mj AnnDcolon happy_var_1],Just happy_var_2)
	)}}

happyReduce_263 = happySpecReduce_1  96# happyReduction_263
happyReduction_263 happy_x_1
	 =  case happyOut116 happy_x_1 of { happy_var_1 -> 
	happyIn111
		 (sL1 happy_var_1 (mkImplicitHsForAllTy (noLoc []) happy_var_1)
	)}

happyReduce_264 = happySpecReduce_1  97# happyReduction_264
happyReduction_264 happy_x_1
	 =  case happyOut117 happy_x_1 of { happy_var_1 -> 
	happyIn112
		 (sL1 happy_var_1 (mkImplicitHsForAllTy (noLoc []) happy_var_1)
	)}

happyReduce_265 = happyMonadReduce 3# 98# happyReduction_265
happyReduction_265 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut113 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut244 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl happy_var_3) AnnComma (gl happy_var_2)
                                          >> return (sLL happy_var_1 happy_var_3 (happy_var_3 : unLoc happy_var_1)))}}}
	) (\r -> happyReturn (happyIn113 r))

happyReduce_266 = happySpecReduce_1  98# happyReduction_266
happyReduction_266 happy_x_1
	 =  case happyOut244 happy_x_1 of { happy_var_1 -> 
	happyIn113
		 (sL1 happy_var_1 [happy_var_1]
	)}

happyReduce_267 = happySpecReduce_1  99# happyReduction_267
happyReduction_267 happy_x_1
	 =  case happyOut111 happy_x_1 of { happy_var_1 -> 
	happyIn114
		 (unitOL happy_var_1
	)}

happyReduce_268 = happyMonadReduce 3# 99# happyReduction_268
happyReduction_268 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut111 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut114 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl happy_var_1) AnnComma (gl happy_var_2)
                                          >> return ((unitOL happy_var_1) `appOL` happy_var_3))}}}
	) (\r -> happyReturn (happyIn114 r))

happyReduce_269 = happySpecReduce_1  100# happyReduction_269
happyReduction_269 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn115
		 (sL1 happy_var_1    ([],            HsUserBang Nothing      True)
	)}

happyReduce_270 = happySpecReduce_2  100# happyReduction_270
happyReduction_270 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn115
		 (sLL happy_var_1 happy_var_2 ([mo happy_var_1,mc happy_var_2], HsUserBang (Just True)  False)
	)}}

happyReduce_271 = happySpecReduce_2  100# happyReduction_271
happyReduction_271 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn115
		 (sLL happy_var_1 happy_var_2 ([mo happy_var_1,mc happy_var_2], HsUserBang (Just False) False)
	)}}

happyReduce_272 = happySpecReduce_3  100# happyReduction_272
happyReduction_272 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn115
		 (sLL happy_var_1 happy_var_3 ([mo happy_var_1,mc happy_var_2], HsUserBang (Just True)  True)
	)}}}

happyReduce_273 = happySpecReduce_3  100# happyReduction_273
happyReduction_273 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn115
		 (sLL happy_var_1 happy_var_3 ([mo happy_var_1,mc happy_var_2], HsUserBang (Just False) True)
	)}}}

happyReduce_274 = happyMonadReduce 4# 101# happyReduction_274
happyReduction_274 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut127 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut116 happy_x_4 of { happy_var_4 -> 
	( hintExplicitForall (getLoc happy_var_1) >>
                                           ams (sLL happy_var_1 happy_var_4 $ mkExplicitHsForAllTy happy_var_2
                                                                 (noLoc []) happy_var_4)
                                               [mj AnnForall happy_var_1,mj AnnDot happy_var_3])}}}}
	) (\r -> happyReturn (happyIn116 r))

happyReduce_275 = happyMonadReduce 3# 101# happyReduction_275
happyReduction_275 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut118 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut116 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ mkQualifiedHsForAllTy
                                                                         happy_var_1 happy_var_3)
                                              [mj AnnDarrow happy_var_2])}}}
	) (\r -> happyReturn (happyIn116 r))

happyReduce_276 = happyMonadReduce 3# 101# happyReduction_276
happyReduction_276 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut214 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (HsIParamTy (unLoc happy_var_1) happy_var_3))
                                               [mj AnnVal happy_var_1,mj AnnDcolon happy_var_2])}}}
	) (\r -> happyReturn (happyIn116 r))

happyReduce_277 = happySpecReduce_1  101# happyReduction_277
happyReduction_277 happy_x_1
	 =  case happyOut119 happy_x_1 of { happy_var_1 -> 
	happyIn116
		 (happy_var_1
	)}

happyReduce_278 = happyMonadReduce 4# 102# happyReduction_278
happyReduction_278 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut127 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut117 happy_x_4 of { happy_var_4 -> 
	( hintExplicitForall (getLoc happy_var_1) >>
                                            ams (sLL happy_var_1 happy_var_4 $ mkExplicitHsForAllTy happy_var_2
                                                                  (noLoc []) happy_var_4)
                                                [mj AnnForall happy_var_1,mj AnnDot happy_var_3])}}}}
	) (\r -> happyReturn (happyIn117 r))

happyReduce_279 = happyMonadReduce 3# 102# happyReduction_279
happyReduction_279 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut118 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut117 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ mkQualifiedHsForAllTy happy_var_1 happy_var_3)
                                              [mj AnnDarrow happy_var_2])}}}
	) (\r -> happyReturn (happyIn117 r))

happyReduce_280 = happyMonadReduce 3# 102# happyReduction_280
happyReduction_280 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut214 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (HsIParamTy (unLoc happy_var_1) happy_var_3))
                                              [mj AnnDcolon happy_var_2])}}}
	) (\r -> happyReturn (happyIn117 r))

happyReduce_281 = happySpecReduce_1  102# happyReduction_281
happyReduction_281 happy_x_1
	 =  case happyOut120 happy_x_1 of { happy_var_1 -> 
	happyIn117
		 (happy_var_1
	)}

happyReduce_282 = happyMonadReduce 3# 103# happyReduction_282
happyReduction_282 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut121 happy_x_3 of { happy_var_3 -> 
	( amms (checkContext
                                             (sLL happy_var_1 happy_var_3 $ HsEqTy happy_var_1 happy_var_3))
                                             [mj AnnTilde happy_var_2])}}}
	) (\r -> happyReturn (happyIn118 r))

happyReduce_283 = happyMonadReduce 1# 103# happyReduction_283
happyReduction_283 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut121 happy_x_1 of { happy_var_1 -> 
	( checkContext happy_var_1)}
	) (\r -> happyReturn (happyIn118 r))

happyReduce_284 = happySpecReduce_1  104# happyReduction_284
happyReduction_284 happy_x_1
	 =  case happyOut121 happy_x_1 of { happy_var_1 -> 
	happyIn119
		 (happy_var_1
	)}

happyReduce_285 = happySpecReduce_3  104# happyReduction_285
happyReduction_285 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut230 happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	happyIn119
		 (sLL happy_var_1 happy_var_3 $ mkHsOpTy happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_286 = happySpecReduce_3  104# happyReduction_286
happyReduction_286 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut242 happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	happyIn119
		 (sLL happy_var_1 happy_var_3 $ mkHsOpTy happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_287 = happyMonadReduce 3# 104# happyReduction_287
happyReduction_287 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut116 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsFunTy happy_var_1 happy_var_3)
                                               [mj AnnRarrow happy_var_2])}}}
	) (\r -> happyReturn (happyIn119 r))

happyReduce_288 = happyMonadReduce 3# 104# happyReduction_288
happyReduction_288 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut121 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsEqTy happy_var_1 happy_var_3)
                                               [mj AnnTilde happy_var_2])}}}
	) (\r -> happyReturn (happyIn119 r))

happyReduce_289 = happyReduce 4# 104# happyReduction_289
happyReduction_289 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut226 happy_x_3 of { happy_var_3 -> 
	case happyOut119 happy_x_4 of { happy_var_4 -> 
	happyIn119
		 (sLL happy_var_1 happy_var_4 $ mkHsOpTy happy_var_1 happy_var_3 happy_var_4
	) `HappyStk` happyRest}}}

happyReduce_290 = happyReduce 4# 104# happyReduction_290
happyReduction_290 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut236 happy_x_3 of { happy_var_3 -> 
	case happyOut119 happy_x_4 of { happy_var_4 -> 
	happyIn119
		 (sLL happy_var_1 happy_var_4 $ mkHsOpTy happy_var_1 happy_var_3 happy_var_4
	) `HappyStk` happyRest}}}

happyReduce_291 = happySpecReduce_1  105# happyReduction_291
happyReduction_291 happy_x_1
	 =  case happyOut121 happy_x_1 of { happy_var_1 -> 
	happyIn120
		 (happy_var_1
	)}

happyReduce_292 = happySpecReduce_2  105# happyReduction_292
happyReduction_292 happy_x_2
	happy_x_1
	 =  case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut264 happy_x_2 of { happy_var_2 -> 
	happyIn120
		 (sLL happy_var_1 happy_var_2 $ HsDocTy happy_var_1 happy_var_2
	)}}

happyReduce_293 = happySpecReduce_3  105# happyReduction_293
happyReduction_293 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut230 happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	happyIn120
		 (sLL happy_var_1 happy_var_3 $ mkHsOpTy happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_294 = happyReduce 4# 105# happyReduction_294
happyReduction_294 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut230 happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	case happyOut264 happy_x_4 of { happy_var_4 -> 
	happyIn120
		 (sLL happy_var_1 happy_var_4 $ HsDocTy (L (comb3 happy_var_1 happy_var_2 happy_var_3) (mkHsOpTy happy_var_1 happy_var_2 happy_var_3)) happy_var_4
	) `HappyStk` happyRest}}}}

happyReduce_295 = happySpecReduce_3  105# happyReduction_295
happyReduction_295 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut242 happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	happyIn120
		 (sLL happy_var_1 happy_var_3 $ mkHsOpTy happy_var_1 happy_var_2 happy_var_3
	)}}}

happyReduce_296 = happyReduce 4# 105# happyReduction_296
happyReduction_296 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut242 happy_x_2 of { happy_var_2 -> 
	case happyOut119 happy_x_3 of { happy_var_3 -> 
	case happyOut264 happy_x_4 of { happy_var_4 -> 
	happyIn120
		 (sLL happy_var_1 happy_var_4 $ HsDocTy (L (comb3 happy_var_1 happy_var_2 happy_var_3) (mkHsOpTy happy_var_1 happy_var_2 happy_var_3)) happy_var_4
	) `HappyStk` happyRest}}}}

happyReduce_297 = happyMonadReduce 3# 105# happyReduction_297
happyReduction_297 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut117 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsFunTy happy_var_1 happy_var_3)
                                                [mj AnnRarrow happy_var_2])}}}
	) (\r -> happyReturn (happyIn120 r))

happyReduce_298 = happyMonadReduce 4# 105# happyReduction_298
happyReduction_298 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut264 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut117 happy_x_4 of { happy_var_4 -> 
	( ams (sLL happy_var_1 happy_var_4 $ HsFunTy (L (comb2 happy_var_1 happy_var_2)
                                                            (HsDocTy happy_var_1 happy_var_2)) happy_var_4)
                                                [mj AnnRarrow happy_var_3])}}}}
	) (\r -> happyReturn (happyIn120 r))

happyReduce_299 = happyMonadReduce 3# 105# happyReduction_299
happyReduction_299 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut121 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsEqTy happy_var_1 happy_var_3)
                                                [mj AnnTilde happy_var_2])}}}
	) (\r -> happyReturn (happyIn120 r))

happyReduce_300 = happyReduce 4# 105# happyReduction_300
happyReduction_300 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut226 happy_x_3 of { happy_var_3 -> 
	case happyOut119 happy_x_4 of { happy_var_4 -> 
	happyIn120
		 (sLL happy_var_1 happy_var_4 $ mkHsOpTy happy_var_1 happy_var_3 happy_var_4
	) `HappyStk` happyRest}}}

happyReduce_301 = happyReduce 4# 105# happyReduction_301
happyReduction_301 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut236 happy_x_3 of { happy_var_3 -> 
	case happyOut119 happy_x_4 of { happy_var_4 -> 
	happyIn120
		 (sLL happy_var_1 happy_var_4 $ mkHsOpTy happy_var_1 happy_var_3 happy_var_4
	) `HappyStk` happyRest}}}

happyReduce_302 = happySpecReduce_2  106# happyReduction_302
happyReduction_302 happy_x_2
	happy_x_1
	 =  case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut122 happy_x_2 of { happy_var_2 -> 
	happyIn121
		 (sLL happy_var_1 happy_var_2 $ HsAppTy happy_var_1 happy_var_2
	)}}

happyReduce_303 = happySpecReduce_1  106# happyReduction_303
happyReduction_303 happy_x_1
	 =  case happyOut122 happy_x_1 of { happy_var_1 -> 
	happyIn121
		 (happy_var_1
	)}

happyReduce_304 = happySpecReduce_1  107# happyReduction_304
happyReduction_304 happy_x_1
	 =  case happyOut228 happy_x_1 of { happy_var_1 -> 
	happyIn122
		 (sL1 happy_var_1 (HsTyVar (unLoc happy_var_1))
	)}

happyReduce_305 = happyMonadReduce 1# 107# happyReduction_305
happyReduction_305 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut241 happy_x_1 of { happy_var_1 -> 
	( do { nwc <- namedWildcardsEnabled -- (See Note [Unit tuples])
                                               ; let tv@(Unqual name) = unLoc happy_var_1
                                               ; return $ if (startsWithUnderscore name && nwc)
                                                          then (sL1 happy_var_1 (HsNamedWildcardTy tv))
                                                          else (sL1 happy_var_1 (HsTyVar tv)) })}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_306 = happyMonadReduce 2# 107# happyReduction_306
happyReduction_306 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut115 happy_x_1 of { happy_var_1 -> 
	case happyOut122 happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 (HsBangTy (snd $ unLoc happy_var_1) happy_var_2))
                                                (fst $ unLoc happy_var_1))}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_307 = happyMonadReduce 3# 107# happyReduction_307
happyReduction_307 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut146 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( amms (checkRecordSyntax
                                                    (sLL happy_var_1 happy_var_3 $ HsRecTy happy_var_2))
                                                        -- Constructor sigs only
                                                 [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_308 = happyMonadReduce 2# 107# happyReduction_308
happyReduction_308 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 $ HsTupleTy
                                                    HsBoxedOrConstraintTuple [])
                                                [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_309 = happyMonadReduce 5# 107# happyReduction_309
happyReduction_309 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut116 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut126 happy_x_4 of { happy_var_4 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	( ams (sLL happy_var_1 happy_var_5 $ HsTupleTy
                                             HsBoxedOrConstraintTuple (happy_var_2 : happy_var_4))
                                                [mo happy_var_1,mj AnnComma happy_var_3,mc happy_var_5])}}}}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_310 = happyMonadReduce 2# 107# happyReduction_310
happyReduction_310 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 $ HsTupleTy HsUnboxedTuple [])
                                             [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_311 = happyMonadReduce 3# 107# happyReduction_311
happyReduction_311 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut126 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsTupleTy HsUnboxedTuple happy_var_2)
                                             [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_312 = happyMonadReduce 3# 107# happyReduction_312
happyReduction_312 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut116 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsListTy  happy_var_2) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_313 = happyMonadReduce 3# 107# happyReduction_313
happyReduction_313 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut116 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsPArrTy  happy_var_2) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_314 = happyMonadReduce 3# 107# happyReduction_314
happyReduction_314 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut116 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsParTy   happy_var_2) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_315 = happyMonadReduce 5# 107# happyReduction_315
happyReduction_315 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut116 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut133 happy_x_4 of { happy_var_4 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	( ams (sLL happy_var_1 happy_var_5 $ HsKindSig happy_var_2 happy_var_4)
                                             [mo happy_var_1,mj AnnDcolon happy_var_3,mc happy_var_5])}}}}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_316 = happySpecReduce_1  107# happyReduction_316
happyReduction_316 happy_x_1
	 =  case happyOut160 happy_x_1 of { happy_var_1 -> 
	happyIn122
		 (sL1 happy_var_1 (HsQuasiQuoteTy (unLoc happy_var_1))
	)}

happyReduce_317 = happyMonadReduce 3# 107# happyReduction_317
happyReduction_317 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ mkHsSpliceTy happy_var_2)
                                             [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_318 = happySpecReduce_1  107# happyReduction_318
happyReduction_318 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn122
		 (sLL happy_var_1 happy_var_1 $ mkHsSpliceTy $ sL1 happy_var_1 $ HsVar $
                                        mkUnqual varName (getTH_ID_SPLICE happy_var_1)
	)}

happyReduce_319 = happySpecReduce_2  107# happyReduction_319
happyReduction_319 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut221 happy_x_2 of { happy_var_2 -> 
	happyIn122
		 (sLL happy_var_1 happy_var_2 $ HsTyVar $ unLoc happy_var_2
	)}}

happyReduce_320 = happyMonadReduce 6# 107# happyReduction_320
happyReduction_320 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut116 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut126 happy_x_5 of { happy_var_5 -> 
	case happyOutTok happy_x_6 of { happy_var_6 -> 
	( ams (sLL happy_var_1 happy_var_6 $ HsExplicitTupleTy [] (happy_var_3 : happy_var_5))
                                           [mo happy_var_2,mj AnnComma happy_var_4,mc happy_var_6])}}}}}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_321 = happyMonadReduce 4# 107# happyReduction_321
happyReduction_321 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut125 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( ams (sLL happy_var_1 happy_var_4 $ HsExplicitListTy
                                                            placeHolderKind happy_var_3)
                                                       [mo happy_var_2,mc happy_var_4])}}}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_322 = happySpecReduce_2  107# happyReduction_322
happyReduction_322 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut244 happy_x_2 of { happy_var_2 -> 
	happyIn122
		 (sLL happy_var_1 happy_var_2 $ HsTyVar $ unLoc happy_var_2
	)}}

happyReduce_323 = happyMonadReduce 5# 107# happyReduction_323
happyReduction_323 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut116 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut126 happy_x_4 of { happy_var_4 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	( ams (sLL happy_var_1 happy_var_5 $ HsExplicitListTy
                                                     placeHolderKind (happy_var_2 : happy_var_4))
                                                 [mo happy_var_1, mj AnnComma happy_var_3,mc happy_var_5])}}}}}
	) (\r -> happyReturn (happyIn122 r))

happyReduce_324 = happySpecReduce_1  107# happyReduction_324
happyReduction_324 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn122
		 (sLL happy_var_1 happy_var_1 $ HsTyLit $ HsNumTy $ getINTEGER happy_var_1
	)}

happyReduce_325 = happySpecReduce_1  107# happyReduction_325
happyReduction_325 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn122
		 (sLL happy_var_1 happy_var_1 $ HsTyLit $ HsStrTy $ getSTRING  happy_var_1
	)}

happyReduce_326 = happySpecReduce_1  107# happyReduction_326
happyReduction_326 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn122
		 (sL1 happy_var_1 $ HsWildcardTy
	)}

happyReduce_327 = happySpecReduce_1  108# happyReduction_327
happyReduction_327 happy_x_1
	 =  case happyOut111 happy_x_1 of { happy_var_1 -> 
	happyIn123
		 (happy_var_1
	)}

happyReduce_328 = happySpecReduce_1  109# happyReduction_328
happyReduction_328 happy_x_1
	 =  case happyOut123 happy_x_1 of { happy_var_1 -> 
	happyIn124
		 ([happy_var_1]
	)}

happyReduce_329 = happyMonadReduce 3# 109# happyReduction_329
happyReduction_329 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut123 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut124 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl happy_var_1) AnnComma (gl happy_var_2)
                                          >> return (happy_var_1 : happy_var_3))}}}
	) (\r -> happyReturn (happyIn124 r))

happyReduce_330 = happySpecReduce_1  110# happyReduction_330
happyReduction_330 happy_x_1
	 =  case happyOut126 happy_x_1 of { happy_var_1 -> 
	happyIn125
		 (happy_var_1
	)}

happyReduce_331 = happySpecReduce_0  110# happyReduction_331
happyReduction_331  =  happyIn125
		 ([]
	)

happyReduce_332 = happySpecReduce_1  111# happyReduction_332
happyReduction_332 happy_x_1
	 =  case happyOut116 happy_x_1 of { happy_var_1 -> 
	happyIn126
		 ([happy_var_1]
	)}

happyReduce_333 = happyMonadReduce 3# 111# happyReduction_333
happyReduction_333 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut116 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut126 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl happy_var_1) AnnComma (gl happy_var_2)
                                          >> return (happy_var_1 : happy_var_3))}}}
	) (\r -> happyReturn (happyIn126 r))

happyReduce_334 = happySpecReduce_2  112# happyReduction_334
happyReduction_334 happy_x_2
	happy_x_1
	 =  case happyOut128 happy_x_1 of { happy_var_1 -> 
	case happyOut127 happy_x_2 of { happy_var_2 -> 
	happyIn127
		 (happy_var_1 : happy_var_2
	)}}

happyReduce_335 = happySpecReduce_0  112# happyReduction_335
happyReduction_335  =  happyIn127
		 ([]
	)

happyReduce_336 = happySpecReduce_1  113# happyReduction_336
happyReduction_336 happy_x_1
	 =  case happyOut241 happy_x_1 of { happy_var_1 -> 
	happyIn128
		 (sL1 happy_var_1 (UserTyVar (unLoc happy_var_1))
	)}

happyReduce_337 = happyMonadReduce 5# 113# happyReduction_337
happyReduction_337 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut241 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut133 happy_x_4 of { happy_var_4 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	( ams (sLL happy_var_1 happy_var_5  (KindedTyVar (unLoc happy_var_2) happy_var_4))
                                               [mo happy_var_1,mj AnnDcolon happy_var_3
                                               ,mc happy_var_5])}}}}}
	) (\r -> happyReturn (happyIn128 r))

happyReduce_338 = happySpecReduce_0  114# happyReduction_338
happyReduction_338  =  happyIn129
		 (noLoc []
	)

happyReduce_339 = happyMonadReduce 2# 114# happyReduction_339
happyReduction_339 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut130 happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 (reverse (unLoc happy_var_2)))
                                                [mj AnnVbar happy_var_1])}}
	) (\r -> happyReturn (happyIn129 r))

happyReduce_340 = happyMonadReduce 3# 115# happyReduction_340
happyReduction_340 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut130 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut131 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl happy_var_3) AnnComma (gl happy_var_2)
                                          >> return (sLL happy_var_1 happy_var_3 (happy_var_3 : unLoc happy_var_1)))}}}
	) (\r -> happyReturn (happyIn130 r))

happyReduce_341 = happySpecReduce_1  115# happyReduction_341
happyReduction_341 happy_x_1
	 =  case happyOut131 happy_x_1 of { happy_var_1 -> 
	happyIn130
		 (sL1 happy_var_1 [happy_var_1]
	)}

happyReduce_342 = happyMonadReduce 3# 116# happyReduction_342
happyReduction_342 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut132 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut132 happy_x_3 of { happy_var_3 -> 
	( ams (L (comb3 happy_var_1 happy_var_2 happy_var_3)
                                       (reverse (unLoc happy_var_1), reverse (unLoc happy_var_3)))
                                       [mj AnnRarrow happy_var_2])}}}
	) (\r -> happyReturn (happyIn131 r))

happyReduce_343 = happySpecReduce_0  117# happyReduction_343
happyReduction_343  =  happyIn132
		 (noLoc []
	)

happyReduce_344 = happySpecReduce_2  117# happyReduction_344
happyReduction_344 happy_x_2
	happy_x_1
	 =  case happyOut132 happy_x_1 of { happy_var_1 -> 
	case happyOut241 happy_x_2 of { happy_var_2 -> 
	happyIn132
		 (sLL happy_var_1 happy_var_2 (unLoc happy_var_2 : unLoc happy_var_1)
	)}}

happyReduce_345 = happySpecReduce_1  118# happyReduction_345
happyReduction_345 happy_x_1
	 =  case happyOut134 happy_x_1 of { happy_var_1 -> 
	happyIn133
		 (happy_var_1
	)}

happyReduce_346 = happyMonadReduce 3# 118# happyReduction_346
happyReduction_346 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut134 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut133 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsFunTy happy_var_1 happy_var_3)
                                        [mj AnnRarrow happy_var_2])}}}
	) (\r -> happyReturn (happyIn133 r))

happyReduce_347 = happySpecReduce_1  119# happyReduction_347
happyReduction_347 happy_x_1
	 =  case happyOut135 happy_x_1 of { happy_var_1 -> 
	happyIn134
		 (happy_var_1
	)}

happyReduce_348 = happySpecReduce_2  119# happyReduction_348
happyReduction_348 happy_x_2
	happy_x_1
	 =  case happyOut134 happy_x_1 of { happy_var_1 -> 
	case happyOut135 happy_x_2 of { happy_var_2 -> 
	happyIn134
		 (sLL happy_var_1 happy_var_2 $ HsAppTy happy_var_1 happy_var_2
	)}}

happyReduce_349 = happySpecReduce_1  120# happyReduction_349
happyReduction_349 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn135
		 (sL1 happy_var_1 $ HsTyVar (nameRdrName liftedTypeKindTyConName)
	)}

happyReduce_350 = happyMonadReduce 3# 120# happyReduction_350
happyReduction_350 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut133 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3  $ HsParTy happy_var_2)
                                        [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn135 r))

happyReduce_351 = happySpecReduce_1  120# happyReduction_351
happyReduction_351 happy_x_1
	 =  case happyOut136 happy_x_1 of { happy_var_1 -> 
	happyIn135
		 (happy_var_1
	)}

happyReduce_352 = happySpecReduce_1  120# happyReduction_352
happyReduction_352 happy_x_1
	 =  case happyOut241 happy_x_1 of { happy_var_1 -> 
	happyIn135
		 (sL1 happy_var_1 $ HsTyVar (unLoc happy_var_1)
	)}

happyReduce_353 = happySpecReduce_1  121# happyReduction_353
happyReduction_353 happy_x_1
	 =  case happyOut231 happy_x_1 of { happy_var_1 -> 
	happyIn136
		 (sL1 happy_var_1 $ HsTyVar $ unLoc happy_var_1
	)}

happyReduce_354 = happyMonadReduce 2# 121# happyReduction_354
happyReduction_354 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 $ HsTyVar $ getRdrName unitTyCon)
                                           [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn136 r))

happyReduce_355 = happyMonadReduce 5# 121# happyReduction_355
happyReduction_355 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut133 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut137 happy_x_4 of { happy_var_4 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	( ams (sLL happy_var_1 happy_var_5 $ HsTupleTy HsBoxedTuple
                                                                     ( happy_var_2 : happy_var_4))
                                                 [mo happy_var_1,mj AnnComma happy_var_3,mc happy_var_5])}}}}}
	) (\r -> happyReturn (happyIn136 r))

happyReduce_356 = happyMonadReduce 3# 121# happyReduction_356
happyReduction_356 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut133 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsListTy happy_var_2)
                                                 [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn136 r))

happyReduce_357 = happySpecReduce_1  122# happyReduction_357
happyReduction_357 happy_x_1
	 =  case happyOut133 happy_x_1 of { happy_var_1 -> 
	happyIn137
		 ([happy_var_1]
	)}

happyReduce_358 = happyMonadReduce 3# 122# happyReduction_358
happyReduction_358 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut133 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut137 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl happy_var_1) AnnComma (gl happy_var_2)
                                          >> return (happy_var_1 : happy_var_3))}}}
	) (\r -> happyReturn (happyIn137 r))

happyReduce_359 = happyReduce 4# 123# happyReduction_359
happyReduction_359 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut139 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	happyIn138
		 (L (comb2 happy_var_1 happy_var_3)
                                                    ([mj AnnWhere happy_var_1
                                                     ,mo happy_var_2
                                                     ,mc happy_var_4]
                                                    , unLoc happy_var_3)
	) `HappyStk` happyRest}}}}

happyReduce_360 = happyReduce 4# 123# happyReduction_360
happyReduction_360 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut139 happy_x_3 of { happy_var_3 -> 
	happyIn138
		 (L (comb2 happy_var_1 happy_var_3)
                                                     ([mj AnnWhere happy_var_1]
                                                     , unLoc happy_var_3)
	) `HappyStk` happyRest}}

happyReduce_361 = happySpecReduce_0  123# happyReduction_361
happyReduction_361  =  happyIn138
		 (noLoc ([],[])
	)

happyReduce_362 = happyMonadReduce 3# 124# happyReduction_362
happyReduction_362 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut140 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut139 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl happy_var_1) AnnSemi (gl happy_var_2)
                     >> return (L (comb2 happy_var_1 happy_var_3) (happy_var_1 : unLoc happy_var_3)))}}}
	) (\r -> happyReturn (happyIn139 r))

happyReduce_363 = happySpecReduce_1  124# happyReduction_363
happyReduction_363 happy_x_1
	 =  case happyOut140 happy_x_1 of { happy_var_1 -> 
	happyIn139
		 (L (gl happy_var_1) [happy_var_1]
	)}

happyReduce_364 = happySpecReduce_0  124# happyReduction_364
happyReduction_364  =  happyIn139
		 (noLoc []
	)

happyReduce_365 = happyMonadReduce 3# 125# happyReduction_365
happyReduction_365 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut223 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut111 happy_x_3 of { happy_var_3 -> 
	( do { gadtDecl <- mkGadtDecl (unLoc happy_var_1) happy_var_3
                      ; ams (sLL happy_var_1 happy_var_3 $ gadtDecl)
                            [mj AnnDcolon happy_var_2] })}}}
	) (\r -> happyReturn (happyIn140 r))

happyReduce_366 = happyMonadReduce 6# 125# happyReduction_366
happyReduction_366 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut229 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut146 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	case happyOut111 happy_x_6 of { happy_var_6 -> 
	( do { cd <- mkDeprecatedGadtRecordDecl (comb2 happy_var_1 happy_var_6) happy_var_1 happy_var_3 happy_var_6
                      ; cd' <- checkRecordSyntax cd
                      ; ams (L (comb2 happy_var_1 happy_var_6) (unLoc cd'))
                            [mo happy_var_2,mc happy_var_4,mj AnnDcolon happy_var_5] })}}}}}}
	) (\r -> happyReturn (happyIn140 r))

happyReduce_367 = happySpecReduce_3  126# happyReduction_367
happyReduction_367 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut269 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut142 happy_x_3 of { happy_var_3 -> 
	happyIn141
		 (L (comb2 happy_var_2 happy_var_3) ([mj AnnEqual happy_var_2]
                                                     ,addConDocs (unLoc happy_var_3) happy_var_1)
	)}}}

happyReduce_368 = happyMonadReduce 5# 127# happyReduction_368
happyReduction_368 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut142 happy_x_1 of { happy_var_1 -> 
	case happyOut269 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut268 happy_x_4 of { happy_var_4 -> 
	case happyOut143 happy_x_5 of { happy_var_5 -> 
	( addAnnotation (gl happy_var_5) AnnVbar (gl happy_var_3)
               >> return (sLL happy_var_1 happy_var_5 (addConDoc happy_var_5 happy_var_2 : addConDocFirst (unLoc happy_var_1) happy_var_4)))}}}}}
	) (\r -> happyReturn (happyIn142 r))

happyReduce_369 = happySpecReduce_1  127# happyReduction_369
happyReduction_369 happy_x_1
	 =  case happyOut143 happy_x_1 of { happy_var_1 -> 
	happyIn142
		 (sL1 happy_var_1 [happy_var_1]
	)}

happyReduce_370 = happyMonadReduce 6# 128# happyReduction_370
happyReduction_370 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut269 happy_x_1 of { happy_var_1 -> 
	case happyOut144 happy_x_2 of { happy_var_2 -> 
	case happyOut118 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut145 happy_x_5 of { happy_var_5 -> 
	case happyOut268 happy_x_6 of { happy_var_6 -> 
	( ams (let (con,details) = unLoc happy_var_5 in
                  addConDoc (L (comb4 happy_var_2 happy_var_3 happy_var_4 happy_var_5) (mkSimpleConDecl con
                                                   (snd $ unLoc happy_var_2) happy_var_3 details))
                            (happy_var_1 `mplus` happy_var_6))
                        (mj AnnDarrow happy_var_4:(fst $ unLoc happy_var_2)))}}}}}}
	) (\r -> happyReturn (happyIn143 r))

happyReduce_371 = happyMonadReduce 4# 128# happyReduction_371
happyReduction_371 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut269 happy_x_1 of { happy_var_1 -> 
	case happyOut144 happy_x_2 of { happy_var_2 -> 
	case happyOut145 happy_x_3 of { happy_var_3 -> 
	case happyOut268 happy_x_4 of { happy_var_4 -> 
	( ams ( let (con,details) = unLoc happy_var_3 in
                  addConDoc (L (comb2 happy_var_2 happy_var_3) (mkSimpleConDecl con
                                           (snd $ unLoc happy_var_2) (noLoc []) details))
                            (happy_var_1 `mplus` happy_var_4))
                       (fst $ unLoc happy_var_2))}}}}
	) (\r -> happyReturn (happyIn143 r))

happyReduce_372 = happySpecReduce_3  129# happyReduction_372
happyReduction_372 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut127 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn144
		 (sLL happy_var_1 happy_var_3 ([mj AnnForall happy_var_1,mj AnnDot happy_var_3],happy_var_2)
	)}}}

happyReduce_373 = happySpecReduce_0  129# happyReduction_373
happyReduction_373  =  happyIn144
		 (noLoc ([],[])
	)

happyReduce_374 = happyMonadReduce 1# 130# happyReduction_374
happyReduction_374 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut121 happy_x_1 of { happy_var_1 -> 
	( splitCon happy_var_1 >>= return.sLL happy_var_1 happy_var_1)}
	) (\r -> happyReturn (happyIn145 r))

happyReduce_375 = happySpecReduce_3  130# happyReduction_375
happyReduction_375 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut121 happy_x_1 of { happy_var_1 -> 
	case happyOut225 happy_x_2 of { happy_var_2 -> 
	case happyOut121 happy_x_3 of { happy_var_3 -> 
	happyIn145
		 (sLL happy_var_1 happy_var_3 (happy_var_2, InfixCon happy_var_1 happy_var_3)
	)}}}

happyReduce_376 = happySpecReduce_0  131# happyReduction_376
happyReduction_376  =  happyIn146
		 ([]
	)

happyReduce_377 = happySpecReduce_1  131# happyReduction_377
happyReduction_377 happy_x_1
	 =  case happyOut147 happy_x_1 of { happy_var_1 -> 
	happyIn146
		 (happy_var_1
	)}

happyReduce_378 = happyMonadReduce 5# 132# happyReduction_378
happyReduction_378 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut148 happy_x_1 of { happy_var_1 -> 
	case happyOut269 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut268 happy_x_4 of { happy_var_4 -> 
	case happyOut147 happy_x_5 of { happy_var_5 -> 
	( addAnnotation (gl happy_var_1) AnnComma (gl happy_var_3) >>
               return ((addFieldDoc happy_var_1 happy_var_4) : addFieldDocs happy_var_5 happy_var_2))}}}}}
	) (\r -> happyReturn (happyIn147 r))

happyReduce_379 = happySpecReduce_1  132# happyReduction_379
happyReduction_379 happy_x_1
	 =  case happyOut148 happy_x_1 of { happy_var_1 -> 
	happyIn147
		 ([happy_var_1]
	)}

happyReduce_380 = happyMonadReduce 5# 133# happyReduction_380
happyReduction_380 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut269 happy_x_1 of { happy_var_1 -> 
	case happyOut113 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut116 happy_x_4 of { happy_var_4 -> 
	case happyOut268 happy_x_5 of { happy_var_5 -> 
	( ams (L (comb2 happy_var_2 happy_var_4)
                      (ConDeclField (reverse (unLoc happy_var_2)) happy_var_4 (happy_var_1 `mplus` happy_var_5)))
                   [mj AnnDcolon happy_var_3])}}}}}
	) (\r -> happyReturn (happyIn148 r))

happyReduce_381 = happySpecReduce_0  134# happyReduction_381
happyReduction_381  =  happyIn149
		 (noLoc Nothing
	)

happyReduce_382 = happyMonadReduce 2# 134# happyReduction_382
happyReduction_382 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut231 happy_x_2 of { happy_var_2 -> 
	( aljs ( let { L loc tv = happy_var_2 }
                                            in (sLL happy_var_1 happy_var_2 (Just (sLL happy_var_1 happy_var_2
                                                       [L loc (HsTyVar tv)]))))
                                          [mj AnnDeriving happy_var_1])}}
	) (\r -> happyReturn (happyIn149 r))

happyReduce_383 = happyMonadReduce 3# 134# happyReduction_383
happyReduction_383 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( aljs (sLL happy_var_1 happy_var_3 (Just (sLL happy_var_1 happy_var_3 [])))
                                          [mj AnnDeriving happy_var_1,mo happy_var_2,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn149 r))

happyReduce_384 = happyMonadReduce 4# 134# happyReduction_384
happyReduction_384 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut124 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( aljs (sLL happy_var_1 happy_var_4 (Just (sLL happy_var_1 happy_var_4 happy_var_3)))
                                                 [mj AnnDeriving happy_var_1,mo happy_var_2,mc happy_var_4])}}}}
	) (\r -> happyReturn (happyIn149 r))

happyReduce_385 = happySpecReduce_1  135# happyReduction_385
happyReduction_385 happy_x_1
	 =  case happyOut151 happy_x_1 of { happy_var_1 -> 
	happyIn150
		 (sL1 happy_var_1 (DocD (unLoc happy_var_1))
	)}

happyReduce_386 = happySpecReduce_1  136# happyReduction_386
happyReduction_386 happy_x_1
	 =  case happyOut263 happy_x_1 of { happy_var_1 -> 
	happyIn151
		 (sL1 happy_var_1 (DocCommentNext (unLoc happy_var_1))
	)}

happyReduce_387 = happySpecReduce_1  136# happyReduction_387
happyReduction_387 happy_x_1
	 =  case happyOut264 happy_x_1 of { happy_var_1 -> 
	happyIn151
		 (sL1 happy_var_1 (DocCommentPrev (unLoc happy_var_1))
	)}

happyReduce_388 = happySpecReduce_1  136# happyReduction_388
happyReduction_388 happy_x_1
	 =  case happyOut265 happy_x_1 of { happy_var_1 -> 
	happyIn151
		 (sL1 happy_var_1 (case (unLoc happy_var_1) of (n, doc) -> DocCommentNamed n doc)
	)}

happyReduce_389 = happySpecReduce_1  136# happyReduction_389
happyReduction_389 happy_x_1
	 =  case happyOut266 happy_x_1 of { happy_var_1 -> 
	happyIn151
		 (sL1 happy_var_1 (case (unLoc happy_var_1) of (n, doc) -> DocGroup n doc)
	)}

happyReduce_390 = happySpecReduce_1  137# happyReduction_390
happyReduction_390 happy_x_1
	 =  case happyOut157 happy_x_1 of { happy_var_1 -> 
	happyIn152
		 (happy_var_1
	)}

happyReduce_391 = happyMonadReduce 3# 137# happyReduction_391
happyReduction_391 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut168 happy_x_2 of { happy_var_2 -> 
	case happyOut154 happy_x_3 of { happy_var_3 -> 
	( do { let { e = sLL happy_var_1 happy_var_3 (SectionR (sLL happy_var_1 happy_var_3 (HsVar bang_RDR)) happy_var_2) };
                                        pat <- checkPattern empty e;
                                        _ <- ams (sLL happy_var_1 happy_var_3 ())
                                               (mj AnnBang happy_var_1:(fst $ unLoc happy_var_3));
                                        return $ sLL happy_var_1 happy_var_3 $ unitOL $ sLL happy_var_1 happy_var_3 $ ValD $
                                            PatBind pat (snd $ unLoc happy_var_3)
                                                    placeHolderType
                                                    placeHolderNames
                                                    ([],[]) })}}}
	) (\r -> happyReturn (happyIn152 r))

happyReduce_392 = happyMonadReduce 3# 137# happyReduction_392
happyReduction_392 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut162 happy_x_1 of { happy_var_1 -> 
	case happyOut109 happy_x_2 of { happy_var_2 -> 
	case happyOut154 happy_x_3 of { happy_var_3 -> 
	( do { r <- checkValDef empty happy_var_1 (snd happy_var_2) happy_var_3;
                                        let { l = comb2 happy_var_1 happy_var_3 };
                                        case r of {
                                          (FunBind n _ _ _ _ _) ->
                                                ams (L l ()) [mj AnnFunId n] >> return () ;
                                          _ -> return () } ;
                                        _ <- ams (L l ()) (fst $ unLoc happy_var_3);
                                        return $! (sL l (unitOL $! (sL l $ ValD r))) })}}}
	) (\r -> happyReturn (happyIn152 r))

happyReduce_393 = happySpecReduce_1  137# happyReduction_393
happyReduction_393 happy_x_1
	 =  case happyOut73 happy_x_1 of { happy_var_1 -> 
	happyIn152
		 (sLL happy_var_1 happy_var_1 $ unitOL happy_var_1
	)}

happyReduce_394 = happySpecReduce_1  137# happyReduction_394
happyReduction_394 happy_x_1
	 =  case happyOut150 happy_x_1 of { happy_var_1 -> 
	happyIn152
		 (sLL happy_var_1 happy_var_1 $ unitOL happy_var_1
	)}

happyReduce_395 = happySpecReduce_1  138# happyReduction_395
happyReduction_395 happy_x_1
	 =  case happyOut152 happy_x_1 of { happy_var_1 -> 
	happyIn153
		 (happy_var_1
	)}

happyReduce_396 = happySpecReduce_1  138# happyReduction_396
happyReduction_396 happy_x_1
	 =  case happyOut171 happy_x_1 of { happy_var_1 -> 
	happyIn153
		 (sLL happy_var_1 happy_var_1 $ unitOL (sLL happy_var_1 happy_var_1 $ mkSpliceDecl happy_var_1)
	)}

happyReduce_397 = happySpecReduce_3  139# happyReduction_397
happyReduction_397 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	case happyOut90 happy_x_3 of { happy_var_3 -> 
	happyIn154
		 (sL (comb3 happy_var_1 happy_var_2 happy_var_3)
                                    ((mj AnnEqual happy_var_1 : (fst $ unLoc happy_var_3))
                                    ,GRHSs (unguardedRHS (comb2 happy_var_1 happy_var_3) happy_var_2)
                                   (snd $ unLoc happy_var_3))
	)}}}

happyReduce_398 = happySpecReduce_2  139# happyReduction_398
happyReduction_398 happy_x_2
	happy_x_1
	 =  case happyOut155 happy_x_1 of { happy_var_1 -> 
	case happyOut90 happy_x_2 of { happy_var_2 -> 
	happyIn154
		 (sLL happy_var_1 happy_var_2  (fst $ unLoc happy_var_2
                                    ,GRHSs (reverse (unLoc happy_var_1))
                                                    (snd $ unLoc happy_var_2))
	)}}

happyReduce_399 = happySpecReduce_2  140# happyReduction_399
happyReduction_399 happy_x_2
	happy_x_1
	 =  case happyOut155 happy_x_1 of { happy_var_1 -> 
	case happyOut156 happy_x_2 of { happy_var_2 -> 
	happyIn155
		 (sLL happy_var_1 happy_var_2 (happy_var_2 : unLoc happy_var_1)
	)}}

happyReduce_400 = happySpecReduce_1  140# happyReduction_400
happyReduction_400 happy_x_1
	 =  case happyOut156 happy_x_1 of { happy_var_1 -> 
	happyIn155
		 (sL1 happy_var_1 [happy_var_1]
	)}

happyReduce_401 = happyMonadReduce 4# 141# happyReduction_401
happyReduction_401 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut187 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut161 happy_x_4 of { happy_var_4 -> 
	( ams (sL (comb2 happy_var_1 happy_var_4) $ GRHS (unLoc happy_var_2) happy_var_4)
                                         [mj AnnVbar happy_var_1,mj AnnEqual happy_var_3])}}}}
	) (\r -> happyReturn (happyIn156 r))

happyReduce_402 = happyMonadReduce 3# 142# happyReduction_402
happyReduction_402 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut162 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut112 happy_x_3 of { happy_var_3 -> 
	( do { ty <- checkPartialTypeSignature happy_var_3
                              ; s <- checkValSig happy_var_1 ty
                              ; _ <- ams (sLL happy_var_1 happy_var_3 ()) [mj AnnDcolon happy_var_2]
                              ; return (sLL happy_var_1 happy_var_3 $ unitOL (sLL happy_var_1 happy_var_3 $ SigD s)) })}}}
	) (\r -> happyReturn (happyIn157 r))

happyReduce_403 = happyMonadReduce 5# 142# happyReduction_403
happyReduction_403 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut244 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut113 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut112 happy_x_5 of { happy_var_5 -> 
	( do { ty <- checkPartialTypeSignature happy_var_5
                 ; let sig = TypeSig (happy_var_1 : reverse (unLoc happy_var_3)) ty PlaceHolder
                 ; ams (sLL happy_var_1 happy_var_5 $ toOL [ sLL happy_var_1 happy_var_5 $ SigD sig ])
                       [mj AnnComma happy_var_2,mj AnnDcolon happy_var_4] })}}}}}
	) (\r -> happyReturn (happyIn157 r))

happyReduce_404 = happyMonadReduce 3# 142# happyReduction_404
happyReduction_404 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut49 happy_x_1 of { happy_var_1 -> 
	case happyOut48 happy_x_2 of { happy_var_2 -> 
	case happyOut50 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ toOL [ sLL happy_var_1 happy_var_3 $ SigD
                        (FixSig (FixitySig (fromOL $ unLoc happy_var_3)
                                (Fixity (unLoc happy_var_2) (unLoc happy_var_1)))) ])
                     [mj AnnInfix happy_var_1,mj AnnVal happy_var_2])}}}
	) (\r -> happyReturn (happyIn157 r))

happyReduce_405 = happySpecReduce_1  142# happyReduction_405
happyReduction_405 happy_x_1
	 =  case happyOut77 happy_x_1 of { happy_var_1 -> 
	happyIn157
		 (sLL happy_var_1 happy_var_1 $ unitOL $ sLL happy_var_1 happy_var_1 . SigD . unLoc $ happy_var_1
	)}

happyReduce_406 = happyMonadReduce 4# 142# happyReduction_406
happyReduction_406 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut158 happy_x_2 of { happy_var_2 -> 
	case happyOut245 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( ams (sLL happy_var_1 happy_var_4 $ unitOL (sLL happy_var_1 happy_var_4 $ SigD (InlineSig happy_var_3
                                     (mkInlinePragma (getINLINE happy_var_1) (snd happy_var_2)))))
                       (mo happy_var_1:mc happy_var_4:fst happy_var_2))}}}}
	) (\r -> happyReturn (happyIn157 r))

happyReduce_407 = happyMonadReduce 6# 142# happyReduction_407
happyReduction_407 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut158 happy_x_2 of { happy_var_2 -> 
	case happyOut245 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut114 happy_x_5 of { happy_var_5 -> 
	case happyOutTok happy_x_6 of { happy_var_6 -> 
	( ams (
                 let inl_prag = mkInlinePragma (EmptyInlineSpec, FunLike) (snd happy_var_2)
                  in sLL happy_var_1 happy_var_6 $
                            toOL [ sLL happy_var_1 happy_var_6 $ SigD (SpecSig happy_var_3 (fromOL happy_var_5) inl_prag) ])
                    (mo happy_var_1:mj AnnDcolon happy_var_4:mc happy_var_6:(fst happy_var_2)))}}}}}}
	) (\r -> happyReturn (happyIn157 r))

happyReduce_408 = happyMonadReduce 6# 142# happyReduction_408
happyReduction_408 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut158 happy_x_2 of { happy_var_2 -> 
	case happyOut245 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut114 happy_x_5 of { happy_var_5 -> 
	case happyOutTok happy_x_6 of { happy_var_6 -> 
	( ams (sLL happy_var_1 happy_var_6 $ toOL [ sLL happy_var_1 happy_var_6 $ SigD (SpecSig happy_var_3 (fromOL happy_var_5)
                               (mkInlinePragma (getSPEC_INLINE happy_var_1) (snd happy_var_2))) ])
                       (mo happy_var_1:mj AnnDcolon happy_var_4:mc happy_var_6:(fst happy_var_2)))}}}}}}
	) (\r -> happyReturn (happyIn157 r))

happyReduce_409 = happyMonadReduce 4# 142# happyReduction_409
happyReduction_409 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut123 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( ams (sLL happy_var_1 happy_var_4 $ unitOL (sLL happy_var_1 happy_var_4 $ SigD (SpecInstSig happy_var_3)))
                       [mo happy_var_1,mj AnnInstance happy_var_2,mc happy_var_4])}}}}
	) (\r -> happyReturn (happyIn157 r))

happyReduce_410 = happyMonadReduce 3# 142# happyReduction_410
happyReduction_410 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut215 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ unitOL (sLL happy_var_1 happy_var_3 $ SigD (MinimalSig (snd happy_var_2))))
                   (mo happy_var_1:mc happy_var_3:fst happy_var_2))}}}
	) (\r -> happyReturn (happyIn157 r))

happyReduce_411 = happySpecReduce_0  143# happyReduction_411
happyReduction_411  =  happyIn158
		 (([],Nothing)
	)

happyReduce_412 = happySpecReduce_1  143# happyReduction_412
happyReduction_412 happy_x_1
	 =  case happyOut159 happy_x_1 of { happy_var_1 -> 
	happyIn158
		 ((fst happy_var_1,Just (snd happy_var_1))
	)}

happyReduce_413 = happySpecReduce_3  144# happyReduction_413
happyReduction_413 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn159
		 (([mj AnnOpen happy_var_1,mj AnnVal happy_var_2,mj AnnClose happy_var_3]
                                  ,ActiveAfter  (fromInteger (getINTEGER happy_var_2)))
	)}}}

happyReduce_414 = happyReduce 4# 144# happyReduction_414
happyReduction_414 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	happyIn159
		 (([mj AnnOpen happy_var_1,mj AnnTilde happy_var_2,mj AnnVal happy_var_3
                                                 ,mj AnnClose happy_var_4]
                                  ,ActiveBefore (fromInteger (getINTEGER happy_var_3)))
	) `HappyStk` happyRest}}}}

happyReduce_415 = happySpecReduce_1  145# happyReduction_415
happyReduction_415 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn160
		 (let { loc = getLoc happy_var_1
                                ; ITquasiQuote (quoter, quote, quoteSpan) = unLoc happy_var_1
                                ; quoterId = mkUnqual varName quoter }
                            in sL1 happy_var_1 (mkHsQuasiQuote quoterId (RealSrcSpan quoteSpan) quote)
	)}

happyReduce_416 = happySpecReduce_1  145# happyReduction_416
happyReduction_416 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn160
		 (let { loc = getLoc happy_var_1
                                ; ITqQuasiQuote (qual, quoter, quote, quoteSpan) = unLoc happy_var_1
                                ; quoterId = mkQual varName (qual, quoter) }
                            in sL (getLoc happy_var_1) (mkHsQuasiQuote quoterId (RealSrcSpan quoteSpan) quote)
	)}

happyReduce_417 = happyMonadReduce 3# 146# happyReduction_417
happyReduction_417 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut162 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut111 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ ExprWithTySig happy_var_1 happy_var_3 PlaceHolder)
                                       [mj AnnDcolon happy_var_2])}}}
	) (\r -> happyReturn (happyIn161 r))

happyReduce_418 = happyMonadReduce 3# 146# happyReduction_418
happyReduction_418 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut162 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut161 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsArrApp happy_var_1 happy_var_3 placeHolderType
                                                        HsFirstOrderApp True)
                                       [mj Annlarrowtail happy_var_2])}}}
	) (\r -> happyReturn (happyIn161 r))

happyReduce_419 = happyMonadReduce 3# 146# happyReduction_419
happyReduction_419 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut162 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut161 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsArrApp happy_var_3 happy_var_1 placeHolderType
                                                      HsFirstOrderApp False)
                                       [mj Annrarrowtail happy_var_2])}}}
	) (\r -> happyReturn (happyIn161 r))

happyReduce_420 = happyMonadReduce 3# 146# happyReduction_420
happyReduction_420 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut162 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut161 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsArrApp happy_var_1 happy_var_3 placeHolderType
                                                      HsHigherOrderApp True)
                                       [mj AnnLarrowtail happy_var_2])}}}
	) (\r -> happyReturn (happyIn161 r))

happyReduce_421 = happyMonadReduce 3# 146# happyReduction_421
happyReduction_421 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut162 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut161 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsArrApp happy_var_3 happy_var_1 placeHolderType
                                                      HsHigherOrderApp False)
                                       [mj AnnRarrowtail happy_var_2])}}}
	) (\r -> happyReturn (happyIn161 r))

happyReduce_422 = happySpecReduce_1  146# happyReduction_422
happyReduction_422 happy_x_1
	 =  case happyOut162 happy_x_1 of { happy_var_1 -> 
	happyIn161
		 (happy_var_1
	)}

happyReduce_423 = happySpecReduce_1  147# happyReduction_423
happyReduction_423 happy_x_1
	 =  case happyOut163 happy_x_1 of { happy_var_1 -> 
	happyIn162
		 (happy_var_1
	)}

happyReduce_424 = happySpecReduce_3  147# happyReduction_424
happyReduction_424 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut162 happy_x_1 of { happy_var_1 -> 
	case happyOut237 happy_x_2 of { happy_var_2 -> 
	case happyOut163 happy_x_3 of { happy_var_3 -> 
	happyIn162
		 (sLL happy_var_1 happy_var_3 (OpApp happy_var_1 happy_var_2 placeHolderFixity happy_var_3)
	)}}}

happyReduce_425 = happyMonadReduce 6# 148# happyReduction_425
happyReduction_425 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut201 happy_x_2 of { happy_var_2 -> 
	case happyOut202 happy_x_3 of { happy_var_3 -> 
	case happyOut110 happy_x_4 of { happy_var_4 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	case happyOut161 happy_x_6 of { happy_var_6 -> 
	( ams (sLL happy_var_1 happy_var_6 $ HsLam (mkMatchGroup FromSource
                            [sLL happy_var_1 happy_var_6 $ Match (happy_var_2:happy_var_3) (snd happy_var_4) (unguardedGRHSs happy_var_6)]))
                          [mj AnnLam happy_var_1,mj AnnRarrow happy_var_5])}}}}}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_426 = happyMonadReduce 4# 148# happyReduction_426
happyReduction_426 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut89 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut161 happy_x_4 of { happy_var_4 -> 
	( ams (sLL happy_var_1 happy_var_4 $ HsLet (snd $ unLoc happy_var_2) happy_var_4)
                                               (mj AnnLet happy_var_1:mj AnnIn happy_var_3
                                                 :(fst $ unLoc happy_var_2)))}}}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_427 = happyMonadReduce 3# 148# happyReduction_427
happyReduction_427 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut189 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsLamCase placeHolderType
                                   (mkMatchGroup FromSource (snd $ unLoc happy_var_3)))
                   (mj AnnLam happy_var_1:mj AnnCase happy_var_2:(fst $ unLoc happy_var_3)))}}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_428 = happyMonadReduce 8# 148# happyReduction_428
happyReduction_428 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	case happyOut164 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut161 happy_x_5 of { happy_var_5 -> 
	case happyOut164 happy_x_6 of { happy_var_6 -> 
	case happyOutTok happy_x_7 of { happy_var_7 -> 
	case happyOut161 happy_x_8 of { happy_var_8 -> 
	( checkDoAndIfThenElse happy_var_2 (snd happy_var_3) happy_var_5 (snd happy_var_6) happy_var_8 >>
                              ams (sLL happy_var_1 happy_var_8 $ mkHsIf happy_var_2 happy_var_5 happy_var_8)
                                  (mj AnnIf happy_var_1:mj AnnThen happy_var_4
                                     :mj AnnElse happy_var_7
                                     :(map (\l -> mj AnnSemi l) (fst happy_var_3))
                                    ++(map (\l -> mj AnnSemi l) (fst happy_var_6))))}}}}}}}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_429 = happyMonadReduce 2# 148# happyReduction_429
happyReduction_429 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut197 happy_x_2 of { happy_var_2 -> 
	( hintMultiWayIf (getLoc happy_var_1) >>
                                           ams (sLL happy_var_1 happy_var_2 $ HsMultiIf
                                                     placeHolderType
                                                     (reverse $ snd $ unLoc happy_var_2))
                                               (mj AnnIf happy_var_1:(fst $ unLoc happy_var_2)))}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_430 = happyMonadReduce 4# 148# happyReduction_430
happyReduction_430 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut189 happy_x_4 of { happy_var_4 -> 
	( ams (sLL happy_var_1 happy_var_4 $ HsCase happy_var_2 (mkMatchGroup
                                                   FromSource (snd $ unLoc happy_var_4)))
                                               (mj AnnCase happy_var_1:mj AnnOf happy_var_3
                                                  :(fst $ unLoc happy_var_4)))}}}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_431 = happyMonadReduce 2# 148# happyReduction_431
happyReduction_431 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut167 happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 $ NegApp happy_var_2 noSyntaxExpr)
                                               [mj AnnMinus happy_var_1])}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_432 = happyMonadReduce 2# 148# happyReduction_432
happyReduction_432 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut203 happy_x_2 of { happy_var_2 -> 
	( ams (L (comb2 happy_var_1 happy_var_2)
                                               (mkHsDo DoExpr (snd $ unLoc happy_var_2)))
                                               (mj AnnDo happy_var_1:(fst $ unLoc happy_var_2)))}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_433 = happyMonadReduce 2# 148# happyReduction_433
happyReduction_433 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut203 happy_x_2 of { happy_var_2 -> 
	( ams (L (comb2 happy_var_1 happy_var_2)
                                              (mkHsDo MDoExpr (snd $ unLoc happy_var_2)))
                                           (mj AnnMdo happy_var_1:(fst $ unLoc happy_var_2)))}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_434 = happyMonadReduce 2# 148# happyReduction_434
happyReduction_434 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut165 happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	( do { on <- extension sccProfilingOn
                                     ; ams (sLL happy_var_1 happy_var_2 $ if on
                                                         then HsSCC (snd $ unLoc happy_var_1) happy_var_2
                                                         else HsPar happy_var_2)
                                           (fst $ unLoc happy_var_1) })}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_435 = happyMonadReduce 2# 148# happyReduction_435
happyReduction_435 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut166 happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	( do { on <- extension hpcEnabled
                                       ; ams (sLL happy_var_1 happy_var_2 $ if on
                                                           then HsTickPragma
                                                                    (snd $ unLoc happy_var_1) happy_var_2
                                                           else HsPar happy_var_2)
                                             (fst $ unLoc happy_var_1) })}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_436 = happyMonadReduce 4# 148# happyReduction_436
happyReduction_436 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut168 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut161 happy_x_4 of { happy_var_4 -> 
	( checkPattern empty happy_var_2 >>= \ p ->
                           checkCommand happy_var_4 >>= \ cmd ->
                           ams (sLL happy_var_1 happy_var_4 $ HsProc p (sLL happy_var_1 happy_var_4 $ HsCmdTop cmd placeHolderType
                                                placeHolderType []))
                                            -- TODO: is LL right here?
                               [mj AnnProc happy_var_1,mj AnnRarrow happy_var_3])}}}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_437 = happyMonadReduce 4# 148# happyReduction_437
happyReduction_437 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut161 happy_x_4 of { happy_var_4 -> 
	( ams (sLL happy_var_1 happy_var_4 $ HsCoreAnn (getSTRING happy_var_2) happy_var_4)
                                              [mo happy_var_1,mj AnnVal happy_var_2
                                              ,mc happy_var_3])}}}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_438 = happySpecReduce_1  148# happyReduction_438
happyReduction_438 happy_x_1
	 =  case happyOut167 happy_x_1 of { happy_var_1 -> 
	happyIn163
		 (happy_var_1
	)}

happyReduce_439 = happyMonadReduce 6# 148# happyReduction_439
happyReduction_439 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	( parseErrorSDoc (combineLocs happy_var_1 happy_var_5) $ text
                                                        "parse error in lambda: no expression after '->'")}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_440 = happyMonadReduce 2# 148# happyReduction_440
happyReduction_440 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( parseErrorSDoc (getLoc happy_var_1) $ text
                                                        "parse error: naked lambda expression ''")}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_441 = happyMonadReduce 4# 148# happyReduction_441
happyReduction_441 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut89 happy_x_2 of { happy_var_2 -> 
	( parseErrorSDoc (combineLocs happy_var_1 happy_var_2) $ text
                                                        "parse error in let binding: missing expression after 'in'")}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_442 = happyMonadReduce 3# 148# happyReduction_442
happyReduction_442 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut89 happy_x_2 of { happy_var_2 -> 
	( parseErrorSDoc (combineLocs happy_var_1 happy_var_2) $ text
                                                        "parse error in let binding: missing required 'in'")}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_443 = happyMonadReduce 2# 148# happyReduction_443
happyReduction_443 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( parseErrorSDoc (getLoc happy_var_1) $ text
                                                        "parse error: naked let binding")}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_444 = happyMonadReduce 8# 148# happyReduction_444
happyReduction_444 (happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_5 of { happy_var_5 -> 
	( hintIf (combineLocs happy_var_1 happy_var_5) "else clause empty")}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_445 = happyMonadReduce 7# 148# happyReduction_445
happyReduction_445 (happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_5 of { happy_var_5 -> 
	( hintIf (combineLocs happy_var_1 happy_var_5) "missing required else clause")}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_446 = happyMonadReduce 5# 148# happyReduction_446
happyReduction_446 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	( hintIf (combineLocs happy_var_1 happy_var_2) "then clause empty")}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_447 = happyMonadReduce 4# 148# happyReduction_447
happyReduction_447 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	( hintIf (combineLocs happy_var_1 happy_var_2) "missing required then and else clauses")}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_448 = happyMonadReduce 2# 148# happyReduction_448
happyReduction_448 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( hintIf (getLoc happy_var_1) "naked if statement")}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_449 = happyMonadReduce 4# 148# happyReduction_449
happyReduction_449 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	( parseErrorSDoc (combineLocs happy_var_1 happy_var_2) $ text
                                                        "parse error in case statement: missing list after '->'")}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_450 = happyMonadReduce 3# 148# happyReduction_450
happyReduction_450 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	( parseErrorSDoc (combineLocs happy_var_1 happy_var_2) $ text
                                                        "parse error in case statement: missing required 'of'")}}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_451 = happyMonadReduce 2# 148# happyReduction_451
happyReduction_451 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( parseErrorSDoc (getLoc happy_var_1) $ text
                                                        "parse error: naked case statement")}
	) (\r -> happyReturn (happyIn163 r))

happyReduce_452 = happySpecReduce_1  149# happyReduction_452
happyReduction_452 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn164
		 (([happy_var_1],True)
	)}

happyReduce_453 = happySpecReduce_0  149# happyReduction_453
happyReduction_453  =  happyIn164
		 (([],False)
	)

happyReduce_454 = happyMonadReduce 3# 150# happyReduction_454
happyReduction_454 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( do scc <- getSCC happy_var_2
                                            ; return $ sLL happy_var_1 happy_var_3
                                               ([mo happy_var_1,mj AnnVal happy_var_2
                                                ,mc happy_var_3],scc))}}}
	) (\r -> happyReturn (happyIn165 r))

happyReduce_455 = happySpecReduce_3  150# happyReduction_455
happyReduction_455 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn165
		 (sLL happy_var_1 happy_var_3 ([mo happy_var_1,mj AnnVal happy_var_2
                                         ,mc happy_var_3]
                                        ,(getVARID happy_var_2))
	)}}}

happyReduce_456 = happyReduce 10# 151# happyReduction_456
happyReduction_456 (happy_x_10 `HappyStk`
	happy_x_9 `HappyStk`
	happy_x_8 `HappyStk`
	happy_x_7 `HappyStk`
	happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	case happyOutTok happy_x_6 of { happy_var_6 -> 
	case happyOutTok happy_x_7 of { happy_var_7 -> 
	case happyOutTok happy_x_8 of { happy_var_8 -> 
	case happyOutTok happy_x_9 of { happy_var_9 -> 
	case happyOutTok happy_x_10 of { happy_var_10 -> 
	happyIn166
		 (sLL happy_var_1 happy_var_10 $ ([mo happy_var_1,mj AnnVal happy_var_2
                                              ,mj AnnVal happy_var_3,mj AnnColon happy_var_4
                                              ,mj AnnVal happy_var_5,mj AnnMinus happy_var_6
                                              ,mj AnnVal happy_var_7,mj AnnColon happy_var_8
                                              ,mj AnnVal happy_var_9,mc happy_var_10]
                                              ,(getSTRING happy_var_2
                                               ,( fromInteger $ getINTEGER happy_var_3
                                                , fromInteger $ getINTEGER happy_var_5
                                                )
                                               ,( fromInteger $ getINTEGER happy_var_7
                                                , fromInteger $ getINTEGER happy_var_9
                                                )
                                               ))
	) `HappyStk` happyRest}}}}}}}}}}

happyReduce_457 = happySpecReduce_2  152# happyReduction_457
happyReduction_457 happy_x_2
	happy_x_1
	 =  case happyOut167 happy_x_1 of { happy_var_1 -> 
	case happyOut168 happy_x_2 of { happy_var_2 -> 
	happyIn167
		 (sLL happy_var_1 happy_var_2 $ HsApp happy_var_1 happy_var_2
	)}}

happyReduce_458 = happySpecReduce_2  152# happyReduction_458
happyReduction_458 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut168 happy_x_2 of { happy_var_2 -> 
	happyIn167
		 (sLL happy_var_1 happy_var_2 $ HsStatic happy_var_2
	)}}

happyReduce_459 = happySpecReduce_1  152# happyReduction_459
happyReduction_459 happy_x_1
	 =  case happyOut168 happy_x_1 of { happy_var_1 -> 
	happyIn167
		 (happy_var_1
	)}

happyReduce_460 = happyMonadReduce 3# 153# happyReduction_460
happyReduction_460 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut245 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut168 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ EAsPat happy_var_1 happy_var_3) [mj AnnAt happy_var_2])}}}
	) (\r -> happyReturn (happyIn168 r))

happyReduce_461 = happyMonadReduce 2# 153# happyReduction_461
happyReduction_461 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut168 happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 $ ELazyPat happy_var_2) [mj AnnTilde happy_var_1])}}
	) (\r -> happyReturn (happyIn168 r))

happyReduce_462 = happySpecReduce_1  153# happyReduction_462
happyReduction_462 happy_x_1
	 =  case happyOut169 happy_x_1 of { happy_var_1 -> 
	happyIn168
		 (happy_var_1
	)}

happyReduce_463 = happyMonadReduce 4# 154# happyReduction_463
happyReduction_463 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut169 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut209 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( do { r <- mkRecConstrOrUpdate happy_var_1 (comb2 happy_var_2 happy_var_4)
                                                                   (snd happy_var_3)
                                     ; _ <- ams (sLL happy_var_1 happy_var_4 ()) (mo happy_var_2:mc happy_var_4:(fst happy_var_3))
                                     ; checkRecordSyntax (sLL happy_var_1 happy_var_4 r) })}}}}
	) (\r -> happyReturn (happyIn169 r))

happyReduce_464 = happySpecReduce_1  154# happyReduction_464
happyReduction_464 happy_x_1
	 =  case happyOut170 happy_x_1 of { happy_var_1 -> 
	happyIn169
		 (happy_var_1
	)}

happyReduce_465 = happySpecReduce_1  155# happyReduction_465
happyReduction_465 happy_x_1
	 =  case happyOut214 happy_x_1 of { happy_var_1 -> 
	happyIn170
		 (sL1 happy_var_1 (HsIPVar $! unLoc happy_var_1)
	)}

happyReduce_466 = happySpecReduce_1  155# happyReduction_466
happyReduction_466 happy_x_1
	 =  case happyOut38 happy_x_1 of { happy_var_1 -> 
	happyIn170
		 (sL1 happy_var_1 (HsVar   $! unLoc happy_var_1)
	)}

happyReduce_467 = happySpecReduce_1  155# happyReduction_467
happyReduction_467 happy_x_1
	 =  case happyOut259 happy_x_1 of { happy_var_1 -> 
	happyIn170
		 (sL1 happy_var_1 (HsLit   $! unLoc happy_var_1)
	)}

happyReduce_468 = happySpecReduce_1  155# happyReduction_468
happyReduction_468 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn170
		 (sL (getLoc happy_var_1) (HsOverLit $! mkHsIntegral (getINTEGERs happy_var_1)
                                         (getINTEGER happy_var_1) placeHolderType)
	)}

happyReduce_469 = happySpecReduce_1  155# happyReduction_469
happyReduction_469 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn170
		 (sL (getLoc happy_var_1) (HsOverLit $! mkHsFractional
                                          (getRATIONAL happy_var_1) placeHolderType)
	)}

happyReduce_470 = happyMonadReduce 3# 155# happyReduction_470
happyReduction_470 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut176 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (HsPar happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn170 r))

happyReduce_471 = happyMonadReduce 3# 155# happyReduction_471
happyReduction_471 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut177 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (ExplicitTuple happy_var_2 Boxed))
                                               [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn170 r))

happyReduce_472 = happyMonadReduce 3# 155# happyReduction_472
happyReduction_472 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut176 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (ExplicitTuple [L (gl happy_var_2)
                                                         (Present happy_var_2)] Unboxed))
                                               [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn170 r))

happyReduce_473 = happyMonadReduce 3# 155# happyReduction_473
happyReduction_473 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut177 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (ExplicitTuple happy_var_2 Unboxed))
                                               [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn170 r))

happyReduce_474 = happyMonadReduce 3# 155# happyReduction_474
happyReduction_474 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut180 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (snd happy_var_2)) (mo happy_var_1:mc happy_var_3:(fst happy_var_2)))}}}
	) (\r -> happyReturn (happyIn170 r))

happyReduce_475 = happyMonadReduce 3# 155# happyReduction_475
happyReduction_475 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut186 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (snd happy_var_2)) (mo happy_var_1:mc happy_var_3:(fst happy_var_2)))}}}
	) (\r -> happyReturn (happyIn170 r))

happyReduce_476 = happySpecReduce_1  155# happyReduction_476
happyReduction_476 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn170
		 (sL1 happy_var_1 EWildPat
	)}

happyReduce_477 = happySpecReduce_1  155# happyReduction_477
happyReduction_477 happy_x_1
	 =  case happyOut171 happy_x_1 of { happy_var_1 -> 
	happyIn170
		 (happy_var_1
	)}

happyReduce_478 = happySpecReduce_2  155# happyReduction_478
happyReduction_478 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut245 happy_x_2 of { happy_var_2 -> 
	happyIn170
		 (sLL happy_var_1 happy_var_2 $ HsBracket (VarBr True  (unLoc happy_var_2))
	)}}

happyReduce_479 = happySpecReduce_2  155# happyReduction_479
happyReduction_479 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut221 happy_x_2 of { happy_var_2 -> 
	happyIn170
		 (sLL happy_var_1 happy_var_2 $ HsBracket (VarBr True  (unLoc happy_var_2))
	)}}

happyReduce_480 = happySpecReduce_2  155# happyReduction_480
happyReduction_480 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut241 happy_x_2 of { happy_var_2 -> 
	happyIn170
		 (sLL happy_var_1 happy_var_2 $ HsBracket (VarBr False (unLoc happy_var_2))
	)}}

happyReduce_481 = happySpecReduce_2  155# happyReduction_481
happyReduction_481 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut227 happy_x_2 of { happy_var_2 -> 
	happyIn170
		 (sLL happy_var_1 happy_var_2 $ HsBracket (VarBr False (unLoc happy_var_2))
	)}}

happyReduce_482 = happyMonadReduce 3# 155# happyReduction_482
happyReduction_482 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsBracket (ExpBr happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn170 r))

happyReduce_483 = happyMonadReduce 3# 155# happyReduction_483
happyReduction_483 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsBracket (TExpBr happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn170 r))

happyReduce_484 = happyMonadReduce 3# 155# happyReduction_484
happyReduction_484 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut116 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( checkNoPartialType
                                   (text "in type brackets" <> colon
                                    <+> quotes (text "[t|" <+> ppr happy_var_2 <+> text "|]")) happy_var_2 >>
                                 ams (sLL happy_var_1 happy_var_3 $ HsBracket (TypBr happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn170 r))

happyReduce_485 = happyMonadReduce 3# 155# happyReduction_485
happyReduction_485 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut162 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( checkPattern empty happy_var_2 >>= \p ->
                                      ams (sLL happy_var_1 happy_var_3 $ HsBracket (PatBr p))
                                          [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn170 r))

happyReduce_486 = happyMonadReduce 3# 155# happyReduction_486
happyReduction_486 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut174 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ HsBracket (DecBrL (snd happy_var_2)))
                                      (mo happy_var_1:mc happy_var_3:fst happy_var_2))}}}
	) (\r -> happyReturn (happyIn170 r))

happyReduce_487 = happySpecReduce_1  155# happyReduction_487
happyReduction_487 happy_x_1
	 =  case happyOut160 happy_x_1 of { happy_var_1 -> 
	happyIn170
		 (sL1 happy_var_1 (HsQuasiQuoteE (unLoc happy_var_1))
	)}

happyReduce_488 = happyMonadReduce 4# 155# happyReduction_488
happyReduction_488 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut170 happy_x_2 of { happy_var_2 -> 
	case happyOut172 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	( ams (sLL happy_var_1 happy_var_4 $ HsArrForm happy_var_2
                                                           Nothing (reverse happy_var_3))
                                          [mo happy_var_1,mc happy_var_4])}}}}
	) (\r -> happyReturn (happyIn170 r))

happyReduce_489 = happySpecReduce_1  156# happyReduction_489
happyReduction_489 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn171
		 (sL1 happy_var_1 $ mkHsSpliceE
                                        (sL1 happy_var_1 $ HsVar (mkUnqual varName
                                                        (getTH_ID_SPLICE happy_var_1)))
	)}

happyReduce_490 = happyMonadReduce 3# 156# happyReduction_490
happyReduction_490 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ mkHsSpliceE happy_var_2) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn171 r))

happyReduce_491 = happySpecReduce_1  156# happyReduction_491
happyReduction_491 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn171
		 (sL1 happy_var_1 $ mkHsSpliceTE
                                        (sL1 happy_var_1 $ HsVar (mkUnqual varName
                                                     (getTH_ID_TY_SPLICE happy_var_1)))
	)}

happyReduce_492 = happyMonadReduce 3# 156# happyReduction_492
happyReduction_492 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ mkHsSpliceTE happy_var_2) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn171 r))

happyReduce_493 = happySpecReduce_2  157# happyReduction_493
happyReduction_493 happy_x_2
	happy_x_1
	 =  case happyOut172 happy_x_1 of { happy_var_1 -> 
	case happyOut173 happy_x_2 of { happy_var_2 -> 
	happyIn172
		 (happy_var_2 : happy_var_1
	)}}

happyReduce_494 = happySpecReduce_0  157# happyReduction_494
happyReduction_494  =  happyIn172
		 ([]
	)

happyReduce_495 = happyMonadReduce 1# 158# happyReduction_495
happyReduction_495 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut170 happy_x_1 of { happy_var_1 -> 
	( checkCommand happy_var_1 >>= \ cmd ->
                                    return (sL1 happy_var_1 $ HsCmdTop cmd
                                           placeHolderType placeHolderType []))}
	) (\r -> happyReturn (happyIn173 r))

happyReduce_496 = happySpecReduce_3  159# happyReduction_496
happyReduction_496 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut175 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn174
		 (([mj AnnOpen happy_var_1
                                                  ,mj AnnClose happy_var_3],happy_var_2)
	)}}}

happyReduce_497 = happySpecReduce_3  159# happyReduction_497
happyReduction_497 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut175 happy_x_2 of { happy_var_2 -> 
	happyIn174
		 (([],happy_var_2)
	)}

happyReduce_498 = happySpecReduce_0  160# happyReduction_498
happyReduction_498  =  happyIn175
		 ([]
	)

happyReduce_499 = happySpecReduce_1  160# happyReduction_499
happyReduction_499 happy_x_1
	 =  case happyOut25 happy_x_1 of { happy_var_1 -> 
	happyIn175
		 (happy_var_1
	)}

happyReduce_500 = happySpecReduce_1  161# happyReduction_500
happyReduction_500 happy_x_1
	 =  case happyOut161 happy_x_1 of { happy_var_1 -> 
	happyIn176
		 (happy_var_1
	)}

happyReduce_501 = happySpecReduce_2  161# happyReduction_501
happyReduction_501 happy_x_2
	happy_x_1
	 =  case happyOut162 happy_x_1 of { happy_var_1 -> 
	case happyOut237 happy_x_2 of { happy_var_2 -> 
	happyIn176
		 (sLL happy_var_1 happy_var_2 $ SectionL happy_var_1 happy_var_2
	)}}

happyReduce_502 = happySpecReduce_2  161# happyReduction_502
happyReduction_502 happy_x_2
	happy_x_1
	 =  case happyOut238 happy_x_1 of { happy_var_1 -> 
	case happyOut162 happy_x_2 of { happy_var_2 -> 
	happyIn176
		 (sLL happy_var_1 happy_var_2 $ SectionR happy_var_1 happy_var_2
	)}}

happyReduce_503 = happyMonadReduce 3# 161# happyReduction_503
happyReduction_503 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut161 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut176 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ EViewPat happy_var_1 happy_var_3) [mj AnnRarrow happy_var_2])}}}
	) (\r -> happyReturn (happyIn176 r))

happyReduce_504 = happyMonadReduce 2# 162# happyReduction_504
happyReduction_504 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut176 happy_x_1 of { happy_var_1 -> 
	case happyOut178 happy_x_2 of { happy_var_2 -> 
	( do { addAnnotation (gl happy_var_1) AnnComma (fst happy_var_2)
                                ; return ((L (gl happy_var_1) (Present happy_var_1)) : snd happy_var_2) })}}
	) (\r -> happyReturn (happyIn177 r))

happyReduce_505 = happyMonadReduce 2# 162# happyReduction_505
happyReduction_505 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut262 happy_x_1 of { happy_var_1 -> 
	case happyOut179 happy_x_2 of { happy_var_2 -> 
	( do { mapM_ (\ll -> addAnnotation (gl ll) AnnComma (gl ll)) happy_var_2
                      ; return
                           (let tt = if null happy_var_2
                                       then [noLoc missingTupArg]
                                       else happy_var_2
                            in map (\l -> L l missingTupArg) (fst happy_var_1) ++ tt) })}}
	) (\r -> happyReturn (happyIn177 r))

happyReduce_506 = happyMonadReduce 2# 163# happyReduction_506
happyReduction_506 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut262 happy_x_1 of { happy_var_1 -> 
	case happyOut179 happy_x_2 of { happy_var_2 -> 
	( do { mapM_ (\ll -> addAnnotation ll AnnComma ll) (tail $ fst happy_var_1)
             ; return (
         let tt = if null happy_var_2
                    then [L (last $ fst happy_var_1) missingTupArg]
                    else happy_var_2
         in (head $ fst happy_var_1
            ,(map (\l -> L l missingTupArg) (init $ fst happy_var_1)) ++ tt)) })}}
	) (\r -> happyReturn (happyIn178 r))

happyReduce_507 = happyMonadReduce 2# 164# happyReduction_507
happyReduction_507 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut176 happy_x_1 of { happy_var_1 -> 
	case happyOut178 happy_x_2 of { happy_var_2 -> 
	( addAnnotation (gl happy_var_1) AnnComma (fst happy_var_2) >>
                                    return ((L (gl happy_var_1) (Present happy_var_1)) : snd happy_var_2))}}
	) (\r -> happyReturn (happyIn179 r))

happyReduce_508 = happySpecReduce_1  164# happyReduction_508
happyReduction_508 happy_x_1
	 =  case happyOut176 happy_x_1 of { happy_var_1 -> 
	happyIn179
		 ([L (gl happy_var_1) (Present happy_var_1)]
	)}

happyReduce_509 = happySpecReduce_0  164# happyReduction_509
happyReduction_509  =  happyIn179
		 ([] {- [noLoc missingTupArg] -}
	)

happyReduce_510 = happySpecReduce_1  165# happyReduction_510
happyReduction_510 happy_x_1
	 =  case happyOut176 happy_x_1 of { happy_var_1 -> 
	happyIn180
		 (([],ExplicitList placeHolderType Nothing [happy_var_1])
	)}

happyReduce_511 = happySpecReduce_1  165# happyReduction_511
happyReduction_511 happy_x_1
	 =  case happyOut181 happy_x_1 of { happy_var_1 -> 
	happyIn180
		 (([],ExplicitList placeHolderType Nothing
                                                   (reverse (unLoc happy_var_1)))
	)}

happyReduce_512 = happySpecReduce_2  165# happyReduction_512
happyReduction_512 happy_x_2
	happy_x_1
	 =  case happyOut176 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn180
		 (([mj AnnDotdot happy_var_2],
                                      ArithSeq noPostTcExpr Nothing (From happy_var_1))
	)}}

happyReduce_513 = happyReduce 4# 165# happyReduction_513
happyReduction_513 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut176 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut161 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	happyIn180
		 (([mj AnnComma happy_var_2,mj AnnDotdot happy_var_4],
                                  ArithSeq noPostTcExpr Nothing
                                                             (FromThen happy_var_1 happy_var_3))
	) `HappyStk` happyRest}}}}

happyReduce_514 = happySpecReduce_3  165# happyReduction_514
happyReduction_514 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut176 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut161 happy_x_3 of { happy_var_3 -> 
	happyIn180
		 (([mj AnnDotdot happy_var_2],
                                   ArithSeq noPostTcExpr Nothing
                                                               (FromTo happy_var_1 happy_var_3))
	)}}}

happyReduce_515 = happyReduce 5# 165# happyReduction_515
happyReduction_515 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut176 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut161 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut161 happy_x_5 of { happy_var_5 -> 
	happyIn180
		 (([mj AnnComma happy_var_2,mj AnnDotdot happy_var_4],
                                    ArithSeq noPostTcExpr Nothing
                                                (FromThenTo happy_var_1 happy_var_3 happy_var_5))
	) `HappyStk` happyRest}}}}}

happyReduce_516 = happyMonadReduce 3# 165# happyReduction_516
happyReduction_516 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut176 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut182 happy_x_3 of { happy_var_3 -> 
	( checkMonadComp >>= \ ctxt ->
                return ([mj AnnVbar happy_var_2],
                        mkHsComp ctxt (unLoc happy_var_3) happy_var_1))}}}
	) (\r -> happyReturn (happyIn180 r))

happyReduce_517 = happyMonadReduce 3# 166# happyReduction_517
happyReduction_517 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut181 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut176 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl $ head $ unLoc happy_var_1)
                                                            AnnComma (gl happy_var_2) >>
                                      return (sLL happy_var_1 happy_var_3 (((:) $! happy_var_3) $! unLoc happy_var_1)))}}}
	) (\r -> happyReturn (happyIn181 r))

happyReduce_518 = happyMonadReduce 3# 166# happyReduction_518
happyReduction_518 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut176 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut176 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl happy_var_1) AnnComma (gl happy_var_2) >>
                                      return (sLL happy_var_1 happy_var_3 [happy_var_3,happy_var_1]))}}}
	) (\r -> happyReturn (happyIn181 r))

happyReduce_519 = happySpecReduce_1  167# happyReduction_519
happyReduction_519 happy_x_1
	 =  case happyOut183 happy_x_1 of { happy_var_1 -> 
	happyIn182
		 (case (unLoc happy_var_1) of
                    [qs] -> sL1 happy_var_1 qs
                    -- We just had one thing in our "parallel" list so
                    -- we simply return that thing directly

                    qss -> sL1 happy_var_1 [sL1 happy_var_1 $ ParStmt [ParStmtBlock qs [] noSyntaxExpr |
                                            qs <- qss]
                                            noSyntaxExpr noSyntaxExpr]
                    -- We actually found some actual parallel lists so
                    -- we wrap them into as a ParStmt
	)}

happyReduce_520 = happyMonadReduce 3# 168# happyReduction_520
happyReduction_520 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut184 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut183 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl $ last $ unLoc happy_var_1) AnnVbar (gl happy_var_2) >>
                        return (L (getLoc happy_var_2) (reverse (unLoc happy_var_1) : unLoc happy_var_3)))}}}
	) (\r -> happyReturn (happyIn183 r))

happyReduce_521 = happySpecReduce_1  168# happyReduction_521
happyReduction_521 happy_x_1
	 =  case happyOut184 happy_x_1 of { happy_var_1 -> 
	happyIn183
		 (L (getLoc happy_var_1) [reverse (unLoc happy_var_1)]
	)}

happyReduce_522 = happyMonadReduce 3# 169# happyReduction_522
happyReduction_522 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut184 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut185 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl $ last $ unLoc happy_var_1) AnnComma (gl happy_var_2) >>
                return (sLL happy_var_1 happy_var_3 [L (getLoc happy_var_3) ((unLoc happy_var_3) (reverse (unLoc happy_var_1)))]))}}}
	) (\r -> happyReturn (happyIn184 r))

happyReduce_523 = happyMonadReduce 3# 169# happyReduction_523
happyReduction_523 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut184 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut208 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl $ last $ unLoc happy_var_1) AnnComma (gl happy_var_2) >>
                return (sLL happy_var_1 happy_var_3 (happy_var_3 : unLoc happy_var_1)))}}}
	) (\r -> happyReturn (happyIn184 r))

happyReduce_524 = happySpecReduce_1  169# happyReduction_524
happyReduction_524 happy_x_1
	 =  case happyOut185 happy_x_1 of { happy_var_1 -> 
	happyIn184
		 (sLL happy_var_1 happy_var_1 [L (getLoc happy_var_1) ((unLoc happy_var_1) [])]
	)}

happyReduce_525 = happySpecReduce_1  169# happyReduction_525
happyReduction_525 happy_x_1
	 =  case happyOut208 happy_x_1 of { happy_var_1 -> 
	happyIn184
		 (sL1 happy_var_1 [happy_var_1]
	)}

happyReduce_526 = happyMonadReduce 2# 170# happyReduction_526
happyReduction_526 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 $ \ss -> (mkTransformStmt ss happy_var_2))
                                      [mj AnnThen happy_var_1])}}
	) (\r -> happyReturn (happyIn185 r))

happyReduce_527 = happyMonadReduce 4# 170# happyReduction_527
happyReduction_527 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut161 happy_x_4 of { happy_var_4 -> 
	( ams (sLL happy_var_1 happy_var_4 $ \ss -> (mkTransformByStmt ss happy_var_2 happy_var_4))
                                      [mj AnnThen happy_var_1,mj AnnBy  happy_var_3])}}}}
	) (\r -> happyReturn (happyIn185 r))

happyReduce_528 = happyMonadReduce 4# 170# happyReduction_528
happyReduction_528 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut161 happy_x_4 of { happy_var_4 -> 
	( ams (sLL happy_var_1 happy_var_4 $ \ss -> (mkGroupUsingStmt ss happy_var_4))
                    [mj AnnThen happy_var_1,mj AnnGroup happy_var_2,mj AnnUsing happy_var_3])}}}}
	) (\r -> happyReturn (happyIn185 r))

happyReduce_529 = happyMonadReduce 6# 170# happyReduction_529
happyReduction_529 (happy_x_6 `HappyStk`
	happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut161 happy_x_4 of { happy_var_4 -> 
	case happyOutTok happy_x_5 of { happy_var_5 -> 
	case happyOut161 happy_x_6 of { happy_var_6 -> 
	( ams (sLL happy_var_1 happy_var_6 $ \ss -> (mkGroupByUsingStmt ss happy_var_4 happy_var_6))
                     [mj AnnThen happy_var_1,mj AnnGroup happy_var_2,mj AnnBy happy_var_3,mj AnnUsing happy_var_5])}}}}}}
	) (\r -> happyReturn (happyIn185 r))

happyReduce_530 = happySpecReduce_0  171# happyReduction_530
happyReduction_530  =  happyIn186
		 (([],ExplicitPArr placeHolderType [])
	)

happyReduce_531 = happySpecReduce_1  171# happyReduction_531
happyReduction_531 happy_x_1
	 =  case happyOut176 happy_x_1 of { happy_var_1 -> 
	happyIn186
		 (([],ExplicitPArr placeHolderType [happy_var_1])
	)}

happyReduce_532 = happySpecReduce_1  171# happyReduction_532
happyReduction_532 happy_x_1
	 =  case happyOut181 happy_x_1 of { happy_var_1 -> 
	happyIn186
		 (([],ExplicitPArr placeHolderType
                                                          (reverse (unLoc happy_var_1)))
	)}

happyReduce_533 = happySpecReduce_3  171# happyReduction_533
happyReduction_533 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut176 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut161 happy_x_3 of { happy_var_3 -> 
	happyIn186
		 (([mj AnnDotdot happy_var_2]
                                 ,PArrSeq noPostTcExpr (FromTo happy_var_1 happy_var_3))
	)}}}

happyReduce_534 = happyReduce 5# 171# happyReduction_534
happyReduction_534 (happy_x_5 `HappyStk`
	happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest)
	 = case happyOut176 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut161 happy_x_3 of { happy_var_3 -> 
	case happyOutTok happy_x_4 of { happy_var_4 -> 
	case happyOut161 happy_x_5 of { happy_var_5 -> 
	happyIn186
		 (([mj AnnComma happy_var_2,mj AnnDotdot happy_var_4]
                          ,PArrSeq noPostTcExpr (FromThenTo happy_var_1 happy_var_3 happy_var_5))
	) `HappyStk` happyRest}}}}}

happyReduce_535 = happySpecReduce_3  171# happyReduction_535
happyReduction_535 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut176 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut182 happy_x_3 of { happy_var_3 -> 
	happyIn186
		 (([mj AnnVbar happy_var_2],mkHsComp PArrComp (unLoc happy_var_3) happy_var_1)
	)}}}

happyReduce_536 = happySpecReduce_1  172# happyReduction_536
happyReduction_536 happy_x_1
	 =  case happyOut188 happy_x_1 of { happy_var_1 -> 
	happyIn187
		 (L (getLoc happy_var_1) (reverse (unLoc happy_var_1))
	)}

happyReduce_537 = happyMonadReduce 3# 173# happyReduction_537
happyReduction_537 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut188 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut208 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (happy_var_3 : unLoc happy_var_1)) [mj AnnComma happy_var_2])}}}
	) (\r -> happyReturn (happyIn188 r))

happyReduce_538 = happySpecReduce_1  173# happyReduction_538
happyReduction_538 happy_x_1
	 =  case happyOut208 happy_x_1 of { happy_var_1 -> 
	happyIn188
		 (sL1 happy_var_1 [happy_var_1]
	)}

happyReduce_539 = happySpecReduce_3  174# happyReduction_539
happyReduction_539 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut190 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn189
		 (sLL happy_var_1 happy_var_3 ([mo happy_var_1,mc happy_var_3],(reverse (unLoc happy_var_2)))
	)}}}

happyReduce_540 = happySpecReduce_3  174# happyReduction_540
happyReduction_540 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut190 happy_x_2 of { happy_var_2 -> 
	happyIn189
		 (L (getLoc happy_var_2) ([],(reverse (unLoc happy_var_2)))
	)}

happyReduce_541 = happySpecReduce_2  174# happyReduction_541
happyReduction_541 happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn189
		 (noLoc ([mo happy_var_1,mc happy_var_2],[])
	)}}

happyReduce_542 = happySpecReduce_2  174# happyReduction_542
happyReduction_542 happy_x_2
	happy_x_1
	 =  happyIn189
		 (noLoc ([],[])
	)

happyReduce_543 = happySpecReduce_1  175# happyReduction_543
happyReduction_543 happy_x_1
	 =  case happyOut191 happy_x_1 of { happy_var_1 -> 
	happyIn190
		 (sL1 happy_var_1 (unLoc happy_var_1)
	)}

happyReduce_544 = happyMonadReduce 2# 175# happyReduction_544
happyReduction_544 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut190 happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 (unLoc happy_var_2))
                                               [mj AnnSemi (head $ unLoc happy_var_2)])}}
	) (\r -> happyReturn (happyIn190 r))

happyReduce_545 = happyMonadReduce 3# 176# happyReduction_545
happyReduction_545 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut191 happy_x_1 of { happy_var_1 -> 
	case happyOut192 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (happy_var_3 : unLoc happy_var_1)) [mj AnnSemi happy_var_3])}}
	) (\r -> happyReturn (happyIn191 r))

happyReduce_546 = happyMonadReduce 2# 176# happyReduction_546
happyReduction_546 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut191 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 (unLoc happy_var_1))
                                         [mj AnnSemi (last $ unLoc happy_var_1)])}}
	) (\r -> happyReturn (happyIn191 r))

happyReduce_547 = happySpecReduce_1  176# happyReduction_547
happyReduction_547 happy_x_1
	 =  case happyOut192 happy_x_1 of { happy_var_1 -> 
	happyIn191
		 (sL1 happy_var_1 [happy_var_1]
	)}

happyReduce_548 = happySpecReduce_3  177# happyReduction_548
happyReduction_548 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut199 happy_x_1 of { happy_var_1 -> 
	case happyOut109 happy_x_2 of { happy_var_2 -> 
	case happyOut193 happy_x_3 of { happy_var_3 -> 
	happyIn192
		 (sLL happy_var_1 happy_var_3 (Match [happy_var_1] (snd happy_var_2) (unLoc happy_var_3))
	)}}}

happyReduce_549 = happyMonadReduce 2# 178# happyReduction_549
happyReduction_549 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut194 happy_x_1 of { happy_var_1 -> 
	case happyOut90 happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 (GRHSs (unLoc happy_var_1)
                                                             (snd $ unLoc happy_var_2)))
                                           (fst $ unLoc happy_var_2))}}
	) (\r -> happyReturn (happyIn193 r))

happyReduce_550 = happyMonadReduce 2# 179# happyReduction_550
happyReduction_550 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut161 happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 (unguardedRHS (comb2 happy_var_1 happy_var_2) happy_var_2))
                                     [mj AnnRarrow happy_var_1])}}
	) (\r -> happyReturn (happyIn194 r))

happyReduce_551 = happySpecReduce_1  179# happyReduction_551
happyReduction_551 happy_x_1
	 =  case happyOut195 happy_x_1 of { happy_var_1 -> 
	happyIn194
		 (sL1 happy_var_1 (reverse (unLoc happy_var_1))
	)}

happyReduce_552 = happySpecReduce_2  180# happyReduction_552
happyReduction_552 happy_x_2
	happy_x_1
	 =  case happyOut195 happy_x_1 of { happy_var_1 -> 
	case happyOut198 happy_x_2 of { happy_var_2 -> 
	happyIn195
		 (sLL happy_var_1 happy_var_2 (happy_var_2 : unLoc happy_var_1)
	)}}

happyReduce_553 = happySpecReduce_1  180# happyReduction_553
happyReduction_553 happy_x_1
	 =  case happyOut198 happy_x_1 of { happy_var_1 -> 
	happyIn195
		 (sL1 happy_var_1 [happy_var_1]
	)}

happyReduce_554 = happyMonadReduce 3# 181# happyReduction_554
happyReduction_554 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut196 happy_x_1 of { happy_var_1 -> 
	case happyOut198 happy_x_2 of { happy_var_2 -> 
	case happyOut164 happy_x_3 of { happy_var_3 -> 
	( ams (sL (comb2 happy_var_1 happy_var_2) (happy_var_2 : unLoc happy_var_1))
                                           (map (\l -> mj AnnSemi l) $ fst happy_var_3))}}}
	) (\r -> happyReturn (happyIn196 r))

happyReduce_555 = happyMonadReduce 2# 181# happyReduction_555
happyReduction_555 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut198 happy_x_1 of { happy_var_1 -> 
	case happyOut164 happy_x_2 of { happy_var_2 -> 
	( ams (sL1 happy_var_1 [happy_var_1])
                                           (map (\l -> mj AnnSemi l) $ fst happy_var_2))}}
	) (\r -> happyReturn (happyIn196 r))

happyReduce_556 = happySpecReduce_3  182# happyReduction_556
happyReduction_556 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut196 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn197
		 (sLL happy_var_1 happy_var_3 ([mo happy_var_1,mc happy_var_3],unLoc happy_var_2)
	)}}}

happyReduce_557 = happySpecReduce_2  182# happyReduction_557
happyReduction_557 happy_x_2
	happy_x_1
	 =  case happyOut196 happy_x_1 of { happy_var_1 -> 
	happyIn197
		 (sL1 happy_var_1 ([],unLoc happy_var_1)
	)}

happyReduce_558 = happyMonadReduce 4# 183# happyReduction_558
happyReduction_558 (happy_x_4 `HappyStk`
	happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut187 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	case happyOut161 happy_x_4 of { happy_var_4 -> 
	( ams (sL (comb2 happy_var_1 happy_var_4) $ GRHS (unLoc happy_var_2) happy_var_4)
                                         [mj AnnVbar happy_var_1,mj AnnRarrow happy_var_3])}}}}
	) (\r -> happyReturn (happyIn198 r))

happyReduce_559 = happyMonadReduce 1# 184# happyReduction_559
happyReduction_559 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut161 happy_x_1 of { happy_var_1 -> 
	( checkPattern empty happy_var_1)}
	) (\r -> happyReturn (happyIn199 r))

happyReduce_560 = happyMonadReduce 2# 184# happyReduction_560
happyReduction_560 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut168 happy_x_2 of { happy_var_2 -> 
	( amms (checkPattern empty (sLL happy_var_1 happy_var_2 (SectionR
                                                     (sL1 happy_var_1 (HsVar bang_RDR)) happy_var_2)))
                                [mj AnnBang happy_var_1])}}
	) (\r -> happyReturn (happyIn199 r))

happyReduce_561 = happyMonadReduce 1# 185# happyReduction_561
happyReduction_561 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut161 happy_x_1 of { happy_var_1 -> 
	( checkPattern
                                (text "Possibly caused by a missing 'do'?") happy_var_1)}
	) (\r -> happyReturn (happyIn200 r))

happyReduce_562 = happyMonadReduce 2# 185# happyReduction_562
happyReduction_562 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut168 happy_x_2 of { happy_var_2 -> 
	( amms (checkPattern
                                     (text "Possibly caused by a missing 'do'?")
                                     (sLL happy_var_1 happy_var_2 (SectionR (sL1 happy_var_1 (HsVar bang_RDR)) happy_var_2)))
                                  [mj AnnBang happy_var_1])}}
	) (\r -> happyReturn (happyIn200 r))

happyReduce_563 = happyMonadReduce 1# 186# happyReduction_563
happyReduction_563 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut168 happy_x_1 of { happy_var_1 -> 
	( checkPattern empty happy_var_1)}
	) (\r -> happyReturn (happyIn201 r))

happyReduce_564 = happyMonadReduce 2# 186# happyReduction_564
happyReduction_564 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut168 happy_x_2 of { happy_var_2 -> 
	( amms (checkPattern empty
                                            (sLL happy_var_1 happy_var_2 (SectionR
                                                (sL1 happy_var_1 (HsVar bang_RDR)) happy_var_2)))
                                        [mj AnnBang happy_var_1])}}
	) (\r -> happyReturn (happyIn201 r))

happyReduce_565 = happySpecReduce_2  187# happyReduction_565
happyReduction_565 happy_x_2
	happy_x_1
	 =  case happyOut201 happy_x_1 of { happy_var_1 -> 
	case happyOut202 happy_x_2 of { happy_var_2 -> 
	happyIn202
		 (happy_var_1 : happy_var_2
	)}}

happyReduce_566 = happySpecReduce_0  187# happyReduction_566
happyReduction_566  =  happyIn202
		 ([]
	)

happyReduce_567 = happySpecReduce_3  188# happyReduction_567
happyReduction_567 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut204 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn203
		 (sLL happy_var_1 happy_var_3 ((mo happy_var_1:mc happy_var_3:(fst $ unLoc happy_var_2))
                                             ,(snd $ unLoc happy_var_2))
	)}}}

happyReduce_568 = happySpecReduce_3  188# happyReduction_568
happyReduction_568 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut204 happy_x_2 of { happy_var_2 -> 
	happyIn203
		 (L (gl happy_var_2) (fst $ unLoc happy_var_2
                                                    ,snd $ unLoc happy_var_2)
	)}

happyReduce_569 = happySpecReduce_2  189# happyReduction_569
happyReduction_569 happy_x_2
	happy_x_1
	 =  case happyOut207 happy_x_1 of { happy_var_1 -> 
	case happyOut205 happy_x_2 of { happy_var_2 -> 
	happyIn204
		 (sLL happy_var_1 happy_var_2 (fst $ unLoc happy_var_2,(happy_var_1 : (snd $ unLoc happy_var_2)))
	)}}

happyReduce_570 = happyMonadReduce 2# 189# happyReduction_570
happyReduction_570 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut204 happy_x_2 of { happy_var_2 -> 
	( if null (snd $ unLoc happy_var_2)
                             then ams (sLL happy_var_1 happy_var_2 ([mj AnnSemi happy_var_1],snd $ unLoc happy_var_2)) []
                             else ams (sLL happy_var_1 happy_var_2 ([],snd $ unLoc happy_var_2)) [mj AnnSemi happy_var_1])}}
	) (\r -> happyReturn (happyIn204 r))

happyReduce_571 = happySpecReduce_0  189# happyReduction_571
happyReduction_571  =  happyIn204
		 (noLoc ([],[])
	)

happyReduce_572 = happyMonadReduce 2# 190# happyReduction_572
happyReduction_572 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut204 happy_x_2 of { happy_var_2 -> 
	( if null (snd $ unLoc happy_var_2)
                             then ams (sLL happy_var_1 happy_var_2 ([mj AnnSemi happy_var_1],snd $ unLoc happy_var_2)) []
                             else ams (sLL happy_var_1 happy_var_2 ([],snd $ unLoc happy_var_2)) [mj AnnSemi happy_var_1])}}
	) (\r -> happyReturn (happyIn205 r))

happyReduce_573 = happySpecReduce_0  190# happyReduction_573
happyReduction_573  =  happyIn205
		 (noLoc ([],[])
	)

happyReduce_574 = happySpecReduce_1  191# happyReduction_574
happyReduction_574 happy_x_1
	 =  case happyOut207 happy_x_1 of { happy_var_1 -> 
	happyIn206
		 (Just happy_var_1
	)}

happyReduce_575 = happySpecReduce_0  191# happyReduction_575
happyReduction_575  =  happyIn206
		 (Nothing
	)

happyReduce_576 = happySpecReduce_1  192# happyReduction_576
happyReduction_576 happy_x_1
	 =  case happyOut208 happy_x_1 of { happy_var_1 -> 
	happyIn207
		 (happy_var_1
	)}

happyReduce_577 = happyMonadReduce 2# 192# happyReduction_577
happyReduction_577 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut203 happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 $ mkRecStmt (snd $ unLoc happy_var_2))
                                               [mj AnnRec happy_var_1])}}
	) (\r -> happyReturn (happyIn207 r))

happyReduce_578 = happyMonadReduce 3# 193# happyReduction_578
happyReduction_578 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut200 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut161 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ mkBindStmt happy_var_1 happy_var_3)
                                               [mj AnnLarrow happy_var_2])}}}
	) (\r -> happyReturn (happyIn208 r))

happyReduce_579 = happySpecReduce_1  193# happyReduction_579
happyReduction_579 happy_x_1
	 =  case happyOut161 happy_x_1 of { happy_var_1 -> 
	happyIn208
		 (sL1 happy_var_1 $ mkBodyStmt happy_var_1
	)}

happyReduce_580 = happyMonadReduce 2# 193# happyReduction_580
happyReduction_580 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut89 happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2$ LetStmt (snd $ unLoc happy_var_2))
                                               [mj AnnLet happy_var_1])}}
	) (\r -> happyReturn (happyIn208 r))

happyReduce_581 = happySpecReduce_1  194# happyReduction_581
happyReduction_581 happy_x_1
	 =  case happyOut210 happy_x_1 of { happy_var_1 -> 
	happyIn209
		 (happy_var_1
	)}

happyReduce_582 = happySpecReduce_0  194# happyReduction_582
happyReduction_582  =  happyIn209
		 (([],([], False))
	)

happyReduce_583 = happyMonadReduce 3# 195# happyReduction_583
happyReduction_583 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut211 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut210 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl happy_var_1) AnnComma (gl happy_var_2) >>
                   return (case happy_var_3 of (ma,(flds, dd)) -> (ma,(happy_var_1 : flds, dd))))}}}
	) (\r -> happyReturn (happyIn210 r))

happyReduce_584 = happySpecReduce_1  195# happyReduction_584
happyReduction_584 happy_x_1
	 =  case happyOut211 happy_x_1 of { happy_var_1 -> 
	happyIn210
		 (([],([happy_var_1], False))
	)}

happyReduce_585 = happySpecReduce_1  195# happyReduction_585
happyReduction_585 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn210
		 (([mj AnnDotdot happy_var_1],([],   True))
	)}

happyReduce_586 = happyMonadReduce 3# 196# happyReduction_586
happyReduction_586 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut245 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut176 happy_x_3 of { happy_var_3 -> 
	( ams  (sLL happy_var_1 happy_var_3 $ HsRecField happy_var_1 happy_var_3             False)
                                [mj AnnEqual happy_var_2])}}}
	) (\r -> happyReturn (happyIn211 r))

happyReduce_587 = happySpecReduce_1  196# happyReduction_587
happyReduction_587 happy_x_1
	 =  case happyOut245 happy_x_1 of { happy_var_1 -> 
	happyIn211
		 (sLL happy_var_1 happy_var_1 $ HsRecField happy_var_1 placeHolderPunRhs True
	)}

happyReduce_588 = happyMonadReduce 3# 197# happyReduction_588
happyReduction_588 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut212 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut213 happy_x_3 of { happy_var_3 -> 
	( addAnnotation (gl $ last $ unLoc happy_var_1) AnnSemi (gl happy_var_2) >>
                         return (let { this = happy_var_3; rest = unLoc happy_var_1 }
                              in rest `seq` this `seq` sLL happy_var_1 happy_var_3 (this : rest)))}}}
	) (\r -> happyReturn (happyIn212 r))

happyReduce_589 = happyMonadReduce 2# 197# happyReduction_589
happyReduction_589 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut212 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( addAnnotation (gl $ last $ unLoc happy_var_1) AnnSemi (gl happy_var_2) >>
                         return (sLL happy_var_1 happy_var_2 (unLoc happy_var_1)))}}
	) (\r -> happyReturn (happyIn212 r))

happyReduce_590 = happySpecReduce_1  197# happyReduction_590
happyReduction_590 happy_x_1
	 =  case happyOut213 happy_x_1 of { happy_var_1 -> 
	happyIn212
		 (let this = happy_var_1 in this `seq` sL1 happy_var_1 [this]
	)}

happyReduce_591 = happyMonadReduce 3# 198# happyReduction_591
happyReduction_591 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut214 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut161 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (IPBind (Left (unLoc happy_var_1)) happy_var_3))
                                              [mj AnnEqual happy_var_2])}}}
	) (\r -> happyReturn (happyIn213 r))

happyReduce_592 = happySpecReduce_1  199# happyReduction_592
happyReduction_592 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn214
		 (sL1 happy_var_1 (HsIPName (getIPDUPVARID happy_var_1))
	)}

happyReduce_593 = happySpecReduce_1  200# happyReduction_593
happyReduction_593 happy_x_1
	 =  case happyOut216 happy_x_1 of { happy_var_1 -> 
	happyIn215
		 (happy_var_1
	)}

happyReduce_594 = happySpecReduce_0  200# happyReduction_594
happyReduction_594  =  happyIn215
		 (([],mkTrue)
	)

happyReduce_595 = happySpecReduce_1  201# happyReduction_595
happyReduction_595 happy_x_1
	 =  case happyOut217 happy_x_1 of { happy_var_1 -> 
	happyIn216
		 (happy_var_1
	)}

happyReduce_596 = happySpecReduce_3  201# happyReduction_596
happyReduction_596 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut217 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut216 happy_x_3 of { happy_var_3 -> 
	happyIn216
		 (((mj AnnVbar happy_var_2:fst happy_var_1)++(fst happy_var_3)
                                                ,mkOr [snd happy_var_1,snd happy_var_3])
	)}}}

happyReduce_597 = happySpecReduce_1  202# happyReduction_597
happyReduction_597 happy_x_1
	 =  case happyOut218 happy_x_1 of { happy_var_1 -> 
	happyIn217
		 (happy_var_1
	)}

happyReduce_598 = happySpecReduce_3  202# happyReduction_598
happyReduction_598 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut218 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut217 happy_x_3 of { happy_var_3 -> 
	happyIn217
		 (((mj AnnComma happy_var_2:fst happy_var_1)++(fst happy_var_3), mkAnd [snd happy_var_1,snd happy_var_3])
	)}}}

happyReduce_599 = happySpecReduce_3  203# happyReduction_599
happyReduction_599 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut216 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	happyIn218
		 (([mo happy_var_1,mc happy_var_3],snd happy_var_2)
	)}}}

happyReduce_600 = happySpecReduce_1  203# happyReduction_600
happyReduction_600 happy_x_1
	 =  case happyOut220 happy_x_1 of { happy_var_1 -> 
	happyIn218
		 (([],mkVar happy_var_1)
	)}

happyReduce_601 = happySpecReduce_1  204# happyReduction_601
happyReduction_601 happy_x_1
	 =  case happyOut220 happy_x_1 of { happy_var_1 -> 
	happyIn219
		 (sL1 happy_var_1 [unLoc happy_var_1]
	)}

happyReduce_602 = happySpecReduce_3  204# happyReduction_602
happyReduction_602 happy_x_3
	happy_x_2
	happy_x_1
	 =  case happyOut220 happy_x_1 of { happy_var_1 -> 
	case happyOut219 happy_x_3 of { happy_var_3 -> 
	happyIn219
		 (sLL happy_var_1 happy_var_3 (unLoc happy_var_1 : unLoc happy_var_3)
	)}}

happyReduce_603 = happySpecReduce_1  205# happyReduction_603
happyReduction_603 happy_x_1
	 =  case happyOut244 happy_x_1 of { happy_var_1 -> 
	happyIn220
		 (happy_var_1
	)}

happyReduce_604 = happySpecReduce_1  205# happyReduction_604
happyReduction_604 happy_x_1
	 =  case happyOut222 happy_x_1 of { happy_var_1 -> 
	happyIn220
		 (happy_var_1
	)}

happyReduce_605 = happySpecReduce_1  206# happyReduction_605
happyReduction_605 happy_x_1
	 =  case happyOut255 happy_x_1 of { happy_var_1 -> 
	happyIn221
		 (happy_var_1
	)}

happyReduce_606 = happyMonadReduce 3# 206# happyReduction_606
happyReduction_606 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut257 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (unLoc happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn221 r))

happyReduce_607 = happySpecReduce_1  206# happyReduction_607
happyReduction_607 happy_x_1
	 =  case happyOut224 happy_x_1 of { happy_var_1 -> 
	happyIn221
		 (sL1 happy_var_1 $ nameRdrName (dataConName (unLoc happy_var_1))
	)}

happyReduce_608 = happySpecReduce_1  207# happyReduction_608
happyReduction_608 happy_x_1
	 =  case happyOut256 happy_x_1 of { happy_var_1 -> 
	happyIn222
		 (happy_var_1
	)}

happyReduce_609 = happyMonadReduce 3# 207# happyReduction_609
happyReduction_609 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut258 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (unLoc happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn222 r))

happyReduce_610 = happySpecReduce_1  207# happyReduction_610
happyReduction_610 happy_x_1
	 =  case happyOut224 happy_x_1 of { happy_var_1 -> 
	happyIn222
		 (sL1 happy_var_1 $ nameRdrName (dataConName (unLoc happy_var_1))
	)}

happyReduce_611 = happySpecReduce_1  208# happyReduction_611
happyReduction_611 happy_x_1
	 =  case happyOut222 happy_x_1 of { happy_var_1 -> 
	happyIn223
		 (sL1 happy_var_1 [happy_var_1]
	)}

happyReduce_612 = happyMonadReduce 3# 208# happyReduction_612
happyReduction_612 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOut222 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOut223 happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (happy_var_1 : unLoc happy_var_3)) [mj AnnComma happy_var_2])}}}
	) (\r -> happyReturn (happyIn223 r))

happyReduce_613 = happyMonadReduce 2# 209# happyReduction_613
happyReduction_613 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 unitDataCon) [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn224 r))

happyReduce_614 = happyMonadReduce 3# 209# happyReduction_614
happyReduction_614 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut262 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ tupleCon BoxedTuple (snd happy_var_2 + 1))
                                       (mo happy_var_1:mc happy_var_3:(mcommas (fst happy_var_2))))}}}
	) (\r -> happyReturn (happyIn224 r))

happyReduce_615 = happyMonadReduce 2# 209# happyReduction_615
happyReduction_615 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 $ unboxedUnitDataCon) [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn224 r))

happyReduce_616 = happyMonadReduce 3# 209# happyReduction_616
happyReduction_616 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut262 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ tupleCon UnboxedTuple (snd happy_var_2 + 1))
                                       (mo happy_var_1:mc happy_var_3:(mcommas (fst happy_var_2))))}}}
	) (\r -> happyReturn (happyIn224 r))

happyReduce_617 = happyMonadReduce 2# 209# happyReduction_617
happyReduction_617 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 nilDataCon) [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn224 r))

happyReduce_618 = happySpecReduce_1  210# happyReduction_618
happyReduction_618 happy_x_1
	 =  case happyOut258 happy_x_1 of { happy_var_1 -> 
	happyIn225
		 (happy_var_1
	)}

happyReduce_619 = happyMonadReduce 3# 210# happyReduction_619
happyReduction_619 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut256 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (unLoc happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn225 r))

happyReduce_620 = happySpecReduce_1  211# happyReduction_620
happyReduction_620 happy_x_1
	 =  case happyOut257 happy_x_1 of { happy_var_1 -> 
	happyIn226
		 (happy_var_1
	)}

happyReduce_621 = happyMonadReduce 3# 211# happyReduction_621
happyReduction_621 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut255 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (unLoc happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn226 r))

happyReduce_622 = happySpecReduce_1  212# happyReduction_622
happyReduction_622 happy_x_1
	 =  case happyOut228 happy_x_1 of { happy_var_1 -> 
	happyIn227
		 (happy_var_1
	)}

happyReduce_623 = happyMonadReduce 2# 212# happyReduction_623
happyReduction_623 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 $ getRdrName unitTyCon)
                                              [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn227 r))

happyReduce_624 = happyMonadReduce 2# 212# happyReduction_624
happyReduction_624 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 $ getRdrName unboxedUnitTyCon)
                                              [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn227 r))

happyReduce_625 = happySpecReduce_1  213# happyReduction_625
happyReduction_625 happy_x_1
	 =  case happyOut229 happy_x_1 of { happy_var_1 -> 
	happyIn228
		 (happy_var_1
	)}

happyReduce_626 = happyMonadReduce 3# 213# happyReduction_626
happyReduction_626 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut262 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ getRdrName (tupleTyCon BoxedTuple
                                                        (snd happy_var_2 + 1)))
                                       (mo happy_var_1:mc happy_var_3:(mcommas (fst happy_var_2))))}}}
	) (\r -> happyReturn (happyIn228 r))

happyReduce_627 = happyMonadReduce 3# 213# happyReduction_627
happyReduction_627 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut262 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ getRdrName (tupleTyCon UnboxedTuple
                                                        (snd happy_var_2 + 1)))
                                       (mo happy_var_1:mc happy_var_3:(mcommas (fst happy_var_2))))}}}
	) (\r -> happyReturn (happyIn228 r))

happyReduce_628 = happyMonadReduce 3# 213# happyReduction_628
happyReduction_628 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ getRdrName funTyCon)
                                       [mo happy_var_1,mj AnnRarrow happy_var_2,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn228 r))

happyReduce_629 = happyMonadReduce 2# 213# happyReduction_629
happyReduction_629 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 $ listTyCon_RDR) [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn228 r))

happyReduce_630 = happyMonadReduce 2# 213# happyReduction_630
happyReduction_630 (happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	( ams (sLL happy_var_1 happy_var_2 $ parrTyCon_RDR) [mo happy_var_1,mc happy_var_2])}}
	) (\r -> happyReturn (happyIn228 r))

happyReduce_631 = happyMonadReduce 3# 213# happyReduction_631
happyReduction_631 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ getRdrName eqPrimTyCon)
                                        [mo happy_var_1,mj AnnTildehsh happy_var_2,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn228 r))

happyReduce_632 = happySpecReduce_1  214# happyReduction_632
happyReduction_632 happy_x_1
	 =  case happyOut231 happy_x_1 of { happy_var_1 -> 
	happyIn229
		 (happy_var_1
	)}

happyReduce_633 = happyMonadReduce 3# 214# happyReduction_633
happyReduction_633 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut233 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (unLoc happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn229 r))

happyReduce_634 = happyMonadReduce 3# 214# happyReduction_634
happyReduction_634 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 $ eqTyCon_RDR)
                                               [mo happy_var_1,mj AnnTilde happy_var_2,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn229 r))

happyReduce_635 = happySpecReduce_1  215# happyReduction_635
happyReduction_635 happy_x_1
	 =  case happyOut233 happy_x_1 of { happy_var_1 -> 
	happyIn230
		 (happy_var_1
	)}

happyReduce_636 = happyMonadReduce 3# 215# happyReduction_636
happyReduction_636 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut231 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (unLoc happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn230 r))

happyReduce_637 = happySpecReduce_1  216# happyReduction_637
happyReduction_637 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn231
		 (sL1 happy_var_1 $! mkQual tcClsName (getQCONID happy_var_1)
	)}

happyReduce_638 = happySpecReduce_1  216# happyReduction_638
happyReduction_638 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn231
		 (sL1 happy_var_1 $! mkQual tcClsName (getPREFIXQCONSYM happy_var_1)
	)}

happyReduce_639 = happySpecReduce_1  216# happyReduction_639
happyReduction_639 happy_x_1
	 =  case happyOut232 happy_x_1 of { happy_var_1 -> 
	happyIn231
		 (happy_var_1
	)}

happyReduce_640 = happySpecReduce_1  217# happyReduction_640
happyReduction_640 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn232
		 (sL1 happy_var_1 $! mkUnqual tcClsName (getCONID happy_var_1)
	)}

happyReduce_641 = happySpecReduce_1  218# happyReduction_641
happyReduction_641 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn233
		 (sL1 happy_var_1 $! mkQual tcClsName (getQCONSYM happy_var_1)
	)}

happyReduce_642 = happySpecReduce_1  218# happyReduction_642
happyReduction_642 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn233
		 (sL1 happy_var_1 $! mkQual tcClsName (getQVARSYM happy_var_1)
	)}

happyReduce_643 = happySpecReduce_1  218# happyReduction_643
happyReduction_643 happy_x_1
	 =  case happyOut234 happy_x_1 of { happy_var_1 -> 
	happyIn233
		 (happy_var_1
	)}

happyReduce_644 = happySpecReduce_1  219# happyReduction_644
happyReduction_644 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn234
		 (sL1 happy_var_1 $! mkUnqual tcClsName (getCONSYM happy_var_1)
	)}

happyReduce_645 = happySpecReduce_1  219# happyReduction_645
happyReduction_645 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn234
		 (sL1 happy_var_1 $! mkUnqual tcClsName (getVARSYM happy_var_1)
	)}

happyReduce_646 = happySpecReduce_1  219# happyReduction_646
happyReduction_646 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn234
		 (sL1 happy_var_1 $! mkUnqual tcClsName (fsLit "*")
	)}

happyReduce_647 = happySpecReduce_1  219# happyReduction_647
happyReduction_647 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn234
		 (sL1 happy_var_1 $! mkUnqual tcClsName (fsLit "-")
	)}

happyReduce_648 = happySpecReduce_1  220# happyReduction_648
happyReduction_648 happy_x_1
	 =  case happyOut236 happy_x_1 of { happy_var_1 -> 
	happyIn235
		 (happy_var_1
	)}

happyReduce_649 = happySpecReduce_1  220# happyReduction_649
happyReduction_649 happy_x_1
	 =  case happyOut225 happy_x_1 of { happy_var_1 -> 
	happyIn235
		 (happy_var_1
	)}

happyReduce_650 = happySpecReduce_1  221# happyReduction_650
happyReduction_650 happy_x_1
	 =  case happyOut251 happy_x_1 of { happy_var_1 -> 
	happyIn236
		 (happy_var_1
	)}

happyReduce_651 = happyMonadReduce 3# 221# happyReduction_651
happyReduction_651 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut247 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (unLoc happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn236 r))

happyReduce_652 = happySpecReduce_1  222# happyReduction_652
happyReduction_652 happy_x_1
	 =  case happyOut239 happy_x_1 of { happy_var_1 -> 
	happyIn237
		 (sL1 happy_var_1 $ HsVar (unLoc happy_var_1)
	)}

happyReduce_653 = happySpecReduce_1  222# happyReduction_653
happyReduction_653 happy_x_1
	 =  case happyOut226 happy_x_1 of { happy_var_1 -> 
	happyIn237
		 (sL1 happy_var_1 $ HsVar (unLoc happy_var_1)
	)}

happyReduce_654 = happySpecReduce_1  223# happyReduction_654
happyReduction_654 happy_x_1
	 =  case happyOut240 happy_x_1 of { happy_var_1 -> 
	happyIn238
		 (sL1 happy_var_1 $ HsVar (unLoc happy_var_1)
	)}

happyReduce_655 = happySpecReduce_1  223# happyReduction_655
happyReduction_655 happy_x_1
	 =  case happyOut226 happy_x_1 of { happy_var_1 -> 
	happyIn238
		 (sL1 happy_var_1 $ HsVar (unLoc happy_var_1)
	)}

happyReduce_656 = happySpecReduce_1  224# happyReduction_656
happyReduction_656 happy_x_1
	 =  case happyOut248 happy_x_1 of { happy_var_1 -> 
	happyIn239
		 (happy_var_1
	)}

happyReduce_657 = happyMonadReduce 3# 224# happyReduction_657
happyReduction_657 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut246 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (unLoc happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn239 r))

happyReduce_658 = happySpecReduce_1  225# happyReduction_658
happyReduction_658 happy_x_1
	 =  case happyOut249 happy_x_1 of { happy_var_1 -> 
	happyIn240
		 (happy_var_1
	)}

happyReduce_659 = happyMonadReduce 3# 225# happyReduction_659
happyReduction_659 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut246 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (unLoc happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn240 r))

happyReduce_660 = happySpecReduce_1  226# happyReduction_660
happyReduction_660 happy_x_1
	 =  case happyOut243 happy_x_1 of { happy_var_1 -> 
	happyIn241
		 (happy_var_1
	)}

happyReduce_661 = happyMonadReduce 3# 227# happyReduction_661
happyReduction_661 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut243 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (unLoc happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn242 r))

happyReduce_662 = happyMonadReduce 1# 227# happyReduction_662
happyReduction_662 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( parseErrorSDoc (getLoc happy_var_1)
                                      (vcat [ptext (sLit "Illegal symbol '.' in type"),
                                             ptext (sLit "Perhaps you intended to use RankNTypes or a similar language"),
                                             ptext (sLit "extension to enable explicit-forall syntax: forall <tvs>. <type>")]))}
	) (\r -> happyReturn (happyIn242 r))

happyReduce_663 = happySpecReduce_1  228# happyReduction_663
happyReduction_663 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn243
		 (sL1 happy_var_1 $! mkUnqual tvName (getVARID happy_var_1)
	)}

happyReduce_664 = happySpecReduce_1  228# happyReduction_664
happyReduction_664 happy_x_1
	 =  case happyOut253 happy_x_1 of { happy_var_1 -> 
	happyIn243
		 (sL1 happy_var_1 $! mkUnqual tvName (unLoc happy_var_1)
	)}

happyReduce_665 = happySpecReduce_1  228# happyReduction_665
happyReduction_665 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn243
		 (sL1 happy_var_1 $! mkUnqual tvName (fsLit "unsafe")
	)}

happyReduce_666 = happySpecReduce_1  228# happyReduction_666
happyReduction_666 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn243
		 (sL1 happy_var_1 $! mkUnqual tvName (fsLit "safe")
	)}

happyReduce_667 = happySpecReduce_1  228# happyReduction_667
happyReduction_667 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn243
		 (sL1 happy_var_1 $! mkUnqual tvName (fsLit "interruptible")
	)}

happyReduce_668 = happySpecReduce_1  229# happyReduction_668
happyReduction_668 happy_x_1
	 =  case happyOut247 happy_x_1 of { happy_var_1 -> 
	happyIn244
		 (happy_var_1
	)}

happyReduce_669 = happyMonadReduce 3# 229# happyReduction_669
happyReduction_669 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut251 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (unLoc happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn244 r))

happyReduce_670 = happySpecReduce_1  230# happyReduction_670
happyReduction_670 happy_x_1
	 =  case happyOut246 happy_x_1 of { happy_var_1 -> 
	happyIn245
		 (happy_var_1
	)}

happyReduce_671 = happyMonadReduce 3# 230# happyReduction_671
happyReduction_671 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut251 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (unLoc happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn245 r))

happyReduce_672 = happyMonadReduce 3# 230# happyReduction_672
happyReduction_672 (happy_x_3 `HappyStk`
	happy_x_2 `HappyStk`
	happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	case happyOut250 happy_x_2 of { happy_var_2 -> 
	case happyOutTok happy_x_3 of { happy_var_3 -> 
	( ams (sLL happy_var_1 happy_var_3 (unLoc happy_var_2)) [mo happy_var_1,mc happy_var_3])}}}
	) (\r -> happyReturn (happyIn245 r))

happyReduce_673 = happySpecReduce_1  231# happyReduction_673
happyReduction_673 happy_x_1
	 =  case happyOut247 happy_x_1 of { happy_var_1 -> 
	happyIn246
		 (happy_var_1
	)}

happyReduce_674 = happySpecReduce_1  231# happyReduction_674
happyReduction_674 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn246
		 (sL1 happy_var_1 $! mkQual varName (getQVARID happy_var_1)
	)}

happyReduce_675 = happySpecReduce_1  231# happyReduction_675
happyReduction_675 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn246
		 (sL1 happy_var_1 $! mkQual varName (getPREFIXQVARSYM happy_var_1)
	)}

happyReduce_676 = happySpecReduce_1  232# happyReduction_676
happyReduction_676 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn247
		 (sL1 happy_var_1 $! mkUnqual varName (getVARID happy_var_1)
	)}

happyReduce_677 = happySpecReduce_1  232# happyReduction_677
happyReduction_677 happy_x_1
	 =  case happyOut253 happy_x_1 of { happy_var_1 -> 
	happyIn247
		 (sL1 happy_var_1 $! mkUnqual varName (unLoc happy_var_1)
	)}

happyReduce_678 = happySpecReduce_1  232# happyReduction_678
happyReduction_678 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn247
		 (sL1 happy_var_1 $! mkUnqual varName (fsLit "unsafe")
	)}

happyReduce_679 = happySpecReduce_1  232# happyReduction_679
happyReduction_679 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn247
		 (sL1 happy_var_1 $! mkUnqual varName (fsLit "safe")
	)}

happyReduce_680 = happySpecReduce_1  232# happyReduction_680
happyReduction_680 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn247
		 (sL1 happy_var_1 $! mkUnqual varName (fsLit "interruptible")
	)}

happyReduce_681 = happySpecReduce_1  232# happyReduction_681
happyReduction_681 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn247
		 (sL1 happy_var_1 $! mkUnqual varName (fsLit "forall")
	)}

happyReduce_682 = happySpecReduce_1  232# happyReduction_682
happyReduction_682 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn247
		 (sL1 happy_var_1 $! mkUnqual varName (fsLit "family")
	)}

happyReduce_683 = happySpecReduce_1  232# happyReduction_683
happyReduction_683 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn247
		 (sL1 happy_var_1 $! mkUnqual varName (fsLit "role")
	)}

happyReduce_684 = happySpecReduce_1  233# happyReduction_684
happyReduction_684 happy_x_1
	 =  case happyOut251 happy_x_1 of { happy_var_1 -> 
	happyIn248
		 (happy_var_1
	)}

happyReduce_685 = happySpecReduce_1  233# happyReduction_685
happyReduction_685 happy_x_1
	 =  case happyOut250 happy_x_1 of { happy_var_1 -> 
	happyIn248
		 (happy_var_1
	)}

happyReduce_686 = happySpecReduce_1  234# happyReduction_686
happyReduction_686 happy_x_1
	 =  case happyOut252 happy_x_1 of { happy_var_1 -> 
	happyIn249
		 (happy_var_1
	)}

happyReduce_687 = happySpecReduce_1  234# happyReduction_687
happyReduction_687 happy_x_1
	 =  case happyOut250 happy_x_1 of { happy_var_1 -> 
	happyIn249
		 (happy_var_1
	)}

happyReduce_688 = happySpecReduce_1  235# happyReduction_688
happyReduction_688 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn250
		 (sL1 happy_var_1 $ mkQual varName (getQVARSYM happy_var_1)
	)}

happyReduce_689 = happySpecReduce_1  236# happyReduction_689
happyReduction_689 happy_x_1
	 =  case happyOut252 happy_x_1 of { happy_var_1 -> 
	happyIn251
		 (happy_var_1
	)}

happyReduce_690 = happySpecReduce_1  236# happyReduction_690
happyReduction_690 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn251
		 (sL1 happy_var_1 $ mkUnqual varName (fsLit "-")
	)}

happyReduce_691 = happySpecReduce_1  237# happyReduction_691
happyReduction_691 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn252
		 (sL1 happy_var_1 $ mkUnqual varName (getVARSYM happy_var_1)
	)}

happyReduce_692 = happySpecReduce_1  237# happyReduction_692
happyReduction_692 happy_x_1
	 =  case happyOut254 happy_x_1 of { happy_var_1 -> 
	happyIn252
		 (sL1 happy_var_1 $ mkUnqual varName (unLoc happy_var_1)
	)}

happyReduce_693 = happySpecReduce_1  238# happyReduction_693
happyReduction_693 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn253
		 (sL1 happy_var_1 (fsLit "as")
	)}

happyReduce_694 = happySpecReduce_1  238# happyReduction_694
happyReduction_694 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn253
		 (sL1 happy_var_1 (fsLit "qualified")
	)}

happyReduce_695 = happySpecReduce_1  238# happyReduction_695
happyReduction_695 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn253
		 (sL1 happy_var_1 (fsLit "hiding")
	)}

happyReduce_696 = happySpecReduce_1  238# happyReduction_696
happyReduction_696 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn253
		 (sL1 happy_var_1 (fsLit "export")
	)}

happyReduce_697 = happySpecReduce_1  238# happyReduction_697
happyReduction_697 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn253
		 (sL1 happy_var_1 (fsLit "label")
	)}

happyReduce_698 = happySpecReduce_1  238# happyReduction_698
happyReduction_698 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn253
		 (sL1 happy_var_1 (fsLit "dynamic")
	)}

happyReduce_699 = happySpecReduce_1  238# happyReduction_699
happyReduction_699 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn253
		 (sL1 happy_var_1 (fsLit "stdcall")
	)}

happyReduce_700 = happySpecReduce_1  238# happyReduction_700
happyReduction_700 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn253
		 (sL1 happy_var_1 (fsLit "ccall")
	)}

happyReduce_701 = happySpecReduce_1  238# happyReduction_701
happyReduction_701 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn253
		 (sL1 happy_var_1 (fsLit "capi")
	)}

happyReduce_702 = happySpecReduce_1  238# happyReduction_702
happyReduction_702 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn253
		 (sL1 happy_var_1 (fsLit "prim")
	)}

happyReduce_703 = happySpecReduce_1  238# happyReduction_703
happyReduction_703 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn253
		 (sL1 happy_var_1 (fsLit "javascript")
	)}

happyReduce_704 = happySpecReduce_1  238# happyReduction_704
happyReduction_704 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn253
		 (sL1 happy_var_1 (fsLit "group")
	)}

happyReduce_705 = happySpecReduce_1  239# happyReduction_705
happyReduction_705 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn254
		 (sL1 happy_var_1 (fsLit "!")
	)}

happyReduce_706 = happySpecReduce_1  239# happyReduction_706
happyReduction_706 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn254
		 (sL1 happy_var_1 (fsLit ".")
	)}

happyReduce_707 = happySpecReduce_1  239# happyReduction_707
happyReduction_707 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn254
		 (sL1 happy_var_1 (fsLit "*")
	)}

happyReduce_708 = happySpecReduce_1  240# happyReduction_708
happyReduction_708 happy_x_1
	 =  case happyOut256 happy_x_1 of { happy_var_1 -> 
	happyIn255
		 (happy_var_1
	)}

happyReduce_709 = happySpecReduce_1  240# happyReduction_709
happyReduction_709 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn255
		 (sL1 happy_var_1 $! mkQual dataName (getQCONID happy_var_1)
	)}

happyReduce_710 = happySpecReduce_1  240# happyReduction_710
happyReduction_710 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn255
		 (sL1 happy_var_1 $! mkQual dataName (getPREFIXQCONSYM happy_var_1)
	)}

happyReduce_711 = happySpecReduce_1  241# happyReduction_711
happyReduction_711 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn256
		 (sL1 happy_var_1 $ mkUnqual dataName (getCONID happy_var_1)
	)}

happyReduce_712 = happySpecReduce_1  242# happyReduction_712
happyReduction_712 happy_x_1
	 =  case happyOut258 happy_x_1 of { happy_var_1 -> 
	happyIn257
		 (happy_var_1
	)}

happyReduce_713 = happySpecReduce_1  242# happyReduction_713
happyReduction_713 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn257
		 (sL1 happy_var_1 $ mkQual dataName (getQCONSYM happy_var_1)
	)}

happyReduce_714 = happySpecReduce_1  243# happyReduction_714
happyReduction_714 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn258
		 (sL1 happy_var_1 $ mkUnqual dataName (getCONSYM happy_var_1)
	)}

happyReduce_715 = happySpecReduce_1  243# happyReduction_715
happyReduction_715 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn258
		 (sL1 happy_var_1 $ consDataCon_RDR
	)}

happyReduce_716 = happySpecReduce_1  244# happyReduction_716
happyReduction_716 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn259
		 (sL1 happy_var_1 $ HsChar       (getCHARs happy_var_1) $ getCHAR happy_var_1
	)}

happyReduce_717 = happySpecReduce_1  244# happyReduction_717
happyReduction_717 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn259
		 (sL1 happy_var_1 $ HsString     (getSTRINGs happy_var_1)
                                                   $ getSTRING happy_var_1
	)}

happyReduce_718 = happySpecReduce_1  244# happyReduction_718
happyReduction_718 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn259
		 (sL1 happy_var_1 $ HsIntPrim    (getPRIMINTEGERs happy_var_1)
                                                   $ getPRIMINTEGER happy_var_1
	)}

happyReduce_719 = happySpecReduce_1  244# happyReduction_719
happyReduction_719 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn259
		 (sL1 happy_var_1 $ HsWordPrim   (getPRIMWORDs happy_var_1)
                                                   $ getPRIMWORD happy_var_1
	)}

happyReduce_720 = happySpecReduce_1  244# happyReduction_720
happyReduction_720 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn259
		 (sL1 happy_var_1 $ HsCharPrim   (getPRIMCHARs happy_var_1)
                                                   $ getPRIMCHAR happy_var_1
	)}

happyReduce_721 = happySpecReduce_1  244# happyReduction_721
happyReduction_721 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn259
		 (sL1 happy_var_1 $ HsStringPrim (getPRIMSTRINGs happy_var_1)
                                                   $ getPRIMSTRING happy_var_1
	)}

happyReduce_722 = happySpecReduce_1  244# happyReduction_722
happyReduction_722 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn259
		 (sL1 happy_var_1 $ HsFloatPrim  $ getPRIMFLOAT happy_var_1
	)}

happyReduce_723 = happySpecReduce_1  244# happyReduction_723
happyReduction_723 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn259
		 (sL1 happy_var_1 $ HsDoublePrim $ getPRIMDOUBLE happy_var_1
	)}

happyReduce_724 = happySpecReduce_1  245# happyReduction_724
happyReduction_724 happy_x_1
	 =  happyIn260
		 (()
	)

happyReduce_725 = happyMonadReduce 1# 245# happyReduction_725
happyReduction_725 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (( popContext)
	) (\r -> happyReturn (happyIn260 r))

happyReduce_726 = happySpecReduce_1  246# happyReduction_726
happyReduction_726 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn261
		 (sL1 happy_var_1 $ mkModuleNameFS (getCONID happy_var_1)
	)}

happyReduce_727 = happySpecReduce_1  246# happyReduction_727
happyReduction_727 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn261
		 (sL1 happy_var_1 $ let (mod,c) = getQCONID happy_var_1 in
                                  mkModuleNameFS
                                   (mkFastString
                                     (unpackFS mod ++ '.':unpackFS c))
	)}

happyReduce_728 = happySpecReduce_2  247# happyReduction_728
happyReduction_728 happy_x_2
	happy_x_1
	 =  case happyOut262 happy_x_1 of { happy_var_1 -> 
	case happyOutTok happy_x_2 of { happy_var_2 -> 
	happyIn262
		 (((fst happy_var_1)++[gl happy_var_2],snd happy_var_1 + 1)
	)}}

happyReduce_729 = happySpecReduce_1  247# happyReduction_729
happyReduction_729 happy_x_1
	 =  case happyOutTok happy_x_1 of { happy_var_1 -> 
	happyIn262
		 (([gl happy_var_1],1)
	)}

happyReduce_730 = happyMonadReduce 1# 248# happyReduction_730
happyReduction_730 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( return (sL1 happy_var_1 (HsDocString (mkFastString (getDOCNEXT happy_var_1)))))}
	) (\r -> happyReturn (happyIn263 r))

happyReduce_731 = happyMonadReduce 1# 249# happyReduction_731
happyReduction_731 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( return (sL1 happy_var_1 (HsDocString (mkFastString (getDOCPREV happy_var_1)))))}
	) (\r -> happyReturn (happyIn264 r))

happyReduce_732 = happyMonadReduce 1# 250# happyReduction_732
happyReduction_732 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	(
      let string = getDOCNAMED happy_var_1
          (name, rest) = break isSpace string
      in return (sL1 happy_var_1 (name, HsDocString (mkFastString rest))))}
	) (\r -> happyReturn (happyIn265 r))

happyReduce_733 = happyMonadReduce 1# 251# happyReduction_733
happyReduction_733 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( let (n, doc) = getDOCSECTION happy_var_1 in
        return (sL1 happy_var_1 (n, HsDocString (mkFastString doc))))}
	) (\r -> happyReturn (happyIn266 r))

happyReduce_734 = happyMonadReduce 1# 252# happyReduction_734
happyReduction_734 (happy_x_1 `HappyStk`
	happyRest) tk
	 = happyThen (case happyOutTok happy_x_1 of { happy_var_1 -> 
	( let string = getDOCNEXT happy_var_1 in
                     return (Just (sL1 happy_var_1 (HsDocString (mkFastString string)))))}
	) (\r -> happyReturn (happyIn267 r))

happyReduce_735 = happySpecReduce_1  253# happyReduction_735
happyReduction_735 happy_x_1
	 =  case happyOut264 happy_x_1 of { happy_var_1 -> 
	happyIn268
		 (Just happy_var_1
	)}

happyReduce_736 = happySpecReduce_0  253# happyReduction_736
happyReduction_736  =  happyIn268
		 (Nothing
	)

happyReduce_737 = happySpecReduce_1  254# happyReduction_737
happyReduction_737 happy_x_1
	 =  case happyOut263 happy_x_1 of { happy_var_1 -> 
	happyIn269
		 (Just happy_var_1
	)}

happyReduce_738 = happySpecReduce_0  254# happyReduction_738
happyReduction_738  =  happyIn269
		 (Nothing
	)

happyNewToken action sts stk
	= (lexer True)(\tk -> 
	let cont i = happyDoAction i tk action sts stk in
	case tk of {
	L _ ITeof -> happyDoAction 150# tk action sts stk;
	L _ ITunderscore -> cont 1#;
	L _ ITas -> cont 2#;
	L _ ITcase -> cont 3#;
	L _ ITclass -> cont 4#;
	L _ ITdata -> cont 5#;
	L _ ITdefault -> cont 6#;
	L _ ITderiving -> cont 7#;
	L _ ITdo -> cont 8#;
	L _ ITelse -> cont 9#;
	L _ IThiding -> cont 10#;
	L _ ITif -> cont 11#;
	L _ ITimport -> cont 12#;
	L _ ITin -> cont 13#;
	L _ ITinfix -> cont 14#;
	L _ ITinfixl -> cont 15#;
	L _ ITinfixr -> cont 16#;
	L _ ITinstance -> cont 17#;
	L _ ITlet -> cont 18#;
	L _ ITmodule -> cont 19#;
	L _ ITnewtype -> cont 20#;
	L _ ITof -> cont 21#;
	L _ ITqualified -> cont 22#;
	L _ ITthen -> cont 23#;
	L _ ITtype -> cont 24#;
	L _ ITwhere -> cont 25#;
	L _ ITforall -> cont 26#;
	L _ ITforeign -> cont 27#;
	L _ ITexport -> cont 28#;
	L _ ITlabel -> cont 29#;
	L _ ITdynamic -> cont 30#;
	L _ ITsafe -> cont 31#;
	L _ ITinterruptible -> cont 32#;
	L _ ITunsafe -> cont 33#;
	L _ ITmdo -> cont 34#;
	L _ ITfamily -> cont 35#;
	L _ ITrole -> cont 36#;
	L _ ITstdcallconv -> cont 37#;
	L _ ITccallconv -> cont 38#;
	L _ ITcapiconv -> cont 39#;
	L _ ITprimcallconv -> cont 40#;
	L _ ITjavascriptcallconv -> cont 41#;
	L _ ITproc -> cont 42#;
	L _ ITrec -> cont 43#;
	L _ ITgroup -> cont 44#;
	L _ ITby -> cont 45#;
	L _ ITusing -> cont 46#;
	L _ ITpattern -> cont 47#;
	L _ ITstatic -> cont 48#;
	L _ (ITinline_prag _ _) -> cont 49#;
	L _ ITspec_prag -> cont 50#;
	L _ (ITspec_inline_prag _) -> cont 51#;
	L _ ITsource_prag -> cont 52#;
	L _ ITrules_prag -> cont 53#;
	L _ ITcore_prag -> cont 54#;
	L _ ITscc_prag -> cont 55#;
	L _ ITgenerated_prag -> cont 56#;
	L _ ITdeprecated_prag -> cont 57#;
	L _ ITwarning_prag -> cont 58#;
	L _ ITunpack_prag -> cont 59#;
	L _ ITnounpack_prag -> cont 60#;
	L _ ITann_prag -> cont 61#;
	L _ ITvect_prag -> cont 62#;
	L _ ITvect_scalar_prag -> cont 63#;
	L _ ITnovect_prag -> cont 64#;
	L _ ITminimal_prag -> cont 65#;
	L _ ITctype -> cont 66#;
	L _ IToverlapping_prag -> cont 67#;
	L _ IToverlappable_prag -> cont 68#;
	L _ IToverlaps_prag -> cont 69#;
	L _ ITincoherent_prag -> cont 70#;
	L _ ITclose_prag -> cont 71#;
	L _ ITdotdot -> cont 72#;
	L _ ITcolon -> cont 73#;
	L _ ITdcolon -> cont 74#;
	L _ ITequal -> cont 75#;
	L _ ITlam -> cont 76#;
	L _ ITlcase -> cont 77#;
	L _ ITvbar -> cont 78#;
	L _ ITlarrow -> cont 79#;
	L _ ITrarrow -> cont 80#;
	L _ ITat -> cont 81#;
	L _ ITtilde -> cont 82#;
	L _ ITtildehsh -> cont 83#;
	L _ ITdarrow -> cont 84#;
	L _ ITminus -> cont 85#;
	L _ ITbang -> cont 86#;
	L _ ITstar -> cont 87#;
	L _ ITlarrowtail -> cont 88#;
	L _ ITrarrowtail -> cont 89#;
	L _ ITLarrowtail -> cont 90#;
	L _ ITRarrowtail -> cont 91#;
	L _ ITdot -> cont 92#;
	L _ ITocurly -> cont 93#;
	L _ ITccurly -> cont 94#;
	L _ ITvocurly -> cont 95#;
	L _ ITvccurly -> cont 96#;
	L _ ITobrack -> cont 97#;
	L _ ITcbrack -> cont 98#;
	L _ ITopabrack -> cont 99#;
	L _ ITcpabrack -> cont 100#;
	L _ IToparen -> cont 101#;
	L _ ITcparen -> cont 102#;
	L _ IToubxparen -> cont 103#;
	L _ ITcubxparen -> cont 104#;
	L _ IToparenbar -> cont 105#;
	L _ ITcparenbar -> cont 106#;
	L _ ITsemi -> cont 107#;
	L _ ITcomma -> cont 108#;
	L _ ITbackquote -> cont 109#;
	L _ ITsimpleQuote -> cont 110#;
	L _ (ITvarid    _) -> cont 111#;
	L _ (ITconid    _) -> cont 112#;
	L _ (ITvarsym   _) -> cont 113#;
	L _ (ITconsym   _) -> cont 114#;
	L _ (ITqvarid   _) -> cont 115#;
	L _ (ITqconid   _) -> cont 116#;
	L _ (ITqvarsym  _) -> cont 117#;
	L _ (ITqconsym  _) -> cont 118#;
	L _ (ITprefixqvarsym  _) -> cont 119#;
	L _ (ITprefixqconsym  _) -> cont 120#;
	L _ (ITdupipvarid   _) -> cont 121#;
	L _ (ITchar   _ _) -> cont 122#;
	L _ (ITstring _ _) -> cont 123#;
	L _ (ITinteger _ _) -> cont 124#;
	L _ (ITrational _) -> cont 125#;
	L _ (ITprimchar   _ _) -> cont 126#;
	L _ (ITprimstring _ _) -> cont 127#;
	L _ (ITprimint    _ _) -> cont 128#;
	L _ (ITprimword   _ _) -> cont 129#;
	L _ (ITprimfloat  _) -> cont 130#;
	L _ (ITprimdouble _) -> cont 131#;
	L _ (ITdocCommentNext _) -> cont 132#;
	L _ (ITdocCommentPrev _) -> cont 133#;
	L _ (ITdocCommentNamed _) -> cont 134#;
	L _ (ITdocSection _ _) -> cont 135#;
	L _ ITopenExpQuote -> cont 136#;
	L _ ITopenPatQuote -> cont 137#;
	L _ ITopenTypQuote -> cont 138#;
	L _ ITopenDecQuote -> cont 139#;
	L _ ITcloseQuote -> cont 140#;
	L _ ITopenTExpQuote -> cont 141#;
	L _ ITcloseTExpQuote -> cont 142#;
	L _ (ITidEscape _) -> cont 143#;
	L _ ITparenEscape -> cont 144#;
	L _ (ITidTyEscape _) -> cont 145#;
	L _ ITparenTyEscape -> cont 146#;
	L _ ITtyQuote -> cont 147#;
	L _ (ITquasiQuote _) -> cont 148#;
	L _ (ITqQuasiQuote _) -> cont 149#;
	_ -> happyError' tk
	})

happyError_ 150# tk = happyError' tk
happyError_ _ tk = happyError' tk

happyThen :: () => P a -> (a -> P b) -> P b
happyThen = (>>=)
happyReturn :: () => a -> P a
happyReturn = (return)
happyThen1 = happyThen
happyReturn1 :: () => a -> P a
happyReturn1 = happyReturn
happyError' :: () => ((Located Token)) -> P a
happyError' tk = (\token -> happyError) tk

partialStatement = happySomeParser where
  happySomeParser = happyThen (happyParse 0#) (\x -> happyReturn (happyOut207 x))

partialImport = happySomeParser where
  happySomeParser = happyThen (happyParse 1#) (\x -> happyReturn (happyOut40 x))

partialDeclaration = happySomeParser where
  happySomeParser = happyThen (happyParse 2#) (\x -> happyReturn (happyOut52 x))

partialTypeSignature = happySomeParser where
  happySomeParser = happyThen (happyParse 3#) (\x -> happyReturn (happyOut15 x))

partialModule = happySomeParser where
  happySomeParser = happyThen (happyParse 4#) (\x -> happyReturn (happyOut16 x))

partialExpression = happySomeParser where
  happySomeParser = happyThen (happyParse 5#) (\x -> happyReturn (happyOut161 x))

fullStatement = happySomeParser where
  happySomeParser = happyThen (happyParse 6#) (\x -> happyReturn (happyOut207 x))

fullImport = happySomeParser where
  happySomeParser = happyThen (happyParse 7#) (\x -> happyReturn (happyOut40 x))

fullDeclaration = happySomeParser where
  happySomeParser = happyThen (happyParse 8#) (\x -> happyReturn (happyOut52 x))

fullExpression = happySomeParser where
  happySomeParser = happyThen (happyParse 9#) (\x -> happyReturn (happyOut161 x))

fullTypeSignature = happySomeParser where
  happySomeParser = happyThen (happyParse 10#) (\x -> happyReturn (happyOut15 x))

fullModule = happySomeParser where
  happySomeParser = happyThen (happyParse 11#) (\x -> happyReturn (happyOut16 x))

happySeq = happyDoSeq


happyError :: P a
happyError = srcParseFail

getVARID        (L _ (ITvarid    x)) = x
getCONID        (L _ (ITconid    x)) = x
getVARSYM       (L _ (ITvarsym   x)) = x
getCONSYM       (L _ (ITconsym   x)) = x
getQVARID       (L _ (ITqvarid   x)) = x
getQCONID       (L _ (ITqconid   x)) = x
getQVARSYM      (L _ (ITqvarsym  x)) = x
getQCONSYM      (L _ (ITqconsym  x)) = x
getPREFIXQVARSYM (L _ (ITprefixqvarsym  x)) = x
getPREFIXQCONSYM (L _ (ITprefixqconsym  x)) = x
getIPDUPVARID   (L _ (ITdupipvarid   x)) = x
getCHAR         (L _ (ITchar   _ x)) = x
getSTRING       (L _ (ITstring _ x)) = x
getINTEGER      (L _ (ITinteger _ x)) = x
getRATIONAL     (L _ (ITrational x)) = x
getPRIMCHAR     (L _ (ITprimchar _ x)) = x
getPRIMSTRING   (L _ (ITprimstring _ x)) = x
getPRIMINTEGER  (L _ (ITprimint  _ x)) = x
getPRIMWORD     (L _ (ITprimword _ x)) = x
getPRIMFLOAT    (L _ (ITprimfloat x)) = x
getPRIMDOUBLE   (L _ (ITprimdouble x)) = x
getTH_ID_SPLICE (L _ (ITidEscape x)) = x
getTH_ID_TY_SPLICE (L _ (ITidTyEscape x)) = x
getINLINE       (L _ (ITinline_prag inl conl)) = (inl,conl)
getSPEC_INLINE  (L _ (ITspec_inline_prag True))  = (Inline,  FunLike)
getSPEC_INLINE  (L _ (ITspec_inline_prag False)) = (NoInline,FunLike)

getDOCNEXT (L _ (ITdocCommentNext x)) = x
getDOCPREV (L _ (ITdocCommentPrev x)) = x
getDOCNAMED (L _ (ITdocCommentNamed x)) = x
getDOCSECTION (L _ (ITdocSection n x)) = (n, x)

getCHARs        (L _ (ITchar       src _)) = src
getSTRINGs      (L _ (ITstring     src _)) = src
getINTEGERs     (L _ (ITinteger    src _)) = src
getPRIMCHARs    (L _ (ITprimchar   src _)) = src
getPRIMSTRINGs  (L _ (ITprimstring src _)) = src
getPRIMINTEGERs (L _ (ITprimint    src _)) = src
getPRIMWORDs    (L _ (ITprimword   src _)) = src



getSCC :: Located Token -> P FastString
getSCC lt = do let s = getSTRING lt
                   err = "Spaces are not allowed in SCCs"
               -- We probably actually want to be more restrictive than this
               if ' ' `elem` unpackFS s
                   then failSpanMsgP (getLoc lt) (text err)
                   else return s

-- Utilities for combining source spans
comb2 :: Located a -> Located b -> SrcSpan
comb2 a b = a `seq` b `seq` combineLocs a b

comb3 :: Located a -> Located b -> Located c -> SrcSpan
comb3 a b c = a `seq` b `seq` c `seq`
    combineSrcSpans (getLoc a) (combineSrcSpans (getLoc b) (getLoc c))

comb4 :: Located a -> Located b -> Located c -> Located d -> SrcSpan
comb4 a b c d = a `seq` b `seq` c `seq` d `seq`
    (combineSrcSpans (getLoc a) $ combineSrcSpans (getLoc b) $
                combineSrcSpans (getLoc c) (getLoc d))

-- strict constructor version:
{-# INLINE sL #-}
sL :: SrcSpan -> a -> Located a
sL span a = span `seq` a `seq` L span a

-- replaced last 3 CPP macros in this file
{-# INLINE sL0 #-}
sL0 = L noSrcSpan       -- #define L0   L noSrcSpan

{-# INLINE sL1 #-}
sL1 x = sL (getLoc x)   -- #define sL1   sL (getLoc $1)

{-# INLINE sLL #-}
sLL x y = sL (comb2 x y) -- #define LL   sL (comb2 $1 $>)

-- Make a source location for the file.  We're a bit lazy here and just
-- make a point SrcSpan at line 1, column 0.  Strictly speaking we should
-- try to find the span of the whole file (ToDo).
fileSrcSpan :: P SrcSpan
fileSrcSpan = do
  l <- getSrcLoc;
  let loc = mkSrcLoc (srcLocFile l) 1 1;
  return (mkSrcSpan loc loc)

-- Hint about the MultiWayIf extension
hintMultiWayIf :: SrcSpan -> P ()
hintMultiWayIf span = do
  mwiEnabled <- liftM ((Opt_MultiWayIf `xopt`) . dflags) getPState
  unless mwiEnabled $ parseErrorSDoc span $
    text "Multi-way if-expressions need MultiWayIf turned on"

-- Hint about if usage for beginners
hintIf :: SrcSpan -> String -> P (LHsExpr RdrName)
hintIf span msg = do
  mwiEnabled <- liftM ((Opt_MultiWayIf `xopt`) . dflags) getPState
  if mwiEnabled
    then parseErrorSDoc span $ text $ "parse error in if statement"
    else parseErrorSDoc span $ text $ "parse error in if statement: "++msg

-- Hint about explicit-forall, assuming UnicodeSyntax is on
hintExplicitForall :: SrcSpan -> P ()
hintExplicitForall span = do
    forall      <- extension explicitForallEnabled
    rulePrag    <- extension inRulePrag
    unless (forall || rulePrag) $ parseErrorSDoc span $ vcat
      [ text "Illegal symbol '\x2200' in type" -- U+2200 FOR ALL
      , text "Perhaps you intended to use RankNTypes or a similar language"
      , text "extension to enable explicit-forall syntax: \x2200 <tvs>. <type>"
      ]

namedWildcardsEnabled :: P Bool
namedWildcardsEnabled = liftM ((Opt_NamedWildCards `xopt`) . dflags) getPState

{-
%************************************************************************
%*                                                                      *
        Helper functions for generating annotations in the parser
%*                                                                      *
%************************************************************************

For the general principles of the following routines, see Note [Api annotations]
in ApiAnnotation.hs

-}

-- |Encapsulated call to addAnnotation, requiring only the SrcSpan of
-- the AST element the annotation belongs to
type AddAnn = (SrcSpan -> P ())

-- |Construct an AddAnn from the annotation keyword and the location
-- of the keyword
mj :: AnnKeywordId -> Located e -> AddAnn
mj a l = (\s -> addAnnotation s a (gl l))


gl = getLoc

-- |Add an annotation to the located element, and return the located
-- element as a pass through
aa :: Located a -> (AnnKeywordId,Located c) -> P (Located a)
aa a@(L l _) (b,s) = addAnnotation l b (gl s) >> return a

-- |Add an annotation to a located element resulting from a monadic action
am :: P (Located a) -> (AnnKeywordId, Located b) -> P (Located a)
am a (b,s) = do
  av@(L l _) <- a
  addAnnotation l b (gl s)
  return av

-- |Add a list of AddAnns to the given AST element
ams :: Located a -> [AddAnn] -> P (Located a)
ams a@(L l _) bs = mapM_ (\a -> a l) bs >> return a


-- |Add a list of AddAnns to the given AST element, where the AST element is the
--  result of a monadic action
amms :: P (Located a) -> [AddAnn] -> P (Located a)
amms a bs = do
  av@(L l _) <- a
  (mapM_ (\a -> a l) bs) >> return av

-- |Add a list of AddAnns to the AST element, and return the element as a
--  OrdList
amsu :: Located a -> [AddAnn] -> P (OrdList (Located a))
amsu a@(L l _) bs = (mapM_ (\a -> a l) bs) >> return (unitOL a)

-- |Synonyms for AddAnn versions of AnnOpen and AnnClose
mo,mc :: Located Token -> SrcSpan -> P ()
mo ll = mj AnnOpen ll
mc ll = mj AnnClose ll

-- |Given a list of the locations of commas, provide a [AddAnn] with an AnnComma
--  entry for each SrcSpan
mcommas :: [SrcSpan] -> [AddAnn]
mcommas ss = map (\s -> mj AnnComma (L s ())) ss

-- |Add the annotation to an AST element wrapped in a Just
ajl :: Located (Maybe (Located a)) -> AnnKeywordId -> SrcSpan
 -> P (Located (Maybe (Located a)))
ajl a@(L _ (Just (L l _))) b s = addAnnotation l b s >> return a

-- |Add all [AddAnn] to an AST element wrapped in a Just
aljs :: Located (Maybe (Located a)) -> [AddAnn]
  -> P (Located (Maybe (Located a)))
aljs a@(L _ (Just (L l _))) bs = (mapM_ (\a -> a l) bs) >> return a

-- |Add all [AddAnn] to an AST element wrapped in a Just
ajs a@(Just (L l _)) bs = (mapM_ (\a -> a l) bs) >> return a

-- |Get the location of the last element of a OrdList, or noLoc
oll :: OrdList (Located a) -> SrcSpan
oll l = case fromOL l of
         [] -> noSrcSpan
         xs -> getLoc (last xs)

-- |Add a semicolon annotation in the right place in a list. If the
-- leading list is empty, add it to the tail
asl :: [Located a] -> Located b -> Located a -> P()
asl [] (L ls _) (L l _) = addAnnotation l                  AnnSemi ls
asl (x:_xs) (L ls _) _x = addAnnotation (getLoc x) AnnSemi ls
{-# LINE 1 "templates/GenericTemplate.hs" #-}
{-# LINE 1 "templates/GenericTemplate.hs" #-}
{-# LINE 1 "<built-in>" #-}
{-# LINE 1 "<command-line>" #-}
{-# LINE 11 "<command-line>" #-}
# 1 "/usr/include/stdc-predef.h" 1 3 4

# 17 "/usr/include/stdc-predef.h" 3 4










































{-# LINE 11 "<command-line>" #-}
{-# LINE 1 "/opt/exp/ghc/root-ghc-7.10/lib/ghc-7.10.0.20150119/include/ghcversion.h" #-}


















{-# LINE 11 "<command-line>" #-}
{-# LINE 1 "templates/GenericTemplate.hs" #-}
-- Id: GenericTemplate.hs,v 1.26 2005/01/14 14:47:22 simonmar Exp 

{-# LINE 13 "templates/GenericTemplate.hs" #-}





-- Do not remove this comment. Required to fix CPP parsing when using GCC and a clang-compiled alex.
#if __GLASGOW_HASKELL__ > 706
#define LT(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.<# m)) :: Bool)
#define GTE(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.>=# m)) :: Bool)
#define EQ(n,m) ((Happy_GHC_Exts.tagToEnum# (n Happy_GHC_Exts.==# m)) :: Bool)
#else
#define LT(n,m) (n Happy_GHC_Exts.<# m)
#define GTE(n,m) (n Happy_GHC_Exts.>=# m)
#define EQ(n,m) (n Happy_GHC_Exts.==# m)
#endif
{-# LINE 46 "templates/GenericTemplate.hs" #-}


data Happy_IntList = HappyCons Happy_GHC_Exts.Int# Happy_IntList





{-# LINE 67 "templates/GenericTemplate.hs" #-}

{-# LINE 77 "templates/GenericTemplate.hs" #-}

{-# LINE 86 "templates/GenericTemplate.hs" #-}

infixr 9 `HappyStk`
data HappyStk a = HappyStk a (HappyStk a)

-----------------------------------------------------------------------------
-- starting the parse

happyParse start_state = happyNewToken start_state notHappyAtAll notHappyAtAll

-----------------------------------------------------------------------------
-- Accepting the parse

-- If the current token is 0#, it means we've just accepted a partial
-- parse (a %partial parser).  We must ignore the saved token on the top of
-- the stack in this case.
happyAccept 0# tk st sts (_ `HappyStk` ans `HappyStk` _) =
        happyReturn1 ans
happyAccept j tk st sts (HappyStk ans _) = 
        (happyTcHack j (happyTcHack st)) (happyReturn1 ans)

-----------------------------------------------------------------------------
-- Arrays only: do the next action



happyDoAction i tk st
        = {- nothing -}


          case action of
                0#           -> {- nothing -}
                                     happyFail i tk st
                -1#          -> {- nothing -}
                                     happyAccept i tk st
                n | LT(n,(0# :: Happy_GHC_Exts.Int#)) -> {- nothing -}

                                                   (happyReduceArr Happy_Data_Array.! rule) i tk st
                                                   where rule = (Happy_GHC_Exts.I# ((Happy_GHC_Exts.negateInt# ((n Happy_GHC_Exts.+# (1# :: Happy_GHC_Exts.Int#))))))
                n                 -> {- nothing -}


                                     happyShift new_state i tk st
                                     where new_state = (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#))
   where off    = indexShortOffAddr happyActOffsets st
         off_i  = (off Happy_GHC_Exts.+# i)
         check  = if GTE(off_i,(0# :: Happy_GHC_Exts.Int#))
                  then EQ(indexShortOffAddr happyCheck off_i, i)
                  else False
         action
          | check     = indexShortOffAddr happyTable off_i
          | otherwise = indexShortOffAddr happyDefActions st


indexShortOffAddr (HappyA# arr) off =
        Happy_GHC_Exts.narrow16Int# i
  where
        i = Happy_GHC_Exts.word2Int# (Happy_GHC_Exts.or# (Happy_GHC_Exts.uncheckedShiftL# high 8#) low)
        high = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr (off' Happy_GHC_Exts.+# 1#)))
        low  = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr off'))
        off' = off Happy_GHC_Exts.*# 2#





data HappyAddr = HappyA# Happy_GHC_Exts.Addr#




-----------------------------------------------------------------------------
-- HappyState data type (not arrays)

{-# LINE 170 "templates/GenericTemplate.hs" #-}

-----------------------------------------------------------------------------
-- Shifting a token

happyShift new_state 0# tk st sts stk@(x `HappyStk` _) =
     let i = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
--     trace "shifting the error token" $
     happyDoAction i tk new_state (HappyCons (st) (sts)) (stk)

happyShift new_state i tk st sts stk =
     happyNewToken new_state (HappyCons (st) (sts)) ((happyInTok (tk))`HappyStk`stk)

-- happyReduce is specialised for the common cases.

happySpecReduce_0 i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happySpecReduce_0 nt fn j tk st@((action)) sts stk
     = happyGoto nt j tk st (HappyCons (st) (sts)) (fn `HappyStk` stk)

happySpecReduce_1 i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happySpecReduce_1 nt fn j tk _ sts@((HappyCons (st@(action)) (_))) (v1`HappyStk`stk')
     = let r = fn v1 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_2 i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happySpecReduce_2 nt fn j tk _ (HappyCons (_) (sts@((HappyCons (st@(action)) (_))))) (v1`HappyStk`v2`HappyStk`stk')
     = let r = fn v1 v2 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_3 i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happySpecReduce_3 nt fn j tk _ (HappyCons (_) ((HappyCons (_) (sts@((HappyCons (st@(action)) (_))))))) (v1`HappyStk`v2`HappyStk`v3`HappyStk`stk')
     = let r = fn v1 v2 v3 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happyReduce k i fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happyReduce k nt fn j tk st sts stk
     = case happyDrop (k Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#)) sts of
         sts1@((HappyCons (st1@(action)) (_))) ->
                let r = fn stk in  -- it doesn't hurt to always seq here...
                happyDoSeq r (happyGoto nt j tk st1 sts1 r)

happyMonadReduce k nt fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happyMonadReduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
          let drop_stk = happyDropStk k stk in
          happyThen1 (fn stk tk) (\r -> happyGoto nt j tk st1 sts1 (r `HappyStk` drop_stk))

happyMonad2Reduce k nt fn 0# tk st sts stk
     = happyFail 0# tk st sts stk
happyMonad2Reduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
         let drop_stk = happyDropStk k stk

             off = indexShortOffAddr happyGotoOffsets st1
             off_i = (off Happy_GHC_Exts.+# nt)
             new_state = indexShortOffAddr happyTable off_i



          in
          happyThen1 (fn stk tk) (\r -> happyNewToken new_state sts1 (r `HappyStk` drop_stk))

happyDrop 0# l = l
happyDrop n (HappyCons (_) (t)) = happyDrop (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#)) t

happyDropStk 0# l = l
happyDropStk n (x `HappyStk` xs) = happyDropStk (n Happy_GHC_Exts.-# (1#::Happy_GHC_Exts.Int#)) xs

-----------------------------------------------------------------------------
-- Moving to a new state after a reduction


happyGoto nt j tk st = 
   {- nothing -}
   happyDoAction j tk new_state
   where off = indexShortOffAddr happyGotoOffsets st
         off_i = (off Happy_GHC_Exts.+# nt)
         new_state = indexShortOffAddr happyTable off_i




-----------------------------------------------------------------------------
-- Error recovery (0# is the error token)

-- parse error if we are in recovery and we fail again
happyFail 0# tk old_st _ stk@(x `HappyStk` _) =
     let i = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
--      trace "failing" $ 
        happyError_ i tk

{-  We don't need state discarding for our restricted implementation of
    "error".  In fact, it can cause some bogus parses, so I've disabled it
    for now --SDM

-- discard a state
happyFail  0# tk old_st (HappyCons ((action)) (sts)) 
                                                (saved_tok `HappyStk` _ `HappyStk` stk) =
--      trace ("discarding state, depth " ++ show (length stk))  $
        happyDoAction 0# tk action sts ((saved_tok`HappyStk`stk))
-}

-- Enter error recovery: generate an error token,
--                       save the old token and carry on.
happyFail  i tk (action) sts stk =
--      trace "entering error recovery" $
        happyDoAction 0# tk action sts ( (Happy_GHC_Exts.unsafeCoerce# (Happy_GHC_Exts.I# (i))) `HappyStk` stk)

-- Internal happy errors:

notHappyAtAll :: a
notHappyAtAll = error "Internal Happy error\n"

-----------------------------------------------------------------------------
-- Hack to get the typechecker to accept our action functions


happyTcHack :: Happy_GHC_Exts.Int# -> a -> a
happyTcHack x y = y
{-# INLINE happyTcHack #-}


-----------------------------------------------------------------------------
-- Seq-ing.  If the --strict flag is given, then Happy emits 
--      happySeq = happyDoSeq
-- otherwise it emits
--      happySeq = happyDontSeq

happyDoSeq, happyDontSeq :: a -> b -> b
happyDoSeq   a b = a `seq` b
happyDontSeq a b = b

-----------------------------------------------------------------------------
-- Don't inline any functions from the template.  GHC has a nasty habit
-- of deciding to inline happyGoto everywhere, which increases the size of
-- the generated parser quite a bit.


{-# NOINLINE happyDoAction #-}
{-# NOINLINE happyTable #-}
{-# NOINLINE happyCheck #-}
{-# NOINLINE happyActOffsets #-}
{-# NOINLINE happyGotoOffsets #-}
{-# NOINLINE happyDefActions #-}

{-# NOINLINE happyShift #-}
{-# NOINLINE happySpecReduce_0 #-}
{-# NOINLINE happySpecReduce_1 #-}
{-# NOINLINE happySpecReduce_2 #-}
{-# NOINLINE happySpecReduce_3 #-}
{-# NOINLINE happyReduce #-}
{-# NOINLINE happyMonadReduce #-}
{-# NOINLINE happyGoto #-}
{-# NOINLINE happyFail #-}

-- end of Happy Template.
